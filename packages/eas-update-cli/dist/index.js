#!/usr/bin/env node
/*! For license information please see index.js.LICENSE.txt */
import __rslib_shim_module__ from 'module';
/*#__PURE__*/ import.meta.url;
import { fileURLToPath as __webpack_fileURLToPath__ } from "node:url";
import { dirname as __webpack_dirname__ } from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE_assert__ from "assert";
import * as __WEBPACK_EXTERNAL_MODULE_buffer__ from "buffer";
import * as __WEBPACK_EXTERNAL_MODULE_child_process__ from "child_process";
import * as __WEBPACK_EXTERNAL_MODULE_crypto__ from "crypto";
import * as __WEBPACK_EXTERNAL_MODULE_events__ from "events";
import * as __WEBPACK_EXTERNAL_MODULE_fs__ from "fs";
import * as __WEBPACK_EXTERNAL_MODULE_fs_promises_400951f8__ from "fs/promises";
import * as __WEBPACK_EXTERNAL_MODULE_os__ from "os";
import * as __WEBPACK_EXTERNAL_MODULE_path__ from "path";
import * as __WEBPACK_EXTERNAL_MODULE_stream__ from "stream";
import * as __WEBPACK_EXTERNAL_MODULE_tty__ from "tty";
import * as __WEBPACK_EXTERNAL_MODULE_util__ from "util";
import * as __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__ from "node:url";
import * as __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__ from "node:child_process";
import * as __WEBPACK_EXTERNAL_MODULE_node_string_decoder_28f74b45__ from "node:string_decoder";
import * as __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__ from "node:util";
import * as __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__ from "node:process";
import * as __WEBPACK_EXTERNAL_MODULE_node_tty_c64aab7e__ from "node:tty";
import * as __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__ from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE_node_timers_promises_aedbf14c__ from "node:timers/promises";
import * as __WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__ from "node:os";
import * as __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__ from "node:events";
import * as __WEBPACK_EXTERNAL_MODULE_node_v8_d0df5498__ from "node:v8";
import * as __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__ from "node:fs";
import * as __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__ from "node:stream";
import * as __WEBPACK_EXTERNAL_MODULE_node_buffer_fb286294__ from "node:buffer";
import * as __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__ from "node:stream/promises";
import * as __WEBPACK_EXTERNAL_MODULE_commander__ from "commander";
import * as __WEBPACK_EXTERNAL_MODULE_boxen__ from "boxen";
import * as __WEBPACK_EXTERNAL_MODULE_semver__ from "semver";
import * as __WEBPACK_EXTERNAL_MODULE_read_package_up_b3f2e823__ from "read-package-up";
import * as __WEBPACK_EXTERNAL_MODULE_module__ from "module";
import * as __WEBPACK_EXTERNAL_MODULE__aws_sdk_client_s3_241e987a__ from "@aws-sdk/client-s3";
import * as __WEBPACK_EXTERNAL_MODULE__aws_sdk_lib_storage_3664e495__ from "@aws-sdk/lib-storage";
import * as __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__ from "@clack/prompts";
import * as __WEBPACK_EXTERNAL_MODULE_cosmiconfig__ from "cosmiconfig";
import * as __WEBPACK_EXTERNAL_MODULE_cosmiconfig_typescript_loader_05c5f2fe__ from "cosmiconfig-typescript-loader";
var __webpack_modules__ = {
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
        const fs = __webpack_require__("fs");
        exports.FILE_SYSTEM_ADAPTER = {
            lstat: fs.lstat,
            stat: fs.stat,
            lstatSync: fs.lstatSync,
            statSync: fs.statSync,
            readdir: fs.readdir,
            readdirSync: fs.readdirSync
        };
        function createFileSystemAdapter(fsMethods) {
            if (void 0 === fsMethods) return exports.FILE_SYSTEM_ADAPTER;
            return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
        }
        exports.createFileSystemAdapter = createFileSystemAdapter;
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
        const NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');
        if (void 0 === NODE_PROCESS_VERSION_PARTS[0] || void 0 === NODE_PROCESS_VERSION_PARTS[1]) throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
        const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
        const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
        const SUPPORTED_MAJOR_VERSION = 10;
        const SUPPORTED_MINOR_VERSION = 10;
        const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
        const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
        exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Settings = exports.scandirSync = exports.scandir = void 0;
        const async = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js");
        const sync = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js");
        const settings_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js");
        exports.Settings = settings_1.default;
        function scandir(path, optionsOrSettingsOrCallback, callback) {
            if ('function' == typeof optionsOrSettingsOrCallback) {
                async.read(path, getSettings(), optionsOrSettingsOrCallback);
                return;
            }
            async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
        }
        exports.scandir = scandir;
        function scandirSync(path, optionsOrSettings) {
            const settings = getSettings(optionsOrSettings);
            return sync.read(path, settings);
        }
        exports.scandirSync = scandirSync;
        function getSettings(settingsOrOptions = {}) {
            if (settingsOrOptions instanceof settings_1.default) return settingsOrOptions;
            return new settings_1.default(settingsOrOptions);
        }
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
        const fsStat = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js");
        const rpl = __webpack_require__("../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js");
        const constants_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js");
        const common = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js");
        function read(directory, settings, callback) {
            if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
                readdirWithFileTypes(directory, settings, callback);
                return;
            }
            readdir(directory, settings, callback);
        }
        exports.read = read;
        function readdirWithFileTypes(directory, settings, callback) {
            settings.fs.readdir(directory, {
                withFileTypes: true
            }, (readdirError, dirents)=>{
                if (null !== readdirError) {
                    callFailureCallback(callback, readdirError);
                    return;
                }
                const entries = dirents.map((dirent)=>({
                        dirent,
                        name: dirent.name,
                        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
                    }));
                if (!settings.followSymbolicLinks) {
                    callSuccessCallback(callback, entries);
                    return;
                }
                const tasks = entries.map((entry)=>makeRplTaskEntry(entry, settings));
                rpl(tasks, (rplError, rplEntries)=>{
                    if (null !== rplError) {
                        callFailureCallback(callback, rplError);
                        return;
                    }
                    callSuccessCallback(callback, rplEntries);
                });
            });
        }
        exports.readdirWithFileTypes = readdirWithFileTypes;
        function makeRplTaskEntry(entry, settings) {
            return (done)=>{
                if (!entry.dirent.isSymbolicLink()) {
                    done(null, entry);
                    return;
                }
                settings.fs.stat(entry.path, (statError, stats)=>{
                    if (null !== statError) {
                        if (settings.throwErrorOnBrokenSymbolicLink) {
                            done(statError);
                            return;
                        }
                        done(null, entry);
                        return;
                    }
                    entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
                    done(null, entry);
                });
            };
        }
        function readdir(directory, settings, callback) {
            settings.fs.readdir(directory, (readdirError, names)=>{
                if (null !== readdirError) {
                    callFailureCallback(callback, readdirError);
                    return;
                }
                const tasks = names.map((name)=>{
                    const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
                    return (done)=>{
                        fsStat.stat(path, settings.fsStatSettings, (error, stats)=>{
                            if (null !== error) {
                                done(error);
                                return;
                            }
                            const entry = {
                                name,
                                path,
                                dirent: utils.fs.createDirentFromStats(name, stats)
                            };
                            if (settings.stats) entry.stats = stats;
                            done(null, entry);
                        });
                    };
                });
                rpl(tasks, (rplError, entries)=>{
                    if (null !== rplError) {
                        callFailureCallback(callback, rplError);
                        return;
                    }
                    callSuccessCallback(callback, entries);
                });
            });
        }
        exports.readdir = readdir;
        function callFailureCallback(callback, error) {
            callback(error);
        }
        function callSuccessCallback(callback, result) {
            callback(null, result);
        }
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.joinPathSegments = void 0;
        function joinPathSegments(a, b, separator) {
            if (a.endsWith(separator)) return a + b;
            return a + separator + b;
        }
        exports.joinPathSegments = joinPathSegments;
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
        const fsStat = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js");
        const constants_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js");
        const common = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js");
        function read(directory, settings) {
            if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) return readdirWithFileTypes(directory, settings);
            return readdir(directory, settings);
        }
        exports.read = read;
        function readdirWithFileTypes(directory, settings) {
            const dirents = settings.fs.readdirSync(directory, {
                withFileTypes: true
            });
            return dirents.map((dirent)=>{
                const entry = {
                    dirent,
                    name: dirent.name,
                    path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
                };
                if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) try {
                    const stats = settings.fs.statSync(entry.path);
                    entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
                } catch (error) {
                    if (settings.throwErrorOnBrokenSymbolicLink) throw error;
                }
                return entry;
            });
        }
        exports.readdirWithFileTypes = readdirWithFileTypes;
        function readdir(directory, settings) {
            const names = settings.fs.readdirSync(directory);
            return names.map((name)=>{
                const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
                const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
                const entry = {
                    name,
                    path: entryPath,
                    dirent: utils.fs.createDirentFromStats(name, stats)
                };
                if (settings.stats) entry.stats = stats;
                return entry;
            });
        }
        exports.readdir = readdir;
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const path = __webpack_require__("path");
        const fsStat = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js");
        const fs = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js");
        class Settings {
            constructor(_options = {}){
                this._options = _options;
                this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
                this.fs = fs.createFileSystemAdapter(this._options.fs);
                this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
                this.stats = this._getValue(this._options.stats, false);
                this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
                this.fsStatSettings = new fsStat.Settings({
                    followSymbolicLink: this.followSymbolicLinks,
                    fs: this.fs,
                    throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
                });
            }
            _getValue(option, value1) {
                return null != option ? option : value1;
            }
        }
        exports["default"] = Settings;
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createDirentFromStats = void 0;
        class DirentFromStats {
            constructor(name, stats){
                this.name = name;
                this.isBlockDevice = stats.isBlockDevice.bind(stats);
                this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
                this.isDirectory = stats.isDirectory.bind(stats);
                this.isFIFO = stats.isFIFO.bind(stats);
                this.isFile = stats.isFile.bind(stats);
                this.isSocket = stats.isSocket.bind(stats);
                this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
            }
        }
        function createDirentFromStats(name, stats) {
            return new DirentFromStats(name, stats);
        }
        exports.createDirentFromStats = createDirentFromStats;
    },
    "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fs = void 0;
        const fs = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js");
        exports.fs = fs;
    },
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
        const fs = __webpack_require__("fs");
        exports.FILE_SYSTEM_ADAPTER = {
            lstat: fs.lstat,
            stat: fs.stat,
            lstatSync: fs.lstatSync,
            statSync: fs.statSync
        };
        function createFileSystemAdapter(fsMethods) {
            if (void 0 === fsMethods) return exports.FILE_SYSTEM_ADAPTER;
            return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
        }
        exports.createFileSystemAdapter = createFileSystemAdapter;
    },
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.statSync = exports.stat = exports.Settings = void 0;
        const async = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js");
        const sync = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js");
        const settings_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js");
        exports.Settings = settings_1.default;
        function stat(path, optionsOrSettingsOrCallback, callback) {
            if ('function' == typeof optionsOrSettingsOrCallback) {
                async.read(path, getSettings(), optionsOrSettingsOrCallback);
                return;
            }
            async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
        }
        exports.stat = stat;
        function statSync(path, optionsOrSettings) {
            const settings = getSettings(optionsOrSettings);
            return sync.read(path, settings);
        }
        exports.statSync = statSync;
        function getSettings(settingsOrOptions = {}) {
            if (settingsOrOptions instanceof settings_1.default) return settingsOrOptions;
            return new settings_1.default(settingsOrOptions);
        }
    },
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.read = void 0;
        function read(path, settings, callback) {
            settings.fs.lstat(path, (lstatError, lstat)=>{
                if (null !== lstatError) {
                    callFailureCallback(callback, lstatError);
                    return;
                }
                if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
                    callSuccessCallback(callback, lstat);
                    return;
                }
                settings.fs.stat(path, (statError, stat)=>{
                    if (null !== statError) {
                        if (settings.throwErrorOnBrokenSymbolicLink) {
                            callFailureCallback(callback, statError);
                            return;
                        }
                        callSuccessCallback(callback, lstat);
                        return;
                    }
                    if (settings.markSymbolicLink) stat.isSymbolicLink = ()=>true;
                    callSuccessCallback(callback, stat);
                });
            });
        }
        exports.read = read;
        function callFailureCallback(callback, error) {
            callback(error);
        }
        function callSuccessCallback(callback, result) {
            callback(null, result);
        }
    },
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.read = void 0;
        function read(path, settings) {
            const lstat = settings.fs.lstatSync(path);
            if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) return lstat;
            try {
                const stat = settings.fs.statSync(path);
                if (settings.markSymbolicLink) stat.isSymbolicLink = ()=>true;
                return stat;
            } catch (error) {
                if (!settings.throwErrorOnBrokenSymbolicLink) return lstat;
                throw error;
            }
        }
        exports.read = read;
    },
    "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const fs = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js");
        class Settings {
            constructor(_options = {}){
                this._options = _options;
                this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
                this.fs = fs.createFileSystemAdapter(this._options.fs);
                this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
                this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
            }
            _getValue(option, value1) {
                return null != option ? option : value1;
            }
        }
        exports["default"] = Settings;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
        const async_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js");
        const stream_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js");
        const sync_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js");
        const settings_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js");
        exports.Settings = settings_1.default;
        function walk(directory, optionsOrSettingsOrCallback, callback) {
            if ('function' == typeof optionsOrSettingsOrCallback) {
                new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
                return;
            }
            new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
        }
        exports.walk = walk;
        function walkSync(directory, optionsOrSettings) {
            const settings = getSettings(optionsOrSettings);
            const provider = new sync_1.default(directory, settings);
            return provider.read();
        }
        exports.walkSync = walkSync;
        function walkStream(directory, optionsOrSettings) {
            const settings = getSettings(optionsOrSettings);
            const provider = new stream_1.default(directory, settings);
            return provider.read();
        }
        exports.walkStream = walkStream;
        function getSettings(settingsOrOptions = {}) {
            if (settingsOrOptions instanceof settings_1.default) return settingsOrOptions;
            return new settings_1.default(settingsOrOptions);
        }
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const async_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js");
        class AsyncProvider {
            constructor(_root, _settings){
                this._root = _root;
                this._settings = _settings;
                this._reader = new async_1.default(this._root, this._settings);
                this._storage = [];
            }
            read(callback) {
                this._reader.onError((error)=>{
                    callFailureCallback(callback, error);
                });
                this._reader.onEntry((entry)=>{
                    this._storage.push(entry);
                });
                this._reader.onEnd(()=>{
                    callSuccessCallback(callback, this._storage);
                });
                this._reader.read();
            }
        }
        exports["default"] = AsyncProvider;
        function callFailureCallback(callback, error) {
            callback(error);
        }
        function callSuccessCallback(callback, entries) {
            callback(null, entries);
        }
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const stream_1 = __webpack_require__("stream");
        const async_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js");
        class StreamProvider {
            constructor(_root, _settings){
                this._root = _root;
                this._settings = _settings;
                this._reader = new async_1.default(this._root, this._settings);
                this._stream = new stream_1.Readable({
                    objectMode: true,
                    read: ()=>{},
                    destroy: ()=>{
                        if (!this._reader.isDestroyed) this._reader.destroy();
                    }
                });
            }
            read() {
                this._reader.onError((error)=>{
                    this._stream.emit('error', error);
                });
                this._reader.onEntry((entry)=>{
                    this._stream.push(entry);
                });
                this._reader.onEnd(()=>{
                    this._stream.push(null);
                });
                this._reader.read();
                return this._stream;
            }
        }
        exports["default"] = StreamProvider;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const sync_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js");
        class SyncProvider {
            constructor(_root, _settings){
                this._root = _root;
                this._settings = _settings;
                this._reader = new sync_1.default(this._root, this._settings);
            }
            read() {
                return this._reader.read();
            }
        }
        exports["default"] = SyncProvider;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const events_1 = __webpack_require__("events");
        const fsScandir = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js");
        const fastq = __webpack_require__("../../node_modules/.pnpm/fastq@1.19.1/node_modules/fastq/queue.js");
        const common = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js");
        const reader_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js");
        class AsyncReader extends reader_1.default {
            constructor(_root, _settings){
                super(_root, _settings);
                this._settings = _settings;
                this._scandir = fsScandir.scandir;
                this._emitter = new events_1.EventEmitter();
                this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
                this._isFatalError = false;
                this._isDestroyed = false;
                this._queue.drain = ()=>{
                    if (!this._isFatalError) this._emitter.emit('end');
                };
            }
            read() {
                this._isFatalError = false;
                this._isDestroyed = false;
                setImmediate(()=>{
                    this._pushToQueue(this._root, this._settings.basePath);
                });
                return this._emitter;
            }
            get isDestroyed() {
                return this._isDestroyed;
            }
            destroy() {
                if (this._isDestroyed) throw new Error('The reader is already destroyed');
                this._isDestroyed = true;
                this._queue.killAndDrain();
            }
            onEntry(callback) {
                this._emitter.on('entry', callback);
            }
            onError(callback) {
                this._emitter.once('error', callback);
            }
            onEnd(callback) {
                this._emitter.once('end', callback);
            }
            _pushToQueue(directory, base) {
                const queueItem = {
                    directory,
                    base
                };
                this._queue.push(queueItem, (error)=>{
                    if (null !== error) this._handleError(error);
                });
            }
            _worker(item, done) {
                this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries)=>{
                    if (null !== error) {
                        done(error, void 0);
                        return;
                    }
                    for (const entry of entries)this._handleEntry(entry, item.base);
                    done(null, void 0);
                });
            }
            _handleError(error) {
                if (this._isDestroyed || !common.isFatalError(this._settings, error)) return;
                this._isFatalError = true;
                this._isDestroyed = true;
                this._emitter.emit('error', error);
            }
            _handleEntry(entry, base) {
                if (this._isDestroyed || this._isFatalError) return;
                const fullpath = entry.path;
                if (void 0 !== base) entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
                if (common.isAppliedFilter(this._settings.entryFilter, entry)) this._emitEntry(entry);
                if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) this._pushToQueue(fullpath, void 0 === base ? void 0 : entry.path);
            }
            _emitEntry(entry) {
                this._emitter.emit('entry', entry);
            }
        }
        exports["default"] = AsyncReader;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
        function isFatalError(settings, error) {
            if (null === settings.errorFilter) return true;
            return !settings.errorFilter(error);
        }
        exports.isFatalError = isFatalError;
        function isAppliedFilter(filter, value1) {
            return null === filter || filter(value1);
        }
        exports.isAppliedFilter = isAppliedFilter;
        function replacePathSegmentSeparator(filepath, separator) {
            return filepath.split(/[/\\]/).join(separator);
        }
        exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
        function joinPathSegments(a, b, separator) {
            if ('' === a) return b;
            if (a.endsWith(separator)) return a + b;
            return a + separator + b;
        }
        exports.joinPathSegments = joinPathSegments;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const common = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js");
        class Reader {
            constructor(_root, _settings){
                this._root = _root;
                this._settings = _settings;
                this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
            }
        }
        exports["default"] = Reader;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const fsScandir = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js");
        const common = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js");
        const reader_1 = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js");
        class SyncReader extends reader_1.default {
            constructor(){
                super(...arguments);
                this._scandir = fsScandir.scandirSync;
                this._storage = [];
                this._queue = new Set();
            }
            read() {
                this._pushToQueue(this._root, this._settings.basePath);
                this._handleQueue();
                return this._storage;
            }
            _pushToQueue(directory, base) {
                this._queue.add({
                    directory,
                    base
                });
            }
            _handleQueue() {
                for (const item of this._queue.values())this._handleDirectory(item.directory, item.base);
            }
            _handleDirectory(directory, base) {
                try {
                    const entries = this._scandir(directory, this._settings.fsScandirSettings);
                    for (const entry of entries)this._handleEntry(entry, base);
                } catch (error) {
                    this._handleError(error);
                }
            }
            _handleError(error) {
                if (!common.isFatalError(this._settings, error)) return;
                throw error;
            }
            _handleEntry(entry, base) {
                const fullpath = entry.path;
                if (void 0 !== base) entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
                if (common.isAppliedFilter(this._settings.entryFilter, entry)) this._pushToStorage(entry);
                if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) this._pushToQueue(fullpath, void 0 === base ? void 0 : entry.path);
            }
            _pushToStorage(entry) {
                this._storage.push(entry);
            }
        }
        exports["default"] = SyncReader;
    },
    "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const path = __webpack_require__("path");
        const fsScandir = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js");
        class Settings {
            constructor(_options = {}){
                this._options = _options;
                this.basePath = this._getValue(this._options.basePath, void 0);
                this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
                this.deepFilter = this._getValue(this._options.deepFilter, null);
                this.entryFilter = this._getValue(this._options.entryFilter, null);
                this.errorFilter = this._getValue(this._options.errorFilter, null);
                this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
                this.fsScandirSettings = new fsScandir.Settings({
                    followSymbolicLinks: this._options.followSymbolicLinks,
                    fs: this._options.fs,
                    pathSegmentSeparator: this._options.pathSegmentSeparator,
                    stats: this._options.stats,
                    throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
                });
            }
            _getValue(option, value1) {
                return null != option ? option : value1;
            }
        }
        exports["default"] = Settings;
    },
    "../../node_modules/.pnpm/@yarnpkg+lockfile@1.1.0/node_modules/@yarnpkg/lockfile/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var __filename = __webpack_fileURLToPath__(import.meta.url);
        var __dirname = __webpack_dirname__(__webpack_fileURLToPath__(import.meta.url));
        module.exports = function(modules) {
            var installedModules = {};
            function __nested_webpack_require_187__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    i: moduleId,
                    l: false,
                    exports: {}
                };
                modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_187__);
                module.l = true;
                return module.exports;
            }
            __nested_webpack_require_187__.m = modules;
            __nested_webpack_require_187__.c = installedModules;
            __nested_webpack_require_187__.i = function(value1) {
                return value1;
            };
            __nested_webpack_require_187__.d = function(exports, name, getter) {
                if (!__nested_webpack_require_187__.o(exports, name)) Object.defineProperty(exports, name, {
                    configurable: false,
                    enumerable: true,
                    get: getter
                });
            };
            __nested_webpack_require_187__.n = function(module) {
                var getter = module && module.__esModule ? function() {
                    return module['default'];
                } : function() {
                    return module;
                };
                __nested_webpack_require_187__.d(getter, 'a', getter);
                return getter;
            };
            __nested_webpack_require_187__.o = function(object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
            };
            __nested_webpack_require_187__.p = "";
            return __nested_webpack_require_187__(__nested_webpack_require_187__.s = 14);
        }([
            function(module, exports) {
                module.exports = __webpack_require__("path");
            },
            function(module, exports, __nested_webpack_require_2716_2735__) {
                "use strict";
                exports.__esModule = true;
                var _promise = __nested_webpack_require_2716_2735__(173);
                var _promise2 = _interopRequireDefault(_promise);
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                exports.default = function(fn) {
                    return function() {
                        var gen = fn.apply(this, arguments);
                        return new _promise2.default(function(resolve, reject) {
                            function step(key, arg) {
                                try {
                                    var info = gen[key](arg);
                                    var value1 = info.value;
                                } catch (error) {
                                    reject(error);
                                    return;
                                }
                                if (!info.done) return _promise2.default.resolve(value1).then(function(value1) {
                                    step("next", value1);
                                }, function(err) {
                                    step("throw", err);
                                });
                                resolve(value1);
                            }
                            return step("next");
                        });
                    };
                };
            },
            function(module, exports) {
                module.exports = __webpack_require__("util");
            },
            function(module, exports) {
                module.exports = __webpack_require__("fs");
            },
            function(module, exports, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                class MessageError extends Error {
                    constructor(msg, code){
                        super(msg);
                        this.code = code;
                    }
                }
                exports.MessageError = MessageError;
                class ProcessSpawnError extends MessageError {
                    constructor(msg, code, process1){
                        super(msg, code);
                        this.process = process1;
                    }
                }
                exports.ProcessSpawnError = ProcessSpawnError;
                class SecurityError extends MessageError {
                }
                exports.SecurityError = SecurityError;
                class ProcessTermError extends MessageError {
                }
                exports.ProcessTermError = ProcessTermError;
                class ResponseError extends Error {
                    constructor(msg, responseCode){
                        super(msg);
                        this.responseCode = responseCode;
                    }
                }
                exports.ResponseError = ResponseError;
            },
            function(module, exports, __nested_webpack_require_4709_4728__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.getFirstSuitableFolder = exports.readFirstAvailableStream = exports.makeTempDir = exports.hardlinksWork = exports.writeFilePreservingEol = exports.getFileSizeOnDisk = exports.walk = exports.symlink = exports.find = exports.readJsonAndFile = exports.readJson = exports.readFileAny = exports.hardlinkBulk = exports.copyBulk = exports.unlink = exports.glob = exports.link = exports.chmod = exports.lstat = exports.exists = exports.mkdirp = exports.stat = exports.access = exports.rename = exports.readdir = exports.realpath = exports.readlink = exports.writeFile = exports.open = exports.readFileBuffer = exports.lockQueue = exports.constants = void 0;
                var _asyncToGenerator2;
                function _load_asyncToGenerator() {
                    return _asyncToGenerator2 = _interopRequireDefault(__nested_webpack_require_4709_4728__(1));
                }
                let buildActionsForCopy = (()=>{
                    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(queue, events, possibleExtraneous, reporter) {
                        let build = (()=>{
                            var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(data) {
                                const src = data.src, dest = data.dest, type = data.type;
                                const onFresh = data.onFresh || noop;
                                const onDone = data.onDone || noop;
                                if (files.has(dest.toLowerCase())) reporter.verbose(`The case-insensitive file ${dest} shouldn't be copied twice in one bulk copy`);
                                else files.add(dest.toLowerCase());
                                if ('symlink' === type) {
                                    yield mkdirp((_path || _load_path()).default.dirname(dest));
                                    onFresh();
                                    actions.symlink.push({
                                        dest,
                                        linkname: src
                                    });
                                    onDone();
                                    return;
                                }
                                if (events.ignoreBasenames.indexOf((_path || _load_path()).default.basename(src)) >= 0) return;
                                const srcStat = yield lstat(src);
                                let srcFiles;
                                if (srcStat.isDirectory()) srcFiles = yield readdir(src);
                                let destStat;
                                try {
                                    destStat = yield lstat(dest);
                                } catch (e) {
                                    if ('ENOENT' !== e.code) throw e;
                                }
                                if (destStat) {
                                    const bothSymlinks = srcStat.isSymbolicLink() && destStat.isSymbolicLink();
                                    const bothFolders = srcStat.isDirectory() && destStat.isDirectory();
                                    const bothFiles = srcStat.isFile() && destStat.isFile();
                                    if (bothFiles && artifactFiles.has(dest)) {
                                        onDone();
                                        reporter.verbose(reporter.lang('verboseFileSkipArtifact', src));
                                        return;
                                    }
                                    if (bothFiles && srcStat.size === destStat.size && (0, (_fsNormalized || _load_fsNormalized()).fileDatesEqual)(srcStat.mtime, destStat.mtime)) {
                                        onDone();
                                        reporter.verbose(reporter.lang('verboseFileSkip', src, dest, srcStat.size, +srcStat.mtime));
                                        return;
                                    }
                                    if (bothSymlinks) {
                                        const srcReallink = yield readlink(src);
                                        if (srcReallink === (yield readlink(dest))) {
                                            onDone();
                                            reporter.verbose(reporter.lang('verboseFileSkipSymlink', src, dest, srcReallink));
                                            return;
                                        }
                                    }
                                    if (bothFolders) {
                                        const destFiles = yield readdir(dest);
                                        invariant(srcFiles, 'src files not initialised');
                                        for(var _iterator4 = destFiles, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;){
                                            var _ref6;
                                            if (_isArray4) {
                                                if (_i4 >= _iterator4.length) break;
                                                _ref6 = _iterator4[_i4++];
                                            } else {
                                                _i4 = _iterator4.next();
                                                if (_i4.done) break;
                                                _ref6 = _i4.value;
                                            }
                                            const file = _ref6;
                                            if (srcFiles.indexOf(file) < 0) {
                                                const loc = (_path || _load_path()).default.join(dest, file);
                                                possibleExtraneous.add(loc);
                                                if ((yield lstat(loc)).isDirectory()) for(var _iterator5 = yield readdir(loc), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;){
                                                    var _ref7;
                                                    if (_isArray5) {
                                                        if (_i5 >= _iterator5.length) break;
                                                        _ref7 = _iterator5[_i5++];
                                                    } else {
                                                        _i5 = _iterator5.next();
                                                        if (_i5.done) break;
                                                        _ref7 = _i5.value;
                                                    }
                                                    const file = _ref7;
                                                    possibleExtraneous.add((_path || _load_path()).default.join(loc, file));
                                                }
                                            }
                                        }
                                    }
                                }
                                if (destStat && destStat.isSymbolicLink()) {
                                    yield (0, (_fsNormalized || _load_fsNormalized()).unlink)(dest);
                                    destStat = null;
                                }
                                if (srcStat.isSymbolicLink()) {
                                    onFresh();
                                    const linkname = yield readlink(src);
                                    actions.symlink.push({
                                        dest,
                                        linkname
                                    });
                                    onDone();
                                } else if (srcStat.isDirectory()) {
                                    if (!destStat) {
                                        reporter.verbose(reporter.lang('verboseFileFolder', dest));
                                        yield mkdirp(dest);
                                    }
                                    const destParts = dest.split((_path || _load_path()).default.sep);
                                    while(destParts.length){
                                        files.add(destParts.join((_path || _load_path()).default.sep).toLowerCase());
                                        destParts.pop();
                                    }
                                    invariant(srcFiles, 'src files not initialised');
                                    let remaining = srcFiles.length;
                                    if (!remaining) onDone();
                                    for(var _iterator6 = srcFiles, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;){
                                        var _ref8;
                                        if (_isArray6) {
                                            if (_i6 >= _iterator6.length) break;
                                            _ref8 = _iterator6[_i6++];
                                        } else {
                                            _i6 = _iterator6.next();
                                            if (_i6.done) break;
                                            _ref8 = _i6.value;
                                        }
                                        const file = _ref8;
                                        queue.push({
                                            dest: (_path || _load_path()).default.join(dest, file),
                                            onFresh,
                                            onDone: function(_onDone) {
                                                function onDone() {
                                                    return _onDone.apply(this, arguments);
                                                }
                                                onDone.toString = function() {
                                                    return _onDone.toString();
                                                };
                                                return onDone;
                                            }(function() {
                                                if (0 === --remaining) onDone();
                                            }),
                                            src: (_path || _load_path()).default.join(src, file)
                                        });
                                    }
                                } else if (srcStat.isFile()) {
                                    onFresh();
                                    actions.file.push({
                                        src,
                                        dest,
                                        atime: srcStat.atime,
                                        mtime: srcStat.mtime,
                                        mode: srcStat.mode
                                    });
                                    onDone();
                                } else throw new Error(`unsure how to copy this: ${src}`);
                            });
                            return function(_x5) {
                                return _ref5.apply(this, arguments);
                            };
                        })();
                        const artifactFiles = new Set(events.artifactFiles || []);
                        const files = new Set();
                        for(var _iterator = queue, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;){
                            var _ref2;
                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref2 = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref2 = _i.value;
                            }
                            const item = _ref2;
                            const onDone = item.onDone;
                            item.onDone = function() {
                                events.onProgress(item.dest);
                                if (onDone) onDone();
                            };
                        }
                        events.onStart(queue.length);
                        const actions = {
                            file: [],
                            symlink: [],
                            link: []
                        };
                        while(queue.length){
                            const items = queue.splice(0, CONCURRENT_QUEUE_ITEMS);
                            yield Promise.all(items.map(build));
                        }
                        for(var _iterator2 = artifactFiles, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;){
                            var _ref3;
                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref3 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref3 = _i2.value;
                            }
                            const file = _ref3;
                            if (possibleExtraneous.has(file)) {
                                reporter.verbose(reporter.lang('verboseFilePhantomExtraneous', file));
                                possibleExtraneous.delete(file);
                            }
                        }
                        for(var _iterator3 = possibleExtraneous, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;){
                            var _ref4;
                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref4 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref4 = _i3.value;
                            }
                            const loc = _ref4;
                            if (files.has(loc.toLowerCase())) possibleExtraneous.delete(loc);
                        }
                        return actions;
                    });
                    return function(_x, _x2, _x3, _x4) {
                        return _ref.apply(this, arguments);
                    };
                })();
                let buildActionsForHardlink = (()=>{
                    var _ref9 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(queue, events, possibleExtraneous, reporter) {
                        let build = (()=>{
                            var _ref13 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(data) {
                                const src = data.src, dest = data.dest;
                                const onFresh = data.onFresh || noop;
                                const onDone = data.onDone || noop;
                                if (files.has(dest.toLowerCase())) {
                                    onDone();
                                    return;
                                }
                                files.add(dest.toLowerCase());
                                if (events.ignoreBasenames.indexOf((_path || _load_path()).default.basename(src)) >= 0) return;
                                const srcStat = yield lstat(src);
                                let srcFiles;
                                if (srcStat.isDirectory()) srcFiles = yield readdir(src);
                                const destExists = yield exists(dest);
                                if (destExists) {
                                    const destStat = yield lstat(dest);
                                    const bothSymlinks = srcStat.isSymbolicLink() && destStat.isSymbolicLink();
                                    const bothFolders = srcStat.isDirectory() && destStat.isDirectory();
                                    const bothFiles = srcStat.isFile() && destStat.isFile();
                                    if (srcStat.mode !== destStat.mode) try {
                                        yield access(dest, srcStat.mode);
                                    } catch (err) {
                                        reporter.verbose(err);
                                    }
                                    if (bothFiles && artifactFiles.has(dest)) {
                                        onDone();
                                        reporter.verbose(reporter.lang('verboseFileSkipArtifact', src));
                                        return;
                                    }
                                    if (bothFiles && null !== srcStat.ino && srcStat.ino === destStat.ino) {
                                        onDone();
                                        reporter.verbose(reporter.lang('verboseFileSkip', src, dest, srcStat.ino));
                                        return;
                                    }
                                    if (bothSymlinks) {
                                        const srcReallink = yield readlink(src);
                                        if (srcReallink === (yield readlink(dest))) {
                                            onDone();
                                            reporter.verbose(reporter.lang('verboseFileSkipSymlink', src, dest, srcReallink));
                                            return;
                                        }
                                    }
                                    if (bothFolders) {
                                        const destFiles = yield readdir(dest);
                                        invariant(srcFiles, 'src files not initialised');
                                        for(var _iterator10 = destFiles, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;){
                                            var _ref14;
                                            if (_isArray10) {
                                                if (_i10 >= _iterator10.length) break;
                                                _ref14 = _iterator10[_i10++];
                                            } else {
                                                _i10 = _iterator10.next();
                                                if (_i10.done) break;
                                                _ref14 = _i10.value;
                                            }
                                            const file = _ref14;
                                            if (srcFiles.indexOf(file) < 0) {
                                                const loc = (_path || _load_path()).default.join(dest, file);
                                                possibleExtraneous.add(loc);
                                                if ((yield lstat(loc)).isDirectory()) for(var _iterator11 = yield readdir(loc), _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;){
                                                    var _ref15;
                                                    if (_isArray11) {
                                                        if (_i11 >= _iterator11.length) break;
                                                        _ref15 = _iterator11[_i11++];
                                                    } else {
                                                        _i11 = _iterator11.next();
                                                        if (_i11.done) break;
                                                        _ref15 = _i11.value;
                                                    }
                                                    const file = _ref15;
                                                    possibleExtraneous.add((_path || _load_path()).default.join(loc, file));
                                                }
                                            }
                                        }
                                    }
                                }
                                if (srcStat.isSymbolicLink()) {
                                    onFresh();
                                    const linkname = yield readlink(src);
                                    actions.symlink.push({
                                        dest,
                                        linkname
                                    });
                                    onDone();
                                } else if (srcStat.isDirectory()) {
                                    reporter.verbose(reporter.lang('verboseFileFolder', dest));
                                    yield mkdirp(dest);
                                    const destParts = dest.split((_path || _load_path()).default.sep);
                                    while(destParts.length){
                                        files.add(destParts.join((_path || _load_path()).default.sep).toLowerCase());
                                        destParts.pop();
                                    }
                                    invariant(srcFiles, 'src files not initialised');
                                    let remaining = srcFiles.length;
                                    if (!remaining) onDone();
                                    for(var _iterator12 = srcFiles, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;){
                                        var _ref16;
                                        if (_isArray12) {
                                            if (_i12 >= _iterator12.length) break;
                                            _ref16 = _iterator12[_i12++];
                                        } else {
                                            _i12 = _iterator12.next();
                                            if (_i12.done) break;
                                            _ref16 = _i12.value;
                                        }
                                        const file = _ref16;
                                        queue.push({
                                            onFresh,
                                            src: (_path || _load_path()).default.join(src, file),
                                            dest: (_path || _load_path()).default.join(dest, file),
                                            onDone: function(_onDone2) {
                                                function onDone() {
                                                    return _onDone2.apply(this, arguments);
                                                }
                                                onDone.toString = function() {
                                                    return _onDone2.toString();
                                                };
                                                return onDone;
                                            }(function() {
                                                if (0 === --remaining) onDone();
                                            })
                                        });
                                    }
                                } else if (srcStat.isFile()) {
                                    onFresh();
                                    actions.link.push({
                                        src,
                                        dest,
                                        removeDest: destExists
                                    });
                                    onDone();
                                } else throw new Error(`unsure how to copy this: ${src}`);
                            });
                            return function(_x10) {
                                return _ref13.apply(this, arguments);
                            };
                        })();
                        const artifactFiles = new Set(events.artifactFiles || []);
                        const files = new Set();
                        for(var _iterator7 = queue, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;){
                            var _ref10;
                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref10 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref10 = _i7.value;
                            }
                            const item = _ref10;
                            const onDone = item.onDone || noop;
                            item.onDone = function() {
                                events.onProgress(item.dest);
                                onDone();
                            };
                        }
                        events.onStart(queue.length);
                        const actions = {
                            file: [],
                            symlink: [],
                            link: []
                        };
                        while(queue.length){
                            const items = queue.splice(0, CONCURRENT_QUEUE_ITEMS);
                            yield Promise.all(items.map(build));
                        }
                        for(var _iterator8 = artifactFiles, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;){
                            var _ref11;
                            if (_isArray8) {
                                if (_i8 >= _iterator8.length) break;
                                _ref11 = _iterator8[_i8++];
                            } else {
                                _i8 = _iterator8.next();
                                if (_i8.done) break;
                                _ref11 = _i8.value;
                            }
                            const file = _ref11;
                            if (possibleExtraneous.has(file)) {
                                reporter.verbose(reporter.lang('verboseFilePhantomExtraneous', file));
                                possibleExtraneous.delete(file);
                            }
                        }
                        for(var _iterator9 = possibleExtraneous, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;){
                            var _ref12;
                            if (_isArray9) {
                                if (_i9 >= _iterator9.length) break;
                                _ref12 = _iterator9[_i9++];
                            } else {
                                _i9 = _iterator9.next();
                                if (_i9.done) break;
                                _ref12 = _i9.value;
                            }
                            const loc = _ref12;
                            if (files.has(loc.toLowerCase())) possibleExtraneous.delete(loc);
                        }
                        return actions;
                    });
                    return function(_x6, _x7, _x8, _x9) {
                        return _ref9.apply(this, arguments);
                    };
                })();
                let copyBulk = exports.copyBulk = (()=>{
                    var _ref17 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(queue, reporter, _events) {
                        const events = {
                            onStart: _events && _events.onStart || noop,
                            onProgress: _events && _events.onProgress || noop,
                            possibleExtraneous: _events ? _events.possibleExtraneous : new Set(),
                            ignoreBasenames: _events && _events.ignoreBasenames || [],
                            artifactFiles: _events && _events.artifactFiles || []
                        };
                        const actions = yield buildActionsForCopy(queue, events, events.possibleExtraneous, reporter);
                        events.onStart(actions.file.length + actions.symlink.length + actions.link.length);
                        const fileActions = actions.file;
                        const currentlyWriting = new Map();
                        yield (_promise || _load_promise()).queue(fileActions, (()=>{
                            var _ref18 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(data) {
                                let writePromise;
                                while(writePromise = currentlyWriting.get(data.dest))yield writePromise;
                                reporter.verbose(reporter.lang('verboseFileCopy', data.src, data.dest));
                                const copier = (0, (_fsNormalized || _load_fsNormalized()).copyFile)(data, function() {
                                    return currentlyWriting.delete(data.dest);
                                });
                                currentlyWriting.set(data.dest, copier);
                                events.onProgress(data.dest);
                                return copier;
                            });
                            return function(_x14) {
                                return _ref18.apply(this, arguments);
                            };
                        })(), CONCURRENT_QUEUE_ITEMS);
                        const symlinkActions = actions.symlink;
                        yield (_promise || _load_promise()).queue(symlinkActions, function(data) {
                            const linkname = (_path || _load_path()).default.resolve((_path || _load_path()).default.dirname(data.dest), data.linkname);
                            reporter.verbose(reporter.lang('verboseFileSymlink', data.dest, linkname));
                            return symlink(linkname, data.dest);
                        });
                    });
                    return function(_x11, _x12, _x13) {
                        return _ref17.apply(this, arguments);
                    };
                })();
                exports.hardlinkBulk = (()=>{
                    var _ref19 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(queue, reporter, _events) {
                        const events = {
                            onStart: _events && _events.onStart || noop,
                            onProgress: _events && _events.onProgress || noop,
                            possibleExtraneous: _events ? _events.possibleExtraneous : new Set(),
                            artifactFiles: _events && _events.artifactFiles || [],
                            ignoreBasenames: []
                        };
                        const actions = yield buildActionsForHardlink(queue, events, events.possibleExtraneous, reporter);
                        events.onStart(actions.file.length + actions.symlink.length + actions.link.length);
                        const fileActions = actions.link;
                        yield (_promise || _load_promise()).queue(fileActions, (()=>{
                            var _ref20 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(data) {
                                reporter.verbose(reporter.lang('verboseFileLink', data.src, data.dest));
                                if (data.removeDest) yield (0, (_fsNormalized || _load_fsNormalized()).unlink)(data.dest);
                                yield link(data.src, data.dest);
                            });
                            return function(_x18) {
                                return _ref20.apply(this, arguments);
                            };
                        })(), CONCURRENT_QUEUE_ITEMS);
                        const symlinkActions = actions.symlink;
                        yield (_promise || _load_promise()).queue(symlinkActions, function(data) {
                            const linkname = (_path || _load_path()).default.resolve((_path || _load_path()).default.dirname(data.dest), data.linkname);
                            reporter.verbose(reporter.lang('verboseFileSymlink', data.dest, linkname));
                            return symlink(linkname, data.dest);
                        });
                    });
                    return function(_x15, _x16, _x17) {
                        return _ref19.apply(this, arguments);
                    };
                })();
                exports.readFileAny = (()=>{
                    var _ref21 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(files) {
                        for(var _iterator13 = files, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;){
                            var _ref22;
                            if (_isArray13) {
                                if (_i13 >= _iterator13.length) break;
                                _ref22 = _iterator13[_i13++];
                            } else {
                                _i13 = _iterator13.next();
                                if (_i13.done) break;
                                _ref22 = _i13.value;
                            }
                            const file = _ref22;
                            if (yield exists(file)) return readFile(file);
                        }
                        return null;
                    });
                    return function(_x19) {
                        return _ref21.apply(this, arguments);
                    };
                })();
                exports.readJson = (()=>{
                    var _ref23 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(loc) {
                        return (yield readJsonAndFile(loc)).object;
                    });
                    return function(_x20) {
                        return _ref23.apply(this, arguments);
                    };
                })();
                let readJsonAndFile = exports.readJsonAndFile = (()=>{
                    var _ref24 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(loc) {
                        const file = yield readFile(loc);
                        try {
                            return {
                                object: (0, (_map || _load_map()).default)(JSON.parse(stripBOM(file))),
                                content: file
                            };
                        } catch (err) {
                            err.message = `${loc}: ${err.message}`;
                            throw err;
                        }
                    });
                    return function(_x21) {
                        return _ref24.apply(this, arguments);
                    };
                })();
                exports.find = (()=>{
                    var _ref25 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(filename, dir) {
                        const parts = dir.split((_path || _load_path()).default.sep);
                        while(parts.length){
                            const loc = parts.concat(filename).join((_path || _load_path()).default.sep);
                            if (yield exists(loc)) return loc;
                            parts.pop();
                        }
                        return false;
                    });
                    return function(_x22, _x23) {
                        return _ref25.apply(this, arguments);
                    };
                })();
                let symlink = exports.symlink = (()=>{
                    var _ref26 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(src, dest) {
                        try {
                            const stats = yield lstat(dest);
                            if (stats.isSymbolicLink()) {
                                const resolved = yield realpath(dest);
                                if (resolved === src) return;
                            }
                        } catch (err) {
                            if ('ENOENT' !== err.code) throw err;
                        }
                        yield (0, (_fsNormalized || _load_fsNormalized()).unlink)(dest);
                        if ('win32' === process.platform) yield fsSymlink(src, dest, 'junction');
                        else {
                            let relative;
                            try {
                                relative = (_path || _load_path()).default.relative((_fs || _load_fs()).default.realpathSync((_path || _load_path()).default.dirname(dest)), (_fs || _load_fs()).default.realpathSync(src));
                            } catch (err) {
                                if ('ENOENT' !== err.code) throw err;
                                relative = (_path || _load_path()).default.relative((_path || _load_path()).default.dirname(dest), src);
                            }
                            yield fsSymlink(relative || '.', dest);
                        }
                    });
                    return function(_x24, _x25) {
                        return _ref26.apply(this, arguments);
                    };
                })();
                let walk = exports.walk = (()=>{
                    var _ref27 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(dir, relativeDir, ignoreBasenames = new Set()) {
                        let files = [];
                        let filenames = yield readdir(dir);
                        if (ignoreBasenames.size) filenames = filenames.filter(function(name) {
                            return !ignoreBasenames.has(name);
                        });
                        for(var _iterator14 = filenames, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;){
                            var _ref28;
                            if (_isArray14) {
                                if (_i14 >= _iterator14.length) break;
                                _ref28 = _iterator14[_i14++];
                            } else {
                                _i14 = _iterator14.next();
                                if (_i14.done) break;
                                _ref28 = _i14.value;
                            }
                            const name = _ref28;
                            const relative = relativeDir ? (_path || _load_path()).default.join(relativeDir, name) : name;
                            const loc = (_path || _load_path()).default.join(dir, name);
                            const stat = yield lstat(loc);
                            files.push({
                                relative,
                                basename: name,
                                absolute: loc,
                                mtime: +stat.mtime
                            });
                            if (stat.isDirectory()) files = files.concat((yield walk(loc, relative, ignoreBasenames)));
                        }
                        return files;
                    });
                    return function(_x26, _x27) {
                        return _ref27.apply(this, arguments);
                    };
                })();
                exports.getFileSizeOnDisk = (()=>{
                    var _ref29 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(loc) {
                        const stat = yield lstat(loc);
                        const size = stat.size, blockSize = stat.blksize;
                        return Math.ceil(size / blockSize) * blockSize;
                    });
                    return function(_x28) {
                        return _ref29.apply(this, arguments);
                    };
                })();
                let getEolFromFile = (()=>{
                    var _ref30 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(path) {
                        if (!(yield exists(path))) return;
                        const buffer = yield readFileBuffer(path);
                        for(let i = 0; i < buffer.length; ++i){
                            if (buffer[i] === cr) return '\r\n';
                            if (buffer[i] === lf) return '\n';
                        }
                    });
                    return function(_x29) {
                        return _ref30.apply(this, arguments);
                    };
                })();
                exports.writeFilePreservingEol = (()=>{
                    var _ref31 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(path, data) {
                        const eol = (yield getEolFromFile(path)) || (_os || _load_os()).default.EOL;
                        if ('\n' !== eol) data = data.replace(/\n/g, eol);
                        yield writeFile(path, data);
                    });
                    return function(_x30, _x31) {
                        return _ref31.apply(this, arguments);
                    };
                })();
                exports.hardlinksWork = (()=>{
                    var _ref32 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(dir) {
                        const filename = 'test-file' + Math.random();
                        const file = (_path || _load_path()).default.join(dir, filename);
                        const fileLink = (_path || _load_path()).default.join(dir, filename + '-link');
                        try {
                            yield writeFile(file, 'test');
                            yield link(file, fileLink);
                        } catch (err) {
                            return false;
                        } finally{
                            yield (0, (_fsNormalized || _load_fsNormalized()).unlink)(file);
                            yield (0, (_fsNormalized || _load_fsNormalized()).unlink)(fileLink);
                        }
                        return true;
                    });
                    return function(_x32) {
                        return _ref32.apply(this, arguments);
                    };
                })();
                exports.makeTempDir = (()=>{
                    var _ref33 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(prefix) {
                        const dir = (_path || _load_path()).default.join((_os || _load_os()).default.tmpdir(), `yarn-${prefix || ''}-${Date.now()}-${Math.random()}`);
                        yield (0, (_fsNormalized || _load_fsNormalized()).unlink)(dir);
                        yield mkdirp(dir);
                        return dir;
                    });
                    return function(_x33) {
                        return _ref33.apply(this, arguments);
                    };
                })();
                exports.readFirstAvailableStream = (()=>{
                    var _ref34 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(paths) {
                        for(var _iterator15 = paths, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;){
                            var _ref35;
                            if (_isArray15) {
                                if (_i15 >= _iterator15.length) break;
                                _ref35 = _iterator15[_i15++];
                            } else {
                                _i15 = _iterator15.next();
                                if (_i15.done) break;
                                _ref35 = _i15.value;
                            }
                            const path = _ref35;
                            try {
                                const fd = yield open(path, 'r');
                                return (_fs || _load_fs()).default.createReadStream(path, {
                                    fd
                                });
                            } catch (err) {}
                        }
                        return null;
                    });
                    return function(_x34) {
                        return _ref34.apply(this, arguments);
                    };
                })();
                exports.getFirstSuitableFolder = (()=>{
                    var _ref36 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(paths, mode = constants.W_OK | constants.X_OK) {
                        const result = {
                            skipped: [],
                            folder: null
                        };
                        for(var _iterator16 = paths, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;){
                            var _ref37;
                            if (_isArray16) {
                                if (_i16 >= _iterator16.length) break;
                                _ref37 = _iterator16[_i16++];
                            } else {
                                _i16 = _iterator16.next();
                                if (_i16.done) break;
                                _ref37 = _i16.value;
                            }
                            const folder = _ref37;
                            try {
                                yield mkdirp(folder);
                                yield access(folder, mode);
                                result.folder = folder;
                                break;
                            } catch (error) {
                                result.skipped.push({
                                    error,
                                    folder
                                });
                            }
                        }
                        return result;
                    });
                    return function(_x35) {
                        return _ref36.apply(this, arguments);
                    };
                })();
                exports.copy = copy;
                exports.readFile = readFile;
                exports.readFileRaw = readFileRaw;
                exports.normalizeOS = normalizeOS;
                var _fs;
                function _load_fs() {
                    return _fs = _interopRequireDefault(__nested_webpack_require_4709_4728__(3));
                }
                var _glob;
                function _load_glob() {
                    return _glob = _interopRequireDefault(__nested_webpack_require_4709_4728__(75));
                }
                var _os;
                function _load_os() {
                    return _os = _interopRequireDefault(__nested_webpack_require_4709_4728__(36));
                }
                var _path;
                function _load_path() {
                    return _path = _interopRequireDefault(__nested_webpack_require_4709_4728__(0));
                }
                var _blockingQueue;
                function _load_blockingQueue() {
                    return _blockingQueue = _interopRequireDefault(__nested_webpack_require_4709_4728__(84));
                }
                var _promise;
                function _load_promise() {
                    return _promise = _interopRequireWildcard(__nested_webpack_require_4709_4728__(40));
                }
                var _promise2;
                function _load_promise2() {
                    return _promise2 = __nested_webpack_require_4709_4728__(40);
                }
                var _map;
                function _load_map() {
                    return _map = _interopRequireDefault(__nested_webpack_require_4709_4728__(20));
                }
                var _fsNormalized;
                function _load_fsNormalized() {
                    return _fsNormalized = __nested_webpack_require_4709_4728__(164);
                }
                function _interopRequireWildcard(obj) {
                    if (obj && obj.__esModule) return obj;
                    var newObj = {};
                    if (null != obj) {
                        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                    newObj.default = obj;
                    return newObj;
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                const constants = exports.constants = void 0 !== (_fs || _load_fs()).default.constants ? (_fs || _load_fs()).default.constants : {
                    R_OK: (_fs || _load_fs()).default.R_OK,
                    W_OK: (_fs || _load_fs()).default.W_OK,
                    X_OK: (_fs || _load_fs()).default.X_OK
                };
                exports.lockQueue = new (_blockingQueue || _load_blockingQueue()).default('fs lock');
                const readFileBuffer = exports.readFileBuffer = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.readFile);
                const open = exports.open = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.open);
                const writeFile = exports.writeFile = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.writeFile);
                const readlink = exports.readlink = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.readlink);
                const realpath = exports.realpath = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.realpath);
                const readdir = exports.readdir = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.readdir);
                exports.rename = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.rename);
                const access = exports.access = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.access);
                exports.stat = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.stat);
                const mkdirp = exports.mkdirp = (0, (_promise2 || _load_promise2()).promisify)(__nested_webpack_require_4709_4728__(116));
                const exists = exports.exists = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.exists, true);
                const lstat = exports.lstat = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.lstat);
                exports.chmod = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.chmod);
                const link = exports.link = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.link);
                exports.glob = (0, (_promise2 || _load_promise2()).promisify)((_glob || _load_glob()).default);
                exports.unlink = (_fsNormalized || _load_fsNormalized()).unlink;
                const CONCURRENT_QUEUE_ITEMS = (_fs || _load_fs()).default.copyFile ? 128 : 4;
                const fsSymlink = (0, (_promise2 || _load_promise2()).promisify)((_fs || _load_fs()).default.symlink);
                const invariant = __nested_webpack_require_4709_4728__(7);
                const stripBOM = __nested_webpack_require_4709_4728__(122);
                const noop = ()=>{};
                function copy(src, dest, reporter) {
                    return copyBulk([
                        {
                            src,
                            dest
                        }
                    ], reporter);
                }
                function _readFile(loc, encoding) {
                    return new Promise((resolve, reject)=>{
                        (_fs || _load_fs()).default.readFile(loc, encoding, function(err, content) {
                            if (err) reject(err);
                            else resolve(content);
                        });
                    });
                }
                function readFile(loc) {
                    return _readFile(loc, 'utf8').then(normalizeOS);
                }
                function readFileRaw(loc) {
                    return _readFile(loc, 'binary');
                }
                function normalizeOS(body) {
                    return body.replace(/\r\n/g, '\n');
                }
                const cr = '\r'.charCodeAt(0);
                const lf = '\n'.charCodeAt(0);
            },
            function(module, exports, __nested_webpack_require_44107_44126__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.getPathKey = getPathKey;
                const os = __nested_webpack_require_44107_44126__(36);
                const path = __nested_webpack_require_44107_44126__(0);
                const userHome = __nested_webpack_require_44107_44126__(45).default;
                var _require = __nested_webpack_require_44107_44126__(171);
                const getCacheDir = _require.getCacheDir, getConfigDir = _require.getConfigDir, getDataDir = _require.getDataDir;
                const isWebpackBundle = __nested_webpack_require_44107_44126__(227);
                const DEPENDENCY_TYPES = exports.DEPENDENCY_TYPES = [
                    'devDependencies',
                    'dependencies',
                    'optionalDependencies',
                    'peerDependencies'
                ];
                const RESOLUTIONS = exports.RESOLUTIONS = 'resolutions';
                exports.MANIFEST_FIELDS = [
                    RESOLUTIONS,
                    ...DEPENDENCY_TYPES
                ];
                exports.SUPPORTED_NODE_VERSIONS = '^4.8.0 || ^5.7.0 || ^6.2.2 || >=8.0.0';
                exports.YARN_REGISTRY = 'https://registry.yarnpkg.com';
                exports.YARN_DOCS = 'https://yarnpkg.com/en/docs/cli/';
                exports.YARN_INSTALLER_SH = 'https://yarnpkg.com/install.sh';
                exports.YARN_INSTALLER_MSI = 'https://yarnpkg.com/latest.msi';
                exports.SELF_UPDATE_VERSION_URL = 'https://yarnpkg.com/latest-version';
                exports.CACHE_VERSION = 2;
                exports.LOCKFILE_VERSION = 1;
                exports.NETWORK_CONCURRENCY = 8;
                exports.NETWORK_TIMEOUT = 30000;
                exports.CHILD_CONCURRENCY = 5;
                exports.REQUIRED_PACKAGE_KEYS = [
                    'name',
                    'version',
                    '_uid'
                ];
                function getPreferredCacheDirectories() {
                    const preferredCacheDirectories = [
                        getCacheDir()
                    ];
                    if (process.getuid) preferredCacheDirectories.push(path.join(os.tmpdir(), `.yarn-cache-${process.getuid()}`));
                    preferredCacheDirectories.push(path.join(os.tmpdir(), ".yarn-cache"));
                    return preferredCacheDirectories;
                }
                exports.PREFERRED_MODULE_CACHE_DIRECTORIES = getPreferredCacheDirectories();
                exports.CONFIG_DIRECTORY = getConfigDir();
                const DATA_DIRECTORY = exports.DATA_DIRECTORY = getDataDir();
                exports.LINK_REGISTRY_DIRECTORY = path.join(DATA_DIRECTORY, 'link');
                exports.GLOBAL_MODULE_DIRECTORY = path.join(DATA_DIRECTORY, 'global');
                exports.NODE_BIN_PATH = process.execPath;
                exports.YARN_BIN_PATH = getYarnBinPath();
                function getYarnBinPath() {
                    if (isWebpackBundle) return __filename;
                    return path.join(__dirname, '..', 'bin', 'yarn.js');
                }
                exports.NODE_MODULES_FOLDER = 'node_modules';
                exports.NODE_PACKAGE_JSON = 'package.json';
                exports.POSIX_GLOBAL_PREFIX = `${process.env.DESTDIR || ''}/usr/local`;
                exports.FALLBACK_GLOBAL_PREFIX = path.join(userHome, '.yarn');
                exports.META_FOLDER = '.yarn-meta';
                exports.INTEGRITY_FILENAME = '.yarn-integrity';
                exports.LOCKFILE_FILENAME = 'yarn.lock';
                exports.METADATA_FILENAME = '.yarn-metadata.json';
                exports.TARBALL_FILENAME = '.yarn-tarball.tgz';
                exports.CLEAN_FILENAME = '.yarnclean';
                exports.NPM_LOCK_FILENAME = 'package-lock.json';
                exports.NPM_SHRINKWRAP_FILENAME = 'npm-shrinkwrap.json';
                exports.DEFAULT_INDENT = '  ';
                exports.SINGLE_INSTANCE_PORT = 31997;
                exports.SINGLE_INSTANCE_FILENAME = '.yarn-single-instance';
                exports.ENV_PATH_KEY = getPathKey(process.platform, process.env);
                function getPathKey(platform, env) {
                    let pathKey = 'PATH';
                    if ('win32' === platform) {
                        pathKey = 'Path';
                        for(const key in env)if ('path' === key.toLowerCase()) pathKey = key;
                    }
                    return pathKey;
                }
                exports.VERSION_COLOR_SCHEME = {
                    major: 'red',
                    premajor: 'red',
                    minor: 'yellow',
                    preminor: 'yellow',
                    patch: 'green',
                    prepatch: 'green',
                    prerelease: 'red',
                    unchanged: 'white',
                    unknown: 'red'
                };
            },
            function(module, exports, __webpack_require__) {
                "use strict";
                var NODE_ENV = process.env.NODE_ENV;
                var invariant = function(condition, format, a, b, c, d, e, f) {
                    if ('production' !== NODE_ENV) {
                        if (void 0 === format) throw new Error('invariant requires an error message argument');
                    }
                    if (!condition) {
                        var error;
                        if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
                        else {
                            var args = [
                                a,
                                b,
                                c,
                                d,
                                e,
                                f
                            ];
                            var argIndex = 0;
                            error = new Error(format.replace(/%s/g, function() {
                                return args[argIndex++];
                            }));
                            error.name = 'Invariant Violation';
                        }
                        error.framesToPop = 1;
                        throw error;
                    }
                };
                module.exports = invariant;
            },
            ,
            function(module, exports) {
                module.exports = __webpack_require__("crypto");
            },
            ,
            function(module, exports) {
                var global1 = module.exports = 'undefined' != typeof window && window.Math == Math ? window : 'undefined' != typeof self && self.Math == Math ? self : Function('return this')();
                if ('number' == typeof __g) __g = global1;
            },
            function(module, exports, __nested_webpack_require_51177_51196__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.sortAlpha = sortAlpha;
                exports.entries = entries;
                exports.removePrefix = removePrefix;
                exports.removeSuffix = removeSuffix;
                exports.addSuffix = addSuffix;
                exports.hyphenate = hyphenate;
                exports.camelCase = camelCase;
                exports.compareSortedArrays = compareSortedArrays;
                exports.sleep = sleep;
                const _camelCase = __nested_webpack_require_51177_51196__(176);
                function sortAlpha(a, b) {
                    const shortLen = Math.min(a.length, b.length);
                    for(let i = 0; i < shortLen; i++){
                        const aChar = a.charCodeAt(i);
                        const bChar = b.charCodeAt(i);
                        if (aChar !== bChar) return aChar - bChar;
                    }
                    return a.length - b.length;
                }
                function entries(obj) {
                    const entries = [];
                    if (obj) for(const key in obj)entries.push([
                        key,
                        obj[key]
                    ]);
                    return entries;
                }
                function removePrefix(pattern, prefix) {
                    if (pattern.startsWith(prefix)) pattern = pattern.slice(prefix.length);
                    return pattern;
                }
                function removeSuffix(pattern, suffix) {
                    if (pattern.endsWith(suffix)) return pattern.slice(0, -suffix.length);
                    return pattern;
                }
                function addSuffix(pattern, suffix) {
                    if (!pattern.endsWith(suffix)) return pattern + suffix;
                    return pattern;
                }
                function hyphenate(str) {
                    return str.replace(/[A-Z]/g, (match)=>'-' + match.charAt(0).toLowerCase());
                }
                function camelCase(str) {
                    if (/[A-Z]/.test(str)) return null;
                    return _camelCase(str);
                }
                function compareSortedArrays(array1, array2) {
                    if (array1.length !== array2.length) return false;
                    for(let i = 0, len = array1.length; i < len; i++)if (array1[i] !== array2[i]) return false;
                    return true;
                }
                function sleep(ms) {
                    return new Promise((resolve)=>{
                        setTimeout(resolve, ms);
                    });
                }
            },
            function(module, exports, __nested_webpack_require_53169_53188__) {
                var store = __nested_webpack_require_53169_53188__(107)('wks');
                var uid = __nested_webpack_require_53169_53188__(111);
                var Symbol1 = __nested_webpack_require_53169_53188__(11).Symbol;
                var USE_SYMBOL = 'function' == typeof Symbol1;
                var $exports = module.exports = function(name) {
                    return store[name] || (store[name] = USE_SYMBOL && Symbol1[name] || (USE_SYMBOL ? Symbol1 : uid)('Symbol.' + name));
                };
                $exports.store = store;
            },
            function(module, exports, __nested_webpack_require_53619_53638__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.stringify = exports.parse = void 0;
                var _asyncToGenerator2;
                function _load_asyncToGenerator() {
                    return _asyncToGenerator2 = _interopRequireDefault(__nested_webpack_require_53619_53638__(1));
                }
                var _parse;
                function _load_parse() {
                    return _parse = __nested_webpack_require_53619_53638__(81);
                }
                Object.defineProperty(exports, 'parse', {
                    enumerable: true,
                    get: function() {
                        return _interopRequireDefault(_parse || _load_parse()).default;
                    }
                });
                var _stringify;
                function _load_stringify() {
                    return _stringify = __nested_webpack_require_53619_53638__(150);
                }
                Object.defineProperty(exports, 'stringify', {
                    enumerable: true,
                    get: function() {
                        return _interopRequireDefault(_stringify || _load_stringify()).default;
                    }
                });
                exports.implodeEntry = implodeEntry;
                exports.explodeEntry = explodeEntry;
                var _misc;
                function _load_misc() {
                    return _misc = __nested_webpack_require_53619_53638__(12);
                }
                var _normalizePattern;
                function _load_normalizePattern() {
                    return _normalizePattern = __nested_webpack_require_53619_53638__(29);
                }
                var _parse2;
                function _load_parse2() {
                    return _parse2 = _interopRequireDefault(__nested_webpack_require_53619_53638__(81));
                }
                var _constants;
                function _load_constants() {
                    return _constants = __nested_webpack_require_53619_53638__(6);
                }
                var _fs;
                function _load_fs() {
                    return _fs = _interopRequireWildcard(__nested_webpack_require_53619_53638__(5));
                }
                function _interopRequireWildcard(obj) {
                    if (obj && obj.__esModule) return obj;
                    var newObj = {};
                    if (null != obj) {
                        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                    newObj.default = obj;
                    return newObj;
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                const invariant = __nested_webpack_require_53619_53638__(7);
                const path = __nested_webpack_require_53619_53638__(0);
                const ssri = __nested_webpack_require_53619_53638__(55);
                function getName(pattern) {
                    return (0, (_normalizePattern || _load_normalizePattern()).normalizePattern)(pattern).name;
                }
                function blankObjectUndefined(obj) {
                    return obj && Object.keys(obj).length ? obj : void 0;
                }
                function keyForRemote(remote) {
                    return remote.resolved || (remote.reference && remote.hash ? `${remote.reference}#${remote.hash}` : null);
                }
                function serializeIntegrity(integrity) {
                    return integrity.toString().split(' ').sort().join(' ');
                }
                function implodeEntry(pattern, obj) {
                    const inferredName = getName(pattern);
                    const integrity = obj.integrity ? serializeIntegrity(obj.integrity) : '';
                    const imploded = {
                        name: inferredName === obj.name ? void 0 : obj.name,
                        version: obj.version,
                        uid: obj.uid === obj.version ? void 0 : obj.uid,
                        resolved: obj.resolved,
                        registry: 'npm' === obj.registry ? void 0 : obj.registry,
                        dependencies: blankObjectUndefined(obj.dependencies),
                        optionalDependencies: blankObjectUndefined(obj.optionalDependencies),
                        permissions: blankObjectUndefined(obj.permissions),
                        prebuiltVariants: blankObjectUndefined(obj.prebuiltVariants)
                    };
                    if (integrity) imploded.integrity = integrity;
                    return imploded;
                }
                function explodeEntry(pattern, obj) {
                    obj.optionalDependencies = obj.optionalDependencies || {};
                    obj.dependencies = obj.dependencies || {};
                    obj.uid = obj.uid || obj.version;
                    obj.permissions = obj.permissions || {};
                    obj.registry = obj.registry || 'npm';
                    obj.name = obj.name || getName(pattern);
                    const integrity = obj.integrity;
                    if (integrity && integrity.isIntegrity) obj.integrity = ssri.parse(integrity);
                    return obj;
                }
                class Lockfile {
                    constructor({ cache, source, parseResultType } = {}){
                        this.source = source || '';
                        this.cache = cache;
                        this.parseResultType = parseResultType;
                    }
                    hasEntriesExistWithoutIntegrity() {
                        if (!this.cache) return false;
                        for(const key in this.cache)if (!/^.*@(file:|http)/.test(key) && this.cache[key] && !this.cache[key].integrity) return true;
                        return false;
                    }
                    static fromDirectory(dir, reporter) {
                        return (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*() {
                            const lockfileLoc = path.join(dir, (_constants || _load_constants()).LOCKFILE_FILENAME);
                            let lockfile;
                            let rawLockfile = '';
                            let parseResult;
                            if (yield (_fs || _load_fs()).exists(lockfileLoc)) {
                                rawLockfile = yield (_fs || _load_fs()).readFile(lockfileLoc);
                                parseResult = (0, (_parse2 || _load_parse2()).default)(rawLockfile, lockfileLoc);
                                if (reporter) {
                                    if ('merge' === parseResult.type) reporter.info(reporter.lang('lockfileMerged'));
                                    else if ('conflict' === parseResult.type) reporter.warn(reporter.lang('lockfileConflict'));
                                }
                                lockfile = parseResult.object;
                            } else if (reporter) reporter.info(reporter.lang('noLockfileFound'));
                            return new Lockfile({
                                cache: lockfile,
                                source: rawLockfile,
                                parseResultType: parseResult && parseResult.type
                            });
                        })();
                    }
                    getLocked(pattern) {
                        const cache = this.cache;
                        if (!cache) return;
                        const shrunk = pattern in cache && cache[pattern];
                        if ('string' == typeof shrunk) return this.getLocked(shrunk);
                        if (shrunk) {
                            explodeEntry(pattern, shrunk);
                            return shrunk;
                        }
                    }
                    removePattern(pattern) {
                        const cache = this.cache;
                        if (!cache) return;
                        delete cache[pattern];
                    }
                    getLockfile(patterns) {
                        const lockfile = {};
                        const seen = new Map();
                        const sortedPatternsKeys = Object.keys(patterns).sort((_misc || _load_misc()).sortAlpha);
                        for(var _iterator = sortedPatternsKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;){
                            var _ref;
                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }
                            const pattern = _ref;
                            const pkg = patterns[pattern];
                            const remote = pkg._remote, ref = pkg._reference;
                            invariant(ref, 'Package is missing a reference');
                            invariant(remote, 'Package is missing a remote');
                            const remoteKey = keyForRemote(remote);
                            const seenPattern = remoteKey && seen.get(remoteKey);
                            if (seenPattern) {
                                lockfile[pattern] = seenPattern;
                                if (!seenPattern.name && getName(pattern) !== pkg.name) seenPattern.name = pkg.name;
                                continue;
                            }
                            const obj = implodeEntry(pattern, {
                                name: pkg.name,
                                version: pkg.version,
                                uid: pkg._uid,
                                resolved: remote.resolved,
                                integrity: remote.integrity,
                                registry: remote.registry,
                                dependencies: pkg.dependencies,
                                peerDependencies: pkg.peerDependencies,
                                optionalDependencies: pkg.optionalDependencies,
                                permissions: ref.permissions,
                                prebuiltVariants: pkg.prebuiltVariants
                            });
                            lockfile[pattern] = obj;
                            if (remoteKey) seen.set(remoteKey, obj);
                        }
                        return lockfile;
                    }
                }
                exports.default = Lockfile;
            },
            ,
            ,
            function(module, exports) {
                module.exports = __webpack_require__("stream");
            },
            ,
            ,
            function(module, exports, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = nullify;
                function nullify(obj = {}) {
                    if (Array.isArray(obj)) for(var _iterator = obj, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;){
                        var _ref;
                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }
                        const item = _ref;
                        nullify(item);
                    }
                    else if (null !== obj && 'object' == typeof obj || 'function' == typeof obj) {
                        Object.setPrototypeOf(obj, null);
                        if ('object' == typeof obj) for(const key in obj)nullify(obj[key]);
                    }
                    return obj;
                }
            },
            ,
            function(module, exports) {
                module.exports = __webpack_require__("assert");
            },
            function(module, exports) {
                var core = module.exports = {
                    version: '2.5.7'
                };
                if ('number' == typeof __e) __e = core;
            },
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_63175_63194__) {
                var isObject = __nested_webpack_require_63175_63194__(34);
                module.exports = function(it) {
                    if (!isObject(it)) throw TypeError(it + ' is not an object!');
                    return it;
                };
            },
            ,
            function(module, exports, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.normalizePattern = normalizePattern;
                function normalizePattern(pattern) {
                    let hasVersion = false;
                    let range = 'latest';
                    let name = pattern;
                    let isScoped = false;
                    if ('@' === name[0]) {
                        isScoped = true;
                        name = name.slice(1);
                    }
                    const parts = name.split('@');
                    if (parts.length > 1) {
                        name = parts.shift();
                        range = parts.join('@');
                        if (range) hasVersion = true;
                        else range = '*';
                    }
                    if (isScoped) name = `@${name}`;
                    return {
                        name,
                        range,
                        hasVersion
                    };
                }
            },
            ,
            function(module, exports, __nested_webpack_require_64321_64340__) {
                var dP = __nested_webpack_require_64321_64340__(50);
                var createDesc = __nested_webpack_require_64321_64340__(106);
                module.exports = __nested_webpack_require_64321_64340__(33) ? function(object, key, value1) {
                    return dP.f(object, key, createDesc(1, value1));
                } : function(object, key, value1) {
                    object[key] = value1;
                    return object;
                };
            },
            function(module, exports, __nested_webpack_require_64680_64699__) {
                var buffer = __nested_webpack_require_64680_64699__(63);
                var Buffer1 = buffer.Buffer;
                function copyProps(src, dst) {
                    for(var key in src)dst[key] = src[key];
                }
                if (Buffer1.from && Buffer1.alloc && Buffer1.allocUnsafe && Buffer1.allocUnsafeSlow) module.exports = buffer;
                else {
                    copyProps(buffer, exports);
                    exports.Buffer = SafeBuffer;
                }
                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer1(arg, encodingOrOffset, length);
                }
                copyProps(Buffer1, SafeBuffer);
                SafeBuffer.from = function(arg, encodingOrOffset, length) {
                    if ('number' == typeof arg) throw new TypeError('Argument must not be a number');
                    return Buffer1(arg, encodingOrOffset, length);
                };
                SafeBuffer.alloc = function(size, fill, encoding) {
                    if ('number' != typeof size) throw new TypeError('Argument must be a number');
                    var buf = Buffer1(size);
                    if (void 0 !== fill) {
                        if ('string' == typeof encoding) buf.fill(fill, encoding);
                        else buf.fill(fill);
                    } else buf.fill(0);
                    return buf;
                };
                SafeBuffer.allocUnsafe = function(size) {
                    if ('number' != typeof size) throw new TypeError('Argument must be a number');
                    return Buffer1(size);
                };
                SafeBuffer.allocUnsafeSlow = function(size) {
                    if ('number' != typeof size) throw new TypeError('Argument must be a number');
                    return buffer.SlowBuffer(size);
                };
            },
            function(module, exports, __nested_webpack_require_66293_66312__) {
                module.exports = !__nested_webpack_require_66293_66312__(85)(function() {
                    return 7 != Object.defineProperty({}, 'a', {
                        get: function() {
                            return 7;
                        }
                    }).a;
                });
            },
            function(module, exports) {
                module.exports = function(it) {
                    return 'object' == typeof it ? null !== it : 'function' == typeof it;
                };
            },
            function(module, exports) {
                module.exports = {};
            },
            function(module, exports) {
                module.exports = __webpack_require__("os");
            },
            ,
            ,
            ,
            function(module, exports, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.wait = wait;
                exports.promisify = promisify;
                exports.queue = queue;
                function wait(delay) {
                    return new Promise((resolve)=>{
                        setTimeout(resolve, delay);
                    });
                }
                function promisify(fn, firstData) {
                    return function(...args) {
                        return new Promise(function(resolve, reject) {
                            args.push(function(err, ...result) {
                                let res = result;
                                if (result.length <= 1) res = result[0];
                                if (firstData) {
                                    res = err;
                                    err = null;
                                }
                                if (err) reject(err);
                                else resolve(res);
                            });
                            fn.apply(null, args);
                        });
                    };
                }
                function queue(arr, promiseProducer, concurrency = 1 / 0) {
                    concurrency = Math.min(concurrency, arr.length);
                    arr = arr.slice();
                    const results = [];
                    let total = arr.length;
                    if (!total) return Promise.resolve(results);
                    return new Promise((resolve, reject)=>{
                        for(let i = 0; i < concurrency; i++)next();
                        function next() {
                            const item = arr.shift();
                            const promise = promiseProducer(item);
                            promise.then(function(result) {
                                results.push(result);
                                total--;
                                if (0 === total) resolve(results);
                                else if (arr.length) next();
                            }, reject);
                        }
                    });
                }
            },
            function(module, exports, __nested_webpack_require_68465_68484__) {
                var global1 = __nested_webpack_require_68465_68484__(11);
                var core = __nested_webpack_require_68465_68484__(23);
                var ctx = __nested_webpack_require_68465_68484__(48);
                var hide = __nested_webpack_require_68465_68484__(31);
                var has = __nested_webpack_require_68465_68484__(49);
                var PROTOTYPE = 'prototype';
                var $export = function(type, name, source) {
                    var IS_FORCED = type & $export.F;
                    var IS_GLOBAL = type & $export.G;
                    var IS_STATIC = type & $export.S;
                    var IS_PROTO = type & $export.P;
                    var IS_BIND = type & $export.B;
                    var IS_WRAP = type & $export.W;
                    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
                    var expProto = exports[PROTOTYPE];
                    var target = IS_GLOBAL ? global1 : IS_STATIC ? global1[name] : (global1[name] || {})[PROTOTYPE];
                    var key, own, out;
                    if (IS_GLOBAL) source = name;
                    for(key in source){
                        own = !IS_FORCED && target && void 0 !== target[key];
                        if (!(own && has(exports, key))) {
                            out = own ? target[key] : source[key];
                            exports[key] = IS_GLOBAL && 'function' != typeof target[key] ? source[key] : IS_BIND && own ? ctx(out, global1) : IS_WRAP && target[key] == out ? function(C) {
                                var F = function(a, b, c) {
                                    if (this instanceof C) {
                                        switch(arguments.length){
                                            case 0:
                                                return new C();
                                            case 1:
                                                return new C(a);
                                            case 2:
                                                return new C(a, b);
                                        }
                                        return new C(a, b, c);
                                    }
                                    return C.apply(this, arguments);
                                };
                                F[PROTOTYPE] = C[PROTOTYPE];
                                return F;
                            }(out) : IS_PROTO && 'function' == typeof out ? ctx(Function.call, out) : out;
                            if (IS_PROTO) {
                                (exports.virtual || (exports.virtual = {}))[key] = out;
                                if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
                            }
                        }
                    }
                };
                $export.F = 1;
                $export.G = 2;
                $export.S = 4;
                $export.P = 8;
                $export.B = 16;
                $export.W = 32;
                $export.U = 64;
                $export.R = 128;
                module.exports = $export;
            },
            function(module, exports, __nested_webpack_require_70917_70936__) {
                try {
                    var util = __nested_webpack_require_70917_70936__(2);
                    if ('function' != typeof util.inherits) throw '';
                    module.exports = util.inherits;
                } catch (e) {
                    module.exports = __nested_webpack_require_70917_70936__(224);
                }
            },
            ,
            ,
            function(module, exports, __nested_webpack_require_71206_71225__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.home = void 0;
                var _rootUser;
                function _load_rootUser() {
                    return _rootUser = _interopRequireDefault(__nested_webpack_require_71206_71225__(169));
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                const path = __nested_webpack_require_71206_71225__(0);
                const home = exports.home = __nested_webpack_require_71206_71225__(36).homedir();
                const userHomeDir = (_rootUser || _load_rootUser()).default ? path.resolve('/usr/local/share') : home;
                exports.default = userHomeDir;
            },
            function(module, exports) {
                module.exports = function(it) {
                    if ('function' != typeof it) throw TypeError(it + ' is not a function!');
                    return it;
                };
            },
            function(module, exports) {
                var toString = {}.toString;
                module.exports = function(it) {
                    return toString.call(it).slice(8, -1);
                };
            },
            function(module, exports, __nested_webpack_require_72188_72207__) {
                var aFunction = __nested_webpack_require_72188_72207__(46);
                module.exports = function(fn, that, length) {
                    aFunction(fn);
                    if (void 0 === that) return fn;
                    switch(length){
                        case 1:
                            return function(a) {
                                return fn.call(that, a);
                            };
                        case 2:
                            return function(a, b) {
                                return fn.call(that, a, b);
                            };
                        case 3:
                            return function(a, b, c) {
                                return fn.call(that, a, b, c);
                            };
                    }
                    return function() {
                        return fn.apply(that, arguments);
                    };
                };
            },
            function(module, exports) {
                var hasOwnProperty = {}.hasOwnProperty;
                module.exports = function(it, key) {
                    return hasOwnProperty.call(it, key);
                };
            },
            function(module, exports, __nested_webpack_require_72962_72981__) {
                var anObject = __nested_webpack_require_72962_72981__(27);
                var IE8_DOM_DEFINE = __nested_webpack_require_72962_72981__(184);
                var toPrimitive = __nested_webpack_require_72962_72981__(201);
                var dP = Object.defineProperty;
                exports.f = __nested_webpack_require_72962_72981__(33) ? Object.defineProperty : function(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                        return dP(O, P, Attributes);
                    } catch (e) {}
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                };
            },
            ,
            ,
            ,
            function(module, exports) {
                module.exports = __webpack_require__("events");
            },
            function(module, exports, __nested_webpack_require_73754_73773__) {
                "use strict";
                const Buffer1 = __nested_webpack_require_73754_73773__(32).Buffer;
                const crypto = __nested_webpack_require_73754_73773__(9);
                const Transform = __nested_webpack_require_73754_73773__(17).Transform;
                const SPEC_ALGORITHMS = [
                    'sha256',
                    'sha384',
                    'sha512'
                ];
                const BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i;
                const SRI_REGEX = /^([^-]+)-([^?]+)([?\S*]*)$/;
                const STRICT_SRI_REGEX = /^([^-]+)-([A-Za-z0-9+/=]{44,88})(\?[\x21-\x7E]*)*$/;
                const VCHAR_REGEX = /^[\x21-\x7E]+$/;
                class Hash {
                    get isHash() {
                        return true;
                    }
                    constructor(hash, opts){
                        const strict = !!(opts && opts.strict);
                        this.source = hash.trim();
                        const match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX);
                        if (!match) return;
                        if (strict && !SPEC_ALGORITHMS.some((a)=>a === match[1])) return;
                        this.algorithm = match[1];
                        this.digest = match[2];
                        const rawOpts = match[3];
                        this.options = rawOpts ? rawOpts.slice(1).split('?') : [];
                    }
                    hexDigest() {
                        return this.digest && Buffer1.from(this.digest, 'base64').toString('hex');
                    }
                    toJSON() {
                        return this.toString();
                    }
                    toString(opts) {
                        if (opts && opts.strict) {
                            if (!(SPEC_ALGORITHMS.some((x)=>x === this.algorithm) && this.digest.match(BASE64_REGEX) && (this.options || []).every((opt)=>opt.match(VCHAR_REGEX)))) return '';
                        }
                        const options = this.options && this.options.length ? `?${this.options.join('?')}` : '';
                        return `${this.algorithm}-${this.digest}${options}`;
                    }
                }
                class Integrity {
                    get isIntegrity() {
                        return true;
                    }
                    toJSON() {
                        return this.toString();
                    }
                    toString(opts) {
                        opts = opts || {};
                        let sep = opts.sep || ' ';
                        if (opts.strict) sep = sep.replace(/\S+/g, ' ');
                        return Object.keys(this).map((k)=>this[k].map((hash)=>Hash.prototype.toString.call(hash, opts)).filter((x)=>x.length).join(sep)).filter((x)=>x.length).join(sep);
                    }
                    concat(integrity, opts) {
                        const other = 'string' == typeof integrity ? integrity : stringify(integrity, opts);
                        return parse(`${this.toString(opts)} ${other}`, opts);
                    }
                    hexDigest() {
                        return parse(this, {
                            single: true
                        }).hexDigest();
                    }
                    match(integrity, opts) {
                        const other = parse(integrity, opts);
                        const algo = other.pickAlgorithm(opts);
                        return this[algo] && other[algo] && this[algo].find((hash)=>other[algo].find((otherhash)=>hash.digest === otherhash.digest)) || false;
                    }
                    pickAlgorithm(opts) {
                        const pickAlgorithm = opts && opts.pickAlgorithm || getPrioritizedHash;
                        const keys = Object.keys(this);
                        if (!keys.length) throw new Error(`No algorithms available for ${JSON.stringify(this.toString())}`);
                        return keys.reduce((acc, algo)=>pickAlgorithm(acc, algo) || acc);
                    }
                }
                module.exports.parse = parse;
                function parse(sri, opts) {
                    opts = opts || {};
                    if ('string' == typeof sri) return _parse(sri, opts);
                    if (!sri.algorithm || !sri.digest) return _parse(stringify(sri, opts), opts);
                    {
                        const fullSri = new Integrity();
                        fullSri[sri.algorithm] = [
                            sri
                        ];
                        return _parse(stringify(fullSri, opts), opts);
                    }
                }
                function _parse(integrity, opts) {
                    if (opts.single) return new Hash(integrity, opts);
                    return integrity.trim().split(/\s+/).reduce((acc, string)=>{
                        const hash = new Hash(string, opts);
                        if (hash.algorithm && hash.digest) {
                            const algo = hash.algorithm;
                            if (!acc[algo]) acc[algo] = [];
                            acc[algo].push(hash);
                        }
                        return acc;
                    }, new Integrity());
                }
                module.exports.stringify = stringify;
                function stringify(obj, opts) {
                    if (obj.algorithm && obj.digest) return Hash.prototype.toString.call(obj, opts);
                    if ('string' == typeof obj) return stringify(parse(obj, opts), opts);
                    return Integrity.prototype.toString.call(obj, opts);
                }
                module.exports.fromHex = fromHex;
                function fromHex(hexDigest, algorithm, opts) {
                    const optString = opts && opts.options && opts.options.length ? `?${opts.options.join('?')}` : '';
                    return parse(`${algorithm}-${Buffer1.from(hexDigest, 'hex').toString('base64')}${optString}`, opts);
                }
                module.exports.fromData = fromData;
                function fromData(data, opts) {
                    opts = opts || {};
                    const algorithms = opts.algorithms || [
                        'sha512'
                    ];
                    const optString = opts.options && opts.options.length ? `?${opts.options.join('?')}` : '';
                    return algorithms.reduce((acc, algo)=>{
                        const digest = crypto.createHash(algo).update(data).digest('base64');
                        const hash = new Hash(`${algo}-${digest}${optString}`, opts);
                        if (hash.algorithm && hash.digest) {
                            const algo = hash.algorithm;
                            if (!acc[algo]) acc[algo] = [];
                            acc[algo].push(hash);
                        }
                        return acc;
                    }, new Integrity());
                }
                module.exports.fromStream = fromStream;
                function fromStream(stream, opts) {
                    opts = opts || {};
                    const P = opts.Promise || Promise;
                    const istream = integrityStream(opts);
                    return new P((resolve, reject)=>{
                        stream.pipe(istream);
                        stream.on('error', reject);
                        istream.on('error', reject);
                        let sri;
                        istream.on('integrity', (s)=>{
                            sri = s;
                        });
                        istream.on('end', ()=>resolve(sri));
                        istream.on('data', ()=>{});
                    });
                }
                module.exports.checkData = checkData;
                function checkData(data, sri, opts) {
                    opts = opts || {};
                    sri = parse(sri, opts);
                    if (!Object.keys(sri).length) {
                        if (!opts.error) return false;
                        throw Object.assign(new Error('No valid integrity hashes to check against'), {
                            code: 'EINTEGRITY'
                        });
                    }
                    const algorithm = sri.pickAlgorithm(opts);
                    const digest = crypto.createHash(algorithm).update(data).digest('base64');
                    const newSri = parse({
                        algorithm,
                        digest
                    });
                    const match = newSri.match(sri, opts);
                    if (match || !opts.error) return match;
                    if ('number' == typeof opts.size && data.length !== opts.size) {
                        const err = new Error(`data size mismatch when checking ${sri}.\n  Wanted: ${opts.size}\n  Found: ${data.length}`);
                        err.code = 'EBADSIZE';
                        err.found = data.length;
                        err.expected = opts.size;
                        err.sri = sri;
                        throw err;
                    }
                    {
                        const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`);
                        err.code = 'EINTEGRITY';
                        err.found = newSri;
                        err.expected = sri;
                        err.algorithm = algorithm;
                        err.sri = sri;
                        throw err;
                    }
                }
                module.exports.checkStream = checkStream;
                function checkStream(stream, sri, opts) {
                    opts = opts || {};
                    const P = opts.Promise || Promise;
                    const checker = integrityStream(Object.assign({}, opts, {
                        integrity: sri
                    }));
                    return new P((resolve, reject)=>{
                        stream.pipe(checker);
                        stream.on('error', reject);
                        checker.on('error', reject);
                        let sri;
                        checker.on('verified', (s)=>{
                            sri = s;
                        });
                        checker.on('end', ()=>resolve(sri));
                        checker.on('data', ()=>{});
                    });
                }
                module.exports.integrityStream = integrityStream;
                function integrityStream(opts) {
                    opts = opts || {};
                    const sri = opts.integrity && parse(opts.integrity, opts);
                    const goodSri = sri && Object.keys(sri).length;
                    const algorithm = goodSri && sri.pickAlgorithm(opts);
                    const digests = goodSri && sri[algorithm];
                    const algorithms = Array.from(new Set((opts.algorithms || [
                        'sha512'
                    ]).concat(algorithm ? [
                        algorithm
                    ] : [])));
                    const hashes = algorithms.map(crypto.createHash);
                    let streamSize = 0;
                    const stream = new Transform({
                        transform (chunk, enc, cb) {
                            streamSize += chunk.length;
                            hashes.forEach((h)=>h.update(chunk, enc));
                            cb(null, chunk, enc);
                        }
                    }).on('end', ()=>{
                        const optString = opts.options && opts.options.length ? `?${opts.options.join('?')}` : '';
                        const newSri = parse(hashes.map((h, i)=>`${algorithms[i]}-${h.digest('base64')}${optString}`).join(' '), opts);
                        const match = goodSri && newSri.match(sri, opts);
                        if ('number' == typeof opts.size && streamSize !== opts.size) {
                            const err = new Error(`stream size mismatch when checking ${sri}.\n  Wanted: ${opts.size}\n  Found: ${streamSize}`);
                            err.code = 'EBADSIZE';
                            err.found = streamSize;
                            err.expected = opts.size;
                            err.sri = sri;
                            stream.emit('error', err);
                        } else if (opts.integrity && !match) {
                            const err = new Error(`${sri} integrity checksum failed when using ${algorithm}: wanted ${digests} but got ${newSri}. (${streamSize} bytes)`);
                            err.code = 'EINTEGRITY';
                            err.found = newSri;
                            err.expected = digests;
                            err.algorithm = algorithm;
                            err.sri = sri;
                            stream.emit('error', err);
                        } else {
                            stream.emit('size', streamSize);
                            stream.emit('integrity', newSri);
                            match && stream.emit('verified', match);
                        }
                    });
                    return stream;
                }
                module.exports.create = createIntegrity;
                function createIntegrity(opts) {
                    opts = opts || {};
                    const algorithms = opts.algorithms || [
                        'sha512'
                    ];
                    const optString = opts.options && opts.options.length ? `?${opts.options.join('?')}` : '';
                    const hashes = algorithms.map(crypto.createHash);
                    return {
                        update: function(chunk, enc) {
                            hashes.forEach((h)=>h.update(chunk, enc));
                            return this;
                        },
                        digest: function(enc) {
                            const integrity = algorithms.reduce((acc, algo)=>{
                                const digest = hashes.shift().digest('base64');
                                const hash = new Hash(`${algo}-${digest}${optString}`, opts);
                                if (hash.algorithm && hash.digest) {
                                    const algo = hash.algorithm;
                                    if (!acc[algo]) acc[algo] = [];
                                    acc[algo].push(hash);
                                }
                                return acc;
                            }, new Integrity());
                            return integrity;
                        }
                    };
                }
                const NODE_HASHES = new Set(crypto.getHashes());
                const DEFAULT_PRIORITY = [
                    'md5',
                    'whirlpool',
                    'sha1',
                    'sha224',
                    'sha256',
                    'sha384',
                    'sha512',
                    'sha3',
                    'sha3-256',
                    'sha3-384',
                    'sha3-512',
                    'sha3_256',
                    'sha3_384',
                    'sha3_512'
                ].filter((algo)=>NODE_HASHES.has(algo));
                function getPrioritizedHash(algo1, algo2) {
                    return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase()) ? algo1 : algo2;
                }
            },
            ,
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_85445_85464__) {
                module.exports = minimatch;
                minimatch.Minimatch = Minimatch;
                var path = {
                    sep: '/'
                };
                try {
                    path = __nested_webpack_require_85445_85464__(0);
                } catch (er) {}
                var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
                var expand = __nested_webpack_require_85445_85464__(175);
                var plTypes = {
                    '!': {
                        open: '(?:(?!(?:',
                        close: '))[^/]*?)'
                    },
                    '?': {
                        open: '(?:',
                        close: ')?'
                    },
                    '+': {
                        open: '(?:',
                        close: ')+'
                    },
                    '*': {
                        open: '(?:',
                        close: ')*'
                    },
                    '@': {
                        open: '(?:',
                        close: ')'
                    }
                };
                var qmark = '[^/]';
                var star = qmark + '*?';
                var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';
                var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';
                var reSpecials = charSet('().*{}+?[]^$\\!');
                function charSet(s) {
                    return s.split('').reduce(function(set, c) {
                        set[c] = true;
                        return set;
                    }, {});
                }
                var slashSplit = /\/+/;
                minimatch.filter = filter;
                function filter(pattern, options) {
                    options = options || {};
                    return function(p, i, list) {
                        return minimatch(p, pattern, options);
                    };
                }
                function ext(a, b) {
                    a = a || {};
                    b = b || {};
                    var t = {};
                    Object.keys(b).forEach(function(k) {
                        t[k] = b[k];
                    });
                    Object.keys(a).forEach(function(k) {
                        t[k] = a[k];
                    });
                    return t;
                }
                minimatch.defaults = function(def) {
                    if (!def || !Object.keys(def).length) return minimatch;
                    var orig = minimatch;
                    var m = function(p, pattern, options) {
                        return orig.minimatch(p, pattern, ext(def, options));
                    };
                    m.Minimatch = function(pattern, options) {
                        return new orig.Minimatch(pattern, ext(def, options));
                    };
                    return m;
                };
                Minimatch.defaults = function(def) {
                    if (!def || !Object.keys(def).length) return Minimatch;
                    return minimatch.defaults(def).Minimatch;
                };
                function minimatch(p, pattern, options) {
                    if ('string' != typeof pattern) throw new TypeError('glob pattern string required');
                    if (!options) options = {};
                    if (!options.nocomment && '#' === pattern.charAt(0)) return false;
                    if ('' === pattern.trim()) return '' === p;
                    return new Minimatch(pattern, options).match(p);
                }
                function Minimatch(pattern, options) {
                    if (!(this instanceof Minimatch)) return new Minimatch(pattern, options);
                    if ('string' != typeof pattern) throw new TypeError('glob pattern string required');
                    if (!options) options = {};
                    pattern = pattern.trim();
                    if ('/' !== path.sep) pattern = pattern.split(path.sep).join('/');
                    this.options = options;
                    this.set = [];
                    this.pattern = pattern;
                    this.regexp = null;
                    this.negate = false;
                    this.comment = false;
                    this.empty = false;
                    this.make();
                }
                Minimatch.prototype.debug = function() {};
                Minimatch.prototype.make = make;
                function make() {
                    if (this._made) return;
                    var pattern = this.pattern;
                    var options = this.options;
                    if (!options.nocomment && '#' === pattern.charAt(0)) {
                        this.comment = true;
                        return;
                    }
                    if (!pattern) {
                        this.empty = true;
                        return;
                    }
                    this.parseNegate();
                    var set = this.globSet = this.braceExpand();
                    if (options.debug) this.debug = console.error;
                    this.debug(this.pattern, set);
                    set = this.globParts = set.map(function(s) {
                        return s.split(slashSplit);
                    });
                    this.debug(this.pattern, set);
                    set = set.map(function(s, si, set) {
                        return s.map(this.parse, this);
                    }, this);
                    this.debug(this.pattern, set);
                    set = set.filter(function(s) {
                        return -1 === s.indexOf(false);
                    });
                    this.debug(this.pattern, set);
                    this.set = set;
                }
                Minimatch.prototype.parseNegate = parseNegate;
                function parseNegate() {
                    var pattern = this.pattern;
                    var negate = false;
                    var options = this.options;
                    var negateOffset = 0;
                    if (options.nonegate) return;
                    for(var i = 0, l = pattern.length; i < l && '!' === pattern.charAt(i); i++){
                        negate = !negate;
                        negateOffset++;
                    }
                    if (negateOffset) this.pattern = pattern.substr(negateOffset);
                    this.negate = negate;
                }
                minimatch.braceExpand = function(pattern, options) {
                    return braceExpand(pattern, options);
                };
                Minimatch.prototype.braceExpand = braceExpand;
                function braceExpand(pattern, options) {
                    if (!options) options = this instanceof Minimatch ? this.options : {};
                    pattern = void 0 === pattern ? this.pattern : pattern;
                    if (void 0 === pattern) throw new TypeError('undefined pattern');
                    if (options.nobrace || !pattern.match(/\{.*\}/)) return [
                        pattern
                    ];
                    return expand(pattern);
                }
                Minimatch.prototype.parse = parse;
                var SUBPARSE = {};
                function parse(pattern, isSub) {
                    if (pattern.length > 65536) throw new TypeError('pattern is too long');
                    var options = this.options;
                    if (!options.noglobstar && '**' === pattern) return GLOBSTAR;
                    if ('' === pattern) return '';
                    var re = '';
                    var hasMagic = !!options.nocase;
                    var escaping = false;
                    var patternListStack = [];
                    var negativeLists = [];
                    var stateChar;
                    var inClass = false;
                    var reClassStart = -1;
                    var classStart = -1;
                    var patternStart = '.' === pattern.charAt(0) ? '' : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))' : '(?!\\.)';
                    var self1 = this;
                    function clearStateChar() {
                        if (stateChar) {
                            switch(stateChar){
                                case '*':
                                    re += star;
                                    hasMagic = true;
                                    break;
                                case '?':
                                    re += qmark;
                                    hasMagic = true;
                                    break;
                                default:
                                    re += '\\' + stateChar;
                                    break;
                            }
                            self1.debug('clearStateChar %j %j', stateChar, re);
                            stateChar = false;
                        }
                    }
                    for(var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++){
                        this.debug('%s\t%s %s %j', pattern, i, re, c);
                        if (escaping && reSpecials[c]) {
                            re += '\\' + c;
                            escaping = false;
                            continue;
                        }
                        switch(c){
                            case '/':
                                return false;
                            case '\\':
                                clearStateChar();
                                escaping = true;
                                continue;
                            case '?':
                            case '*':
                            case '+':
                            case '@':
                            case '!':
                                this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);
                                if (inClass) {
                                    this.debug('  in class');
                                    if ('!' === c && i === classStart + 1) c = '^';
                                    re += c;
                                    continue;
                                }
                                self1.debug('call clearStateChar %j', stateChar);
                                clearStateChar();
                                stateChar = c;
                                if (options.noext) clearStateChar();
                                continue;
                            case '(':
                                if (inClass) {
                                    re += '(';
                                    continue;
                                }
                                if (!stateChar) {
                                    re += '\\(';
                                    continue;
                                }
                                patternListStack.push({
                                    type: stateChar,
                                    start: i - 1,
                                    reStart: re.length,
                                    open: plTypes[stateChar].open,
                                    close: plTypes[stateChar].close
                                });
                                re += '!' === stateChar ? '(?:(?!(?:' : '(?:';
                                this.debug('plType %j %j', stateChar, re);
                                stateChar = false;
                                continue;
                            case ')':
                                if (inClass || !patternListStack.length) {
                                    re += '\\)';
                                    continue;
                                }
                                clearStateChar();
                                hasMagic = true;
                                var pl = patternListStack.pop();
                                re += pl.close;
                                if ('!' === pl.type) negativeLists.push(pl);
                                pl.reEnd = re.length;
                                continue;
                            case '|':
                                if (inClass || !patternListStack.length || escaping) {
                                    re += '\\|';
                                    escaping = false;
                                    continue;
                                }
                                clearStateChar();
                                re += '|';
                                continue;
                            case '[':
                                clearStateChar();
                                if (inClass) {
                                    re += '\\' + c;
                                    continue;
                                }
                                inClass = true;
                                classStart = i;
                                reClassStart = re.length;
                                re += c;
                                continue;
                            case ']':
                                if (i === classStart + 1 || !inClass) {
                                    re += '\\' + c;
                                    escaping = false;
                                    continue;
                                }
                                if (inClass) {
                                    var cs = pattern.substring(classStart + 1, i);
                                    try {
                                        RegExp('[' + cs + ']');
                                    } catch (er) {
                                        var sp = this.parse(cs, SUBPARSE);
                                        re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
                                        hasMagic = hasMagic || sp[1];
                                        inClass = false;
                                        continue;
                                    }
                                }
                                hasMagic = true;
                                inClass = false;
                                re += c;
                                continue;
                            default:
                                clearStateChar();
                                if (escaping) escaping = false;
                                else if (reSpecials[c] && !('^' === c && inClass)) re += '\\';
                                re += c;
                        }
                    }
                    if (inClass) {
                        cs = pattern.substr(classStart + 1);
                        sp = this.parse(cs, SUBPARSE);
                        re = re.substr(0, reClassStart) + '\\[' + sp[0];
                        hasMagic = hasMagic || sp[1];
                    }
                    for(pl = patternListStack.pop(); pl; pl = patternListStack.pop()){
                        var tail = re.slice(pl.reStart + pl.open.length);
                        this.debug('setting tail', re, pl);
                        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
                            if (!$2) $2 = '\\';
                            return $1 + $1 + $2 + '|';
                        });
                        this.debug('tail=%j\n   %s', tail, tail, pl, re);
                        var t = '*' === pl.type ? star : '?' === pl.type ? qmark : '\\' + pl.type;
                        hasMagic = true;
                        re = re.slice(0, pl.reStart) + t + '\\(' + tail;
                    }
                    clearStateChar();
                    if (escaping) re += '\\\\';
                    var addPatternStart = false;
                    switch(re.charAt(0)){
                        case '.':
                        case '[':
                        case '(':
                            addPatternStart = true;
                    }
                    for(var n = negativeLists.length - 1; n > -1; n--){
                        var nl = negativeLists[n];
                        var nlBefore = re.slice(0, nl.reStart);
                        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
                        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
                        var nlAfter = re.slice(nl.reEnd);
                        nlLast += nlAfter;
                        var openParensBefore = nlBefore.split('(').length - 1;
                        var cleanAfter = nlAfter;
                        for(i = 0; i < openParensBefore; i++)cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
                        nlAfter = cleanAfter;
                        var dollar = '';
                        if ('' === nlAfter && isSub !== SUBPARSE) dollar = '$';
                        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
                        re = newRe;
                    }
                    if ('' !== re && hasMagic) re = '(?=.)' + re;
                    if (addPatternStart) re = patternStart + re;
                    if (isSub === SUBPARSE) return [
                        re,
                        hasMagic
                    ];
                    if (!hasMagic) return globUnescape(pattern);
                    var flags = options.nocase ? 'i' : '';
                    try {
                        var regExp = new RegExp('^' + re + '$', flags);
                    } catch (er) {
                        return new RegExp('$.');
                    }
                    regExp._glob = pattern;
                    regExp._src = re;
                    return regExp;
                }
                minimatch.makeRe = function(pattern, options) {
                    return new Minimatch(pattern, options || {}).makeRe();
                };
                Minimatch.prototype.makeRe = makeRe;
                function makeRe() {
                    if (this.regexp || false === this.regexp) return this.regexp;
                    var set = this.set;
                    if (!set.length) {
                        this.regexp = false;
                        return this.regexp;
                    }
                    var options = this.options;
                    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
                    var flags = options.nocase ? 'i' : '';
                    var re = set.map(function(pattern) {
                        return pattern.map(function(p) {
                            return p === GLOBSTAR ? twoStar : 'string' == typeof p ? regExpEscape(p) : p._src;
                        }).join('\\\/');
                    }).join('|');
                    re = '^(?:' + re + ')$';
                    if (this.negate) re = '^(?!' + re + ').*$';
                    try {
                        this.regexp = new RegExp(re, flags);
                    } catch (ex) {
                        this.regexp = false;
                    }
                    return this.regexp;
                }
                minimatch.match = function(list, pattern, options) {
                    options = options || {};
                    var mm = new Minimatch(pattern, options);
                    list = list.filter(function(f) {
                        return mm.match(f);
                    });
                    if (mm.options.nonull && !list.length) list.push(pattern);
                    return list;
                };
                Minimatch.prototype.match = match;
                function match(f, partial) {
                    this.debug('match', f, this.pattern);
                    if (this.comment) return false;
                    if (this.empty) return '' === f;
                    if ('/' === f && partial) return true;
                    var options = this.options;
                    if ('/' !== path.sep) f = f.split(path.sep).join('/');
                    f = f.split(slashSplit);
                    this.debug(this.pattern, 'split', f);
                    var set = this.set;
                    this.debug(this.pattern, 'set', set);
                    var filename;
                    var i;
                    for(i = f.length - 1; i >= 0; i--){
                        filename = f[i];
                        if (filename) break;
                    }
                    for(i = 0; i < set.length; i++){
                        var pattern = set[i];
                        var file = f;
                        if (options.matchBase && 1 === pattern.length) file = [
                            filename
                        ];
                        var hit = this.matchOne(file, pattern, partial);
                        if (hit) {
                            if (options.flipNegate) return true;
                            return !this.negate;
                        }
                    }
                    if (options.flipNegate) return false;
                    return this.negate;
                }
                Minimatch.prototype.matchOne = function(file, pattern, partial) {
                    var options = this.options;
                    this.debug('matchOne', {
                        this: this,
                        file: file,
                        pattern: pattern
                    });
                    this.debug('matchOne', file.length, pattern.length);
                    for(var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++){
                        this.debug('matchOne loop');
                        var p = pattern[pi];
                        var f = file[fi];
                        this.debug(pattern, p, f);
                        if (false === p) return false;
                        if (p === GLOBSTAR) {
                            this.debug('GLOBSTAR', [
                                pattern,
                                p,
                                f
                            ]);
                            var fr = fi;
                            var pr = pi + 1;
                            if (pr === pl) {
                                this.debug('** at the end');
                                for(; fi < fl; fi++)if ('.' === file[fi] || '..' === file[fi] || !options.dot && '.' === file[fi].charAt(0)) return false;
                                return true;
                            }
                            while(fr < fl){
                                var swallowee = file[fr];
                                this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);
                                if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                                    this.debug('globstar found match!', fr, fl, swallowee);
                                    return true;
                                }
                                if ('.' === swallowee || '..' === swallowee || !options.dot && '.' === swallowee.charAt(0)) {
                                    this.debug('dot detected!', file, fr, pattern, pr);
                                    break;
                                }
                                this.debug('globstar swallow a segment, and continue');
                                fr++;
                            }
                            if (partial) {
                                this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
                                if (fr === fl) return true;
                            }
                            return false;
                        }
                        var hit;
                        if ('string' == typeof p) {
                            hit = options.nocase ? f.toLowerCase() === p.toLowerCase() : f === p;
                            this.debug('string match', p, f, hit);
                        } else {
                            hit = f.match(p);
                            this.debug('pattern match', p, f, hit);
                        }
                        if (!hit) return false;
                    }
                    if (fi === fl && pi === pl) return true;
                    if (fi === fl) return partial;
                    if (pi === pl) {
                        var emptyFileEnd = fi === fl - 1 && '' === file[fi];
                        return emptyFileEnd;
                    }
                    throw new Error('wtf?');
                };
                function globUnescape(s) {
                    return s.replace(/\\(.)/g, '$1');
                }
                function regExpEscape(s) {
                    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
                }
            },
            function(module, exports, __nested_webpack_require_110875_110894__) {
                var wrappy = __nested_webpack_require_110875_110894__(123);
                module.exports = wrappy(once);
                module.exports.strict = wrappy(onceStrict);
                once.proto = once(function() {
                    Object.defineProperty(Function.prototype, 'once', {
                        value: function() {
                            return once(this);
                        },
                        configurable: true
                    });
                    Object.defineProperty(Function.prototype, 'onceStrict', {
                        value: function() {
                            return onceStrict(this);
                        },
                        configurable: true
                    });
                });
                function once(fn) {
                    var f = function() {
                        if (f.called) return f.value;
                        f.called = true;
                        return f.value = fn.apply(this, arguments);
                    };
                    f.called = false;
                    return f;
                }
                function onceStrict(fn) {
                    var f = function() {
                        if (f.called) throw new Error(f.onceError);
                        f.called = true;
                        return f.value = fn.apply(this, arguments);
                    };
                    var name = fn.name || 'Function wrapped with `once`';
                    f.onceError = name + " shouldn't be called more than once";
                    f.called = false;
                    return f;
                }
            },
            ,
            function(module, exports) {
                module.exports = __webpack_require__("buffer");
            },
            ,
            ,
            ,
            function(module, exports) {
                module.exports = function(it) {
                    if (void 0 == it) throw TypeError("Can't call method on  " + it);
                    return it;
                };
            },
            function(module, exports, __nested_webpack_require_112246_112265__) {
                var isObject = __nested_webpack_require_112246_112265__(34);
                var document1 = __nested_webpack_require_112246_112265__(11).document;
                var is = isObject(document1) && isObject(document1.createElement);
                module.exports = function(it) {
                    return is ? document1.createElement(it) : {};
                };
            },
            function(module, exports) {
                module.exports = true;
            },
            function(module, exports, __nested_webpack_require_112696_112715__) {
                "use strict";
                var aFunction = __nested_webpack_require_112696_112715__(46);
                function PromiseCapability(C) {
                    var resolve, reject;
                    this.promise = new C(function($$resolve, $$reject) {
                        if (void 0 !== resolve || void 0 !== reject) throw TypeError('Bad Promise constructor');
                        resolve = $$resolve;
                        reject = $$reject;
                    });
                    this.resolve = aFunction(resolve);
                    this.reject = aFunction(reject);
                }
                module.exports.f = function(C) {
                    return new PromiseCapability(C);
                };
            },
            function(module, exports, __nested_webpack_require_113278_113297__) {
                var def = __nested_webpack_require_113278_113297__(50).f;
                var has = __nested_webpack_require_113278_113297__(49);
                var TAG = __nested_webpack_require_113278_113297__(13)('toStringTag');
                module.exports = function(it, tag, stat) {
                    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
                        configurable: true,
                        value: tag
                    });
                };
            },
            function(module, exports, __nested_webpack_require_113630_113649__) {
                var shared = __nested_webpack_require_113630_113649__(107)('keys');
                var uid = __nested_webpack_require_113630_113649__(111);
                module.exports = function(key) {
                    return shared[key] || (shared[key] = uid(key));
                };
            },
            function(module, exports) {
                var ceil = Math.ceil;
                var floor = Math.floor;
                module.exports = function(it) {
                    return isNaN(it *= 1) ? 0 : (it > 0 ? floor : ceil)(it);
                };
            },
            function(module, exports, __nested_webpack_require_114096_114115__) {
                var IObject = __nested_webpack_require_114096_114115__(131);
                var defined = __nested_webpack_require_114096_114115__(67);
                module.exports = function(it) {
                    return IObject(defined(it));
                };
            },
            function(module, exports, __nested_webpack_require_114396_114415__) {
                module.exports = glob;
                var fs = __nested_webpack_require_114396_114415__(3);
                var rp = __nested_webpack_require_114396_114415__(114);
                var minimatch = __nested_webpack_require_114396_114415__(60);
                minimatch.Minimatch;
                var inherits = __nested_webpack_require_114396_114415__(42);
                var EE = __nested_webpack_require_114396_114415__(54).EventEmitter;
                var path = __nested_webpack_require_114396_114415__(0);
                var assert = __nested_webpack_require_114396_114415__(22);
                var isAbsolute = __nested_webpack_require_114396_114415__(76);
                var globSync = __nested_webpack_require_114396_114415__(218);
                var common = __nested_webpack_require_114396_114415__(115);
                common.alphasort;
                common.alphasorti;
                var setopts = common.setopts;
                var ownProp = common.ownProp;
                var inflight = __nested_webpack_require_114396_114415__(223);
                __nested_webpack_require_114396_114415__(2);
                var childrenIgnored = common.childrenIgnored;
                var isIgnored = common.isIgnored;
                var once = __nested_webpack_require_114396_114415__(61);
                function glob(pattern, options, cb) {
                    if ('function' == typeof options) cb = options, options = {};
                    if (!options) options = {};
                    if (options.sync) {
                        if (cb) throw new TypeError('callback provided to sync glob');
                        return globSync(pattern, options);
                    }
                    return new Glob(pattern, options, cb);
                }
                glob.sync = globSync;
                var GlobSync = glob.GlobSync = globSync.GlobSync;
                glob.glob = glob;
                function extend(origin, add) {
                    if (null === add || 'object' != typeof add) return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while(i--)origin[keys[i]] = add[keys[i]];
                    return origin;
                }
                glob.hasMagic = function(pattern, options_) {
                    var options = extend({}, options_);
                    options.noprocess = true;
                    var g = new Glob(pattern, options);
                    var set = g.minimatch.set;
                    if (!pattern) return false;
                    if (set.length > 1) return true;
                    for(var j = 0; j < set[0].length; j++)if ('string' != typeof set[0][j]) return true;
                    return false;
                };
                glob.Glob = Glob;
                inherits(Glob, EE);
                function Glob(pattern, options, cb) {
                    if ('function' == typeof options) {
                        cb = options;
                        options = null;
                    }
                    if (options && options.sync) {
                        if (cb) throw new TypeError('callback provided to sync glob');
                        return new GlobSync(pattern, options);
                    }
                    if (!(this instanceof Glob)) return new Glob(pattern, options, cb);
                    setopts(this, pattern, options);
                    this._didRealPath = false;
                    var n = this.minimatch.set.length;
                    this.matches = new Array(n);
                    if ('function' == typeof cb) {
                        cb = once(cb);
                        this.on('error', cb);
                        this.on('end', function(matches) {
                            cb(null, matches);
                        });
                    }
                    var self1 = this;
                    this._processing = 0;
                    this._emitQueue = [];
                    this._processQueue = [];
                    this.paused = false;
                    if (this.noprocess) return this;
                    if (0 === n) return done();
                    var sync = true;
                    for(var i = 0; i < n; i++)this._process(this.minimatch.set[i], i, false, done);
                    sync = false;
                    function done() {
                        --self1._processing;
                        if (self1._processing <= 0) {
                            if (sync) process.nextTick(function() {
                                self1._finish();
                            });
                            else self1._finish();
                        }
                    }
                }
                Glob.prototype._finish = function() {
                    assert(this instanceof Glob);
                    if (this.aborted) return;
                    if (this.realpath && !this._didRealpath) return this._realpath();
                    common.finish(this);
                    this.emit('end', this.found);
                };
                Glob.prototype._realpath = function() {
                    if (this._didRealpath) return;
                    this._didRealpath = true;
                    var n = this.matches.length;
                    if (0 === n) return this._finish();
                    var self1 = this;
                    for(var i = 0; i < this.matches.length; i++)this._realpathSet(i, next);
                    function next() {
                        if (0 === --n) self1._finish();
                    }
                };
                Glob.prototype._realpathSet = function(index, cb) {
                    var matchset = this.matches[index];
                    if (!matchset) return cb();
                    var found = Object.keys(matchset);
                    var self1 = this;
                    var n = found.length;
                    if (0 === n) return cb();
                    var set = this.matches[index] = Object.create(null);
                    found.forEach(function(p, i) {
                        p = self1._makeAbs(p);
                        rp.realpath(p, self1.realpathCache, function(er, real) {
                            if (er) {
                                if ('stat' === er.syscall) set[p] = true;
                                else self1.emit('error', er);
                            } else set[real] = true;
                            if (0 === --n) {
                                self1.matches[index] = set;
                                cb();
                            }
                        });
                    });
                };
                Glob.prototype._mark = function(p) {
                    return common.mark(this, p);
                };
                Glob.prototype._makeAbs = function(f) {
                    return common.makeAbs(this, f);
                };
                Glob.prototype.abort = function() {
                    this.aborted = true;
                    this.emit('abort');
                };
                Glob.prototype.pause = function() {
                    if (!this.paused) {
                        this.paused = true;
                        this.emit('pause');
                    }
                };
                Glob.prototype.resume = function() {
                    if (this.paused) {
                        this.emit('resume');
                        this.paused = false;
                        if (this._emitQueue.length) {
                            var eq = this._emitQueue.slice(0);
                            this._emitQueue.length = 0;
                            for(var i = 0; i < eq.length; i++){
                                var e = eq[i];
                                this._emitMatch(e[0], e[1]);
                            }
                        }
                        if (this._processQueue.length) {
                            var pq = this._processQueue.slice(0);
                            this._processQueue.length = 0;
                            for(var i = 0; i < pq.length; i++){
                                var p = pq[i];
                                this._processing--;
                                this._process(p[0], p[1], p[2], p[3]);
                            }
                        }
                    }
                };
                Glob.prototype._process = function(pattern, index, inGlobStar, cb) {
                    assert(this instanceof Glob);
                    assert('function' == typeof cb);
                    if (this.aborted) return;
                    this._processing++;
                    if (this.paused) {
                        this._processQueue.push([
                            pattern,
                            index,
                            inGlobStar,
                            cb
                        ]);
                        return;
                    }
                    var n = 0;
                    while('string' == typeof pattern[n])n++;
                    var prefix;
                    switch(n){
                        case pattern.length:
                            this._processSimple(pattern.join('/'), index, cb);
                            return;
                        case 0:
                            prefix = null;
                            break;
                        default:
                            prefix = pattern.slice(0, n).join('/');
                            break;
                    }
                    var remain = pattern.slice(n);
                    var read;
                    if (null === prefix) read = '.';
                    else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
                        if (!prefix || !isAbsolute(prefix)) prefix = '/' + prefix;
                        read = prefix;
                    } else read = prefix;
                    var abs = this._makeAbs(read);
                    if (childrenIgnored(this, read)) return cb();
                    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
                    if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
                    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
                };
                Glob.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar, cb) {
                    var self1 = this;
                    this._readdir(abs, inGlobStar, function(er, entries) {
                        return self1._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
                    });
                };
                Glob.prototype._processReaddir2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
                    if (!entries) return cb();
                    var pn = remain[0];
                    var negate = !!this.minimatch.negate;
                    var rawGlob = pn._glob;
                    var dotOk = this.dot || '.' === rawGlob.charAt(0);
                    var matchedEntries = [];
                    for(var i = 0; i < entries.length; i++){
                        var e = entries[i];
                        if ('.' !== e.charAt(0) || dotOk) {
                            var m;
                            m = negate && !prefix ? !e.match(pn) : e.match(pn);
                            if (m) matchedEntries.push(e);
                        }
                    }
                    var len = matchedEntries.length;
                    if (0 === len) return cb();
                    if (1 === remain.length && !this.mark && !this.stat) {
                        if (!this.matches[index]) this.matches[index] = Object.create(null);
                        for(var i = 0; i < len; i++){
                            var e = matchedEntries[i];
                            if (prefix) e = '/' !== prefix ? prefix + '/' + e : prefix + e;
                            if ('/' === e.charAt(0) && !this.nomount) e = path.join(this.root, e);
                            this._emitMatch(index, e);
                        }
                        return cb();
                    }
                    remain.shift();
                    for(var i = 0; i < len; i++){
                        var e = matchedEntries[i];
                        if (prefix) e = '/' !== prefix ? prefix + '/' + e : prefix + e;
                        this._process([
                            e
                        ].concat(remain), index, inGlobStar, cb);
                    }
                    cb();
                };
                Glob.prototype._emitMatch = function(index, e) {
                    if (this.aborted) return;
                    if (isIgnored(this, e)) return;
                    if (this.paused) {
                        this._emitQueue.push([
                            index,
                            e
                        ]);
                        return;
                    }
                    var abs = isAbsolute(e) ? e : this._makeAbs(e);
                    if (this.mark) e = this._mark(e);
                    if (this.absolute) e = abs;
                    if (this.matches[index][e]) return;
                    if (this.nodir) {
                        var c = this.cache[abs];
                        if ('DIR' === c || Array.isArray(c)) return;
                    }
                    this.matches[index][e] = true;
                    var st = this.statCache[abs];
                    if (st) this.emit('stat', e, st);
                    this.emit('match', e);
                };
                Glob.prototype._readdirInGlobStar = function(abs, cb) {
                    if (this.aborted) return;
                    if (this.follow) return this._readdir(abs, false, cb);
                    var lstatkey = 'lstat\0' + abs;
                    var self1 = this;
                    var lstatcb = inflight(lstatkey, lstatcb_);
                    if (lstatcb) fs.lstat(abs, lstatcb);
                    function lstatcb_(er, lstat) {
                        if (er && 'ENOENT' === er.code) return cb();
                        var isSym = lstat && lstat.isSymbolicLink();
                        self1.symlinks[abs] = isSym;
                        if (isSym || !lstat || lstat.isDirectory()) self1._readdir(abs, false, cb);
                        else {
                            self1.cache[abs] = 'FILE';
                            cb();
                        }
                    }
                };
                Glob.prototype._readdir = function(abs, inGlobStar, cb) {
                    if (this.aborted) return;
                    cb = inflight('readdir\0' + abs + '\0' + inGlobStar, cb);
                    if (!cb) return;
                    if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs, cb);
                    if (ownProp(this.cache, abs)) {
                        var c = this.cache[abs];
                        if (!c || 'FILE' === c) return cb();
                        if (Array.isArray(c)) return cb(null, c);
                    }
                    fs.readdir(abs, readdirCb(this, abs, cb));
                };
                function readdirCb(self1, abs, cb) {
                    return function(er, entries) {
                        if (er) self1._readdirError(abs, er, cb);
                        else self1._readdirEntries(abs, entries, cb);
                    };
                }
                Glob.prototype._readdirEntries = function(abs, entries, cb) {
                    if (this.aborted) return;
                    if (!this.mark && !this.stat) for(var i = 0; i < entries.length; i++){
                        var e = entries[i];
                        e = '/' === abs ? abs + e : abs + '/' + e;
                        this.cache[e] = true;
                    }
                    this.cache[abs] = entries;
                    return cb(null, entries);
                };
                Glob.prototype._readdirError = function(f, er, cb) {
                    if (this.aborted) return;
                    switch(er.code){
                        case 'ENOTSUP':
                        case 'ENOTDIR':
                            var abs = this._makeAbs(f);
                            this.cache[abs] = 'FILE';
                            if (abs === this.cwdAbs) {
                                var error = new Error(er.code + ' invalid cwd ' + this.cwd);
                                error.path = this.cwd;
                                error.code = er.code;
                                this.emit('error', error);
                                this.abort();
                            }
                            break;
                        case 'ENOENT':
                        case 'ELOOP':
                        case 'ENAMETOOLONG':
                        case 'UNKNOWN':
                            this.cache[this._makeAbs(f)] = false;
                            break;
                        default:
                            this.cache[this._makeAbs(f)] = false;
                            if (this.strict) {
                                this.emit('error', er);
                                this.abort();
                            }
                            if (!this.silent) console.error('glob error', er);
                            break;
                    }
                    return cb();
                };
                Glob.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar, cb) {
                    var self1 = this;
                    this._readdir(abs, inGlobStar, function(er, entries) {
                        self1._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
                    });
                };
                Glob.prototype._processGlobStar2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
                    if (!entries) return cb();
                    var remainWithoutGlobStar = remain.slice(1);
                    var gspref = prefix ? [
                        prefix
                    ] : [];
                    var noGlobStar = gspref.concat(remainWithoutGlobStar);
                    this._process(noGlobStar, index, false, cb);
                    var isSym = this.symlinks[abs];
                    var len = entries.length;
                    if (isSym && inGlobStar) return cb();
                    for(var i = 0; i < len; i++){
                        var e = entries[i];
                        if ('.' !== e.charAt(0) || !!this.dot) {
                            var instead = gspref.concat(entries[i], remainWithoutGlobStar);
                            this._process(instead, index, true, cb);
                            var below = gspref.concat(entries[i], remain);
                            this._process(below, index, true, cb);
                        }
                    }
                    cb();
                };
                Glob.prototype._processSimple = function(prefix, index, cb) {
                    var self1 = this;
                    this._stat(prefix, function(er, exists) {
                        self1._processSimple2(prefix, index, er, exists, cb);
                    });
                };
                Glob.prototype._processSimple2 = function(prefix, index, er, exists, cb) {
                    if (!this.matches[index]) this.matches[index] = Object.create(null);
                    if (!exists) return cb();
                    if (prefix && isAbsolute(prefix) && !this.nomount) {
                        var trail = /[\/\\]$/.test(prefix);
                        if ('/' === prefix.charAt(0)) prefix = path.join(this.root, prefix);
                        else {
                            prefix = path.resolve(this.root, prefix);
                            if (trail) prefix += '/';
                        }
                    }
                    if ('win32' === process.platform) prefix = prefix.replace(/\\/g, '/');
                    this._emitMatch(index, prefix);
                    cb();
                };
                Glob.prototype._stat = function(f, cb) {
                    var abs = this._makeAbs(f);
                    var needDir = '/' === f.slice(-1);
                    if (f.length > this.maxLength) return cb();
                    if (!this.stat && ownProp(this.cache, abs)) {
                        var c = this.cache[abs];
                        if (Array.isArray(c)) c = 'DIR';
                        if (!needDir || 'DIR' === c) return cb(null, c);
                        if (needDir && 'FILE' === c) return cb();
                    }
                    var stat = this.statCache[abs];
                    if (void 0 !== stat) {
                        if (false === stat) return cb(null, stat);
                        var type = stat.isDirectory() ? 'DIR' : 'FILE';
                        if (needDir && 'FILE' === type) return cb();
                        return cb(null, type, stat);
                    }
                    var self1 = this;
                    var statcb = inflight('stat\0' + abs, lstatcb_);
                    if (statcb) fs.lstat(abs, statcb);
                    function lstatcb_(er, lstat) {
                        if (lstat && lstat.isSymbolicLink()) return fs.stat(abs, function(er, stat) {
                            if (er) self1._stat2(f, abs, null, lstat, cb);
                            else self1._stat2(f, abs, er, stat, cb);
                        });
                        self1._stat2(f, abs, er, lstat, cb);
                    }
                };
                Glob.prototype._stat2 = function(f, abs, er, stat, cb) {
                    if (er && ('ENOENT' === er.code || 'ENOTDIR' === er.code)) {
                        this.statCache[abs] = false;
                        return cb();
                    }
                    var needDir = '/' === f.slice(-1);
                    this.statCache[abs] = stat;
                    if ('/' === abs.slice(-1) && stat && !stat.isDirectory()) return cb(null, false, stat);
                    var c = true;
                    if (stat) c = stat.isDirectory() ? 'DIR' : 'FILE';
                    this.cache[abs] = this.cache[abs] || c;
                    if (needDir && 'FILE' === c) return cb();
                    return cb(null, c, stat);
                };
            },
            function(module, exports, __webpack_require__) {
                "use strict";
                function posix(path) {
                    return '/' === path.charAt(0);
                }
                function win32(path) {
                    var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
                    var result = splitDeviceRe.exec(path);
                    var device = result[1] || '';
                    var isUnc = Boolean(device && ':' !== device.charAt(1));
                    return Boolean(result[2] || isUnc);
                }
                module.exports = 'win32' === process.platform ? win32 : posix;
                module.exports.posix = posix;
                module.exports.win32 = win32;
            },
            ,
            ,
            function(module, exports) {
                module.exports = __webpack_require__("tty");
            },
            ,
            function(module, exports, __nested_webpack_require_134775_134794__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = function(str, fileLoc = 'lockfile') {
                    str = (0, (_stripBom || _load_stripBom()).default)(str);
                    return hasMergeConflicts(str) ? parseWithConflict(str, fileLoc) : {
                        type: 'success',
                        object: parse(str, fileLoc)
                    };
                };
                var _util;
                function _load_util() {
                    return _util = _interopRequireDefault(__nested_webpack_require_134775_134794__(2));
                }
                var _invariant;
                function _load_invariant() {
                    return _invariant = _interopRequireDefault(__nested_webpack_require_134775_134794__(7));
                }
                var _stripBom;
                function _load_stripBom() {
                    return _stripBom = _interopRequireDefault(__nested_webpack_require_134775_134794__(122));
                }
                var _constants;
                function _load_constants() {
                    return _constants = __nested_webpack_require_134775_134794__(6);
                }
                var _errors;
                function _load_errors() {
                    return _errors = __nested_webpack_require_134775_134794__(4);
                }
                var _map;
                function _load_map() {
                    return _map = _interopRequireDefault(__nested_webpack_require_134775_134794__(20));
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                const VERSION_REGEX = /^yarn lockfile v(\d+)$/;
                const TOKEN_TYPES = {
                    boolean: 'BOOLEAN',
                    string: 'STRING',
                    identifier: 'IDENTIFIER',
                    eof: 'EOF',
                    colon: 'COLON',
                    newline: 'NEWLINE',
                    comment: 'COMMENT',
                    indent: 'INDENT',
                    invalid: 'INVALID',
                    number: 'NUMBER',
                    comma: 'COMMA'
                };
                const VALID_PROP_VALUE_TOKENS = [
                    TOKEN_TYPES.boolean,
                    TOKEN_TYPES.string,
                    TOKEN_TYPES.number
                ];
                function isValidPropValueToken(token) {
                    return VALID_PROP_VALUE_TOKENS.indexOf(token.type) >= 0;
                }
                function* tokenise(input) {
                    let lastNewline = false;
                    let line = 1;
                    let col = 0;
                    function buildToken(type, value1) {
                        return {
                            line,
                            col,
                            type,
                            value: value1
                        };
                    }
                    while(input.length){
                        let chop = 0;
                        if ('\n' === input[0] || '\r' === input[0]) {
                            chop++;
                            if ('\n' === input[1]) chop++;
                            line++;
                            col = 0;
                            yield buildToken(TOKEN_TYPES.newline);
                        } else if ('#' === input[0]) {
                            chop++;
                            let val = '';
                            while('\n' !== input[chop]){
                                val += input[chop];
                                chop++;
                            }
                            yield buildToken(TOKEN_TYPES.comment, val);
                        } else if (' ' === input[0]) {
                            if (lastNewline) {
                                let indent = '';
                                for(let i = 0; ' ' === input[i]; i++)indent += input[i];
                                if (indent.length % 2) throw new TypeError('Invalid number of spaces');
                                chop = indent.length;
                                yield buildToken(TOKEN_TYPES.indent, indent.length / 2);
                            } else chop++;
                        } else if ('"' === input[0]) {
                            let val = '';
                            for(let i = 0;; i++){
                                const currentChar = input[i];
                                val += currentChar;
                                if (i > 0 && '"' === currentChar) {
                                    const isEscaped = '\\' === input[i - 1] && '\\' !== input[i - 2];
                                    if (!isEscaped) break;
                                }
                            }
                            chop = val.length;
                            try {
                                yield buildToken(TOKEN_TYPES.string, JSON.parse(val));
                            } catch (err) {
                                if (err instanceof SyntaxError) yield buildToken(TOKEN_TYPES.invalid);
                                else throw err;
                            }
                        } else if (/^[0-9]/.test(input)) {
                            let val = '';
                            for(let i = 0; /^[0-9]$/.test(input[i]); i++)val += input[i];
                            chop = val.length;
                            yield buildToken(TOKEN_TYPES.number, +val);
                        } else if (/^true/.test(input)) {
                            yield buildToken(TOKEN_TYPES.boolean, true);
                            chop = 4;
                        } else if (/^false/.test(input)) {
                            yield buildToken(TOKEN_TYPES.boolean, false);
                            chop = 5;
                        } else if (':' === input[0]) {
                            yield buildToken(TOKEN_TYPES.colon);
                            chop++;
                        } else if (',' === input[0]) {
                            yield buildToken(TOKEN_TYPES.comma);
                            chop++;
                        } else if (/^[a-zA-Z\/-]/g.test(input)) {
                            let name = '';
                            for(let i = 0; i < input.length; i++){
                                const char = input[i];
                                if (':' === char || ' ' === char || '\n' === char || '\r' === char || ',' === char) break;
                                name += char;
                            }
                            chop = name.length;
                            yield buildToken(TOKEN_TYPES.string, name);
                        } else yield buildToken(TOKEN_TYPES.invalid);
                        if (!chop) yield buildToken(TOKEN_TYPES.invalid);
                        col += chop;
                        lastNewline = '\n' === input[0] || '\r' === input[0] && '\n' === input[1];
                        input = input.slice(chop);
                    }
                    yield buildToken(TOKEN_TYPES.eof);
                }
                class Parser {
                    constructor(input, fileLoc = 'lockfile'){
                        this.comments = [];
                        this.tokens = tokenise(input);
                        this.fileLoc = fileLoc;
                    }
                    onComment(token) {
                        const value1 = token.value;
                        (0, (_invariant || _load_invariant()).default)('string' == typeof value1, 'expected token value to be a string');
                        const comment = value1.trim();
                        const versionMatch = comment.match(VERSION_REGEX);
                        if (versionMatch) {
                            const version = +versionMatch[1];
                            if (version > (_constants || _load_constants()).LOCKFILE_VERSION) throw new (_errors || _load_errors()).MessageError(`Can't install from a lockfile of version ${version} as you're on an old yarn version that only supports versions up to ${(_constants || _load_constants()).LOCKFILE_VERSION}. Run \`$ yarn self-update\` to upgrade to the latest version.`);
                        }
                        this.comments.push(comment);
                    }
                    next() {
                        const item = this.tokens.next();
                        (0, (_invariant || _load_invariant()).default)(item, 'expected a token');
                        const done = item.done, value1 = item.value;
                        if (done || !value1) throw new Error('No more tokens');
                        if (value1.type !== TOKEN_TYPES.comment) return this.token = value1;
                        this.onComment(value1);
                        return this.next();
                    }
                    unexpected(msg = 'Unexpected token') {
                        throw new SyntaxError(`${msg} ${this.token.line}:${this.token.col} in ${this.fileLoc}`);
                    }
                    expect(tokType) {
                        if (this.token.type === tokType) this.next();
                        else this.unexpected();
                    }
                    eat(tokType) {
                        if (this.token.type !== tokType) return false;
                        this.next();
                        return true;
                    }
                    parse(indent = 0) {
                        const obj = (0, (_map || _load_map()).default)();
                        while(true){
                            const propToken = this.token;
                            if (propToken.type === TOKEN_TYPES.newline) {
                                const nextToken = this.next();
                                if (!indent) continue;
                                if (nextToken.type !== TOKEN_TYPES.indent) break;
                                if (nextToken.value === indent) this.next();
                                else break;
                            } else if (propToken.type === TOKEN_TYPES.indent) {
                                if (propToken.value === indent) this.next();
                                else break;
                            } else if (propToken.type === TOKEN_TYPES.eof) break;
                            else if (propToken.type === TOKEN_TYPES.string) {
                                const key = propToken.value;
                                (0, (_invariant || _load_invariant()).default)(key, 'Expected a key');
                                const keys = [
                                    key
                                ];
                                this.next();
                                while(this.token.type === TOKEN_TYPES.comma){
                                    this.next();
                                    const keyToken = this.token;
                                    if (keyToken.type !== TOKEN_TYPES.string) this.unexpected('Expected string');
                                    const key = keyToken.value;
                                    (0, (_invariant || _load_invariant()).default)(key, 'Expected a key');
                                    keys.push(key);
                                    this.next();
                                }
                                const valToken = this.token;
                                if (valToken.type === TOKEN_TYPES.colon) {
                                    this.next();
                                    const val = this.parse(indent + 1);
                                    for(var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;){
                                        var _ref;
                                        if (_isArray) {
                                            if (_i >= _iterator.length) break;
                                            _ref = _iterator[_i++];
                                        } else {
                                            _i = _iterator.next();
                                            if (_i.done) break;
                                            _ref = _i.value;
                                        }
                                        const key = _ref;
                                        obj[key] = val;
                                    }
                                    if (indent && this.token.type !== TOKEN_TYPES.indent) break;
                                } else if (isValidPropValueToken(valToken)) {
                                    for(var _iterator2 = keys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;){
                                        var _ref2;
                                        if (_isArray2) {
                                            if (_i2 >= _iterator2.length) break;
                                            _ref2 = _iterator2[_i2++];
                                        } else {
                                            _i2 = _iterator2.next();
                                            if (_i2.done) break;
                                            _ref2 = _i2.value;
                                        }
                                        const key = _ref2;
                                        obj[key] = valToken.value;
                                    }
                                    this.next();
                                } else this.unexpected('Invalid value type');
                            } else this.unexpected(`Unknown token: ${(_util || _load_util()).default.inspect(propToken)}`);
                        }
                        return obj;
                    }
                }
                const MERGE_CONFLICT_ANCESTOR = '|||||||';
                const MERGE_CONFLICT_END = '>>>>>>>';
                const MERGE_CONFLICT_SEP = '=======';
                const MERGE_CONFLICT_START = '<<<<<<<';
                function extractConflictVariants(str) {
                    const variants = [
                        [],
                        []
                    ];
                    const lines = str.split(/\r?\n/g);
                    let skip = false;
                    while(lines.length){
                        const line = lines.shift();
                        if (line.startsWith(MERGE_CONFLICT_START)) {
                            while(lines.length){
                                const conflictLine = lines.shift();
                                if (conflictLine === MERGE_CONFLICT_SEP) {
                                    skip = false;
                                    break;
                                }
                                if (skip || conflictLine.startsWith(MERGE_CONFLICT_ANCESTOR)) {
                                    skip = true;
                                    continue;
                                }
                                variants[0].push(conflictLine);
                            }
                            while(lines.length){
                                const conflictLine = lines.shift();
                                if (conflictLine.startsWith(MERGE_CONFLICT_END)) break;
                                variants[1].push(conflictLine);
                            }
                        } else {
                            variants[0].push(line);
                            variants[1].push(line);
                        }
                    }
                    return [
                        variants[0].join('\n'),
                        variants[1].join('\n')
                    ];
                }
                function hasMergeConflicts(str) {
                    return str.includes(MERGE_CONFLICT_START) && str.includes(MERGE_CONFLICT_SEP) && str.includes(MERGE_CONFLICT_END);
                }
                function parse(str, fileLoc) {
                    const parser = new Parser(str, fileLoc);
                    parser.next();
                    return parser.parse();
                }
                function parseWithConflict(str, fileLoc) {
                    const variants = extractConflictVariants(str);
                    try {
                        return {
                            type: 'merge',
                            object: Object.assign({}, parse(variants[0], fileLoc), parse(variants[1], fileLoc))
                        };
                    } catch (err) {
                        if (err instanceof SyntaxError) return {
                            type: 'conflict',
                            object: {}
                        };
                        throw err;
                    }
                }
            },
            ,
            ,
            function(module, exports, __nested_webpack_require_146657_146676__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                var _map;
                function _load_map() {
                    return _map = _interopRequireDefault(__nested_webpack_require_146657_146676__(20));
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                const debug = __nested_webpack_require_146657_146676__(212)('yarn');
                class BlockingQueue {
                    constructor(alias, maxConcurrency = 1 / 0){
                        this.concurrencyQueue = [];
                        this.maxConcurrency = maxConcurrency;
                        this.runningCount = 0;
                        this.warnedStuck = false;
                        this.alias = alias;
                        this.first = true;
                        this.running = (0, (_map || _load_map()).default)();
                        this.queue = (0, (_map || _load_map()).default)();
                        this.stuckTick = this.stuckTick.bind(this);
                    }
                    stillActive() {
                        if (this.stuckTimer) clearTimeout(this.stuckTimer);
                        this.stuckTimer = setTimeout(this.stuckTick, 5000);
                        this.stuckTimer.unref && this.stuckTimer.unref();
                    }
                    stuckTick() {
                        if (1 === this.runningCount) {
                            this.warnedStuck = true;
                            debug(`The ${JSON.stringify(this.alias)} blocking queue may be stuck. 5 seconds without any activity with 1 worker: ${Object.keys(this.running)[0]}`);
                        }
                    }
                    push(key, factory) {
                        if (this.first) this.first = false;
                        else this.stillActive();
                        return new Promise((resolve, reject)=>{
                            const queue = this.queue[key] = this.queue[key] || [];
                            queue.push({
                                factory,
                                resolve,
                                reject
                            });
                            if (!this.running[key]) this.shift(key);
                        });
                    }
                    shift(key) {
                        if (this.running[key]) {
                            delete this.running[key];
                            this.runningCount--;
                            if (this.stuckTimer) {
                                clearTimeout(this.stuckTimer);
                                this.stuckTimer = null;
                            }
                            if (this.warnedStuck) {
                                this.warnedStuck = false;
                                debug(`${JSON.stringify(this.alias)} blocking queue finally resolved. Nothing to worry about.`);
                            }
                        }
                        const queue = this.queue[key];
                        if (!queue) return;
                        var _queue$shift = queue.shift();
                        const resolve = _queue$shift.resolve, reject = _queue$shift.reject, factory = _queue$shift.factory;
                        if (!queue.length) delete this.queue[key];
                        const next = ()=>{
                            this.shift(key);
                            this.shiftConcurrencyQueue();
                        };
                        const run = ()=>{
                            this.running[key] = true;
                            this.runningCount++;
                            factory().then(function(val) {
                                resolve(val);
                                next();
                                return null;
                            }).catch(function(err) {
                                reject(err);
                                next();
                            });
                        };
                        this.maybePushConcurrencyQueue(run);
                    }
                    maybePushConcurrencyQueue(run) {
                        if (this.runningCount < this.maxConcurrency) run();
                        else this.concurrencyQueue.push(run);
                    }
                    shiftConcurrencyQueue() {
                        if (this.runningCount < this.maxConcurrency) {
                            const fn = this.concurrencyQueue.shift();
                            if (fn) fn();
                        }
                    }
                }
                exports.default = BlockingQueue;
            },
            function(module, exports) {
                module.exports = function(exec) {
                    try {
                        return !!exec();
                    } catch (e) {
                        return true;
                    }
                };
            },
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_150304_150323__) {
                var cof = __nested_webpack_require_150304_150323__(47);
                var TAG = __nested_webpack_require_150304_150323__(13)('toStringTag');
                var ARG = 'Arguments' == cof(function() {
                    return arguments;
                }());
                var tryGet = function(it, key) {
                    try {
                        return it[key];
                    } catch (e) {}
                };
                module.exports = function(it) {
                    var O, T, B;
                    return void 0 === it ? 'Undefined' : null === it ? 'Null' : 'string' == typeof (T = tryGet(O = Object(it), TAG)) ? T : ARG ? cof(O) : 'Object' == (B = cof(O)) && 'function' == typeof O.callee ? 'Arguments' : B;
                };
            },
            function(module, exports) {
                module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
            },
            function(module, exports, __nested_webpack_require_151331_151350__) {
                var document1 = __nested_webpack_require_151331_151350__(11).document;
                module.exports = document1 && document1.documentElement;
            },
            function(module, exports, __nested_webpack_require_151514_151533__) {
                "use strict";
                var LIBRARY = __nested_webpack_require_151514_151533__(69);
                var $export = __nested_webpack_require_151514_151533__(41);
                var redefine = __nested_webpack_require_151514_151533__(197);
                var hide = __nested_webpack_require_151514_151533__(31);
                var Iterators = __nested_webpack_require_151514_151533__(35);
                var $iterCreate = __nested_webpack_require_151514_151533__(188);
                var setToStringTag = __nested_webpack_require_151514_151533__(71);
                var getPrototypeOf = __nested_webpack_require_151514_151533__(194);
                var ITERATOR = __nested_webpack_require_151514_151533__(13)('iterator');
                var BUGGY = !([].keys && 'next' in [].keys());
                var FF_ITERATOR = '@@iterator';
                var KEYS = 'keys';
                var VALUES = 'values';
                var returnThis = function() {
                    return this;
                };
                module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                    $iterCreate(Constructor, NAME, next);
                    var getMethod = function(kind) {
                        if (!BUGGY && kind in proto) return proto[kind];
                        switch(kind){
                            case KEYS:
                                return function() {
                                    return new Constructor(this, kind);
                                };
                            case VALUES:
                                return function() {
                                    return new Constructor(this, kind);
                                };
                        }
                        return function() {
                            return new Constructor(this, kind);
                        };
                    };
                    var TAG = NAME + ' Iterator';
                    var DEF_VALUES = DEFAULT == VALUES;
                    var VALUES_BUG = false;
                    var proto = Base.prototype;
                    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
                    var $default = $native || getMethod(DEFAULT);
                    var $entries = DEFAULT ? DEF_VALUES ? getMethod('entries') : $default : void 0;
                    var $anyNative = 'Array' == NAME ? proto.entries || $native : $native;
                    var methods, key, IteratorPrototype;
                    if ($anyNative) {
                        IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                            setToStringTag(IteratorPrototype, TAG, true);
                            if (!LIBRARY && 'function' != typeof IteratorPrototype[ITERATOR]) hide(IteratorPrototype, ITERATOR, returnThis);
                        }
                    }
                    if (DEF_VALUES && $native && $native.name !== VALUES) {
                        VALUES_BUG = true;
                        $default = function() {
                            return $native.call(this);
                        };
                    }
                    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) hide(proto, ITERATOR, $default);
                    Iterators[NAME] = $default;
                    Iterators[TAG] = returnThis;
                    if (DEFAULT) {
                        methods = {
                            values: DEF_VALUES ? $default : getMethod(VALUES),
                            keys: IS_SET ? $default : getMethod(KEYS),
                            entries: $entries
                        };
                        if (FORCED) {
                            for(key in methods)if (!(key in proto)) redefine(proto, key, methods[key]);
                        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                    }
                    return methods;
                };
            },
            function(module, exports) {
                module.exports = function(exec) {
                    try {
                        return {
                            e: false,
                            v: exec()
                        };
                    } catch (e) {
                        return {
                            e: true,
                            v: e
                        };
                    }
                };
            },
            function(module, exports, __nested_webpack_require_154572_154591__) {
                var anObject = __nested_webpack_require_154572_154591__(27);
                var isObject = __nested_webpack_require_154572_154591__(34);
                var newPromiseCapability = __nested_webpack_require_154572_154591__(70);
                module.exports = function(C, x) {
                    anObject(C);
                    if (isObject(x) && x.constructor === C) return x;
                    var promiseCapability = newPromiseCapability.f(C);
                    var resolve = promiseCapability.resolve;
                    resolve(x);
                    return promiseCapability.promise;
                };
            },
            function(module, exports) {
                module.exports = function(bitmap, value1) {
                    return {
                        enumerable: !(1 & bitmap),
                        configurable: !(2 & bitmap),
                        writable: !(4 & bitmap),
                        value: value1
                    };
                };
            },
            function(module, exports, __nested_webpack_require_155266_155285__) {
                var core = __nested_webpack_require_155266_155285__(23);
                var global1 = __nested_webpack_require_155266_155285__(11);
                var SHARED = '__core-js_shared__';
                var store = global1[SHARED] || (global1[SHARED] = {});
                (module.exports = function(key, value1) {
                    return store[key] || (store[key] = void 0 !== value1 ? value1 : {});
                })('versions', []).push({
                    version: core.version,
                    mode: __nested_webpack_require_155266_155285__(69) ? 'pure' : 'global',
                    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
                });
            },
            function(module, exports, __nested_webpack_require_155783_155802__) {
                var anObject = __nested_webpack_require_155783_155802__(27);
                var aFunction = __nested_webpack_require_155783_155802__(46);
                var SPECIES = __nested_webpack_require_155783_155802__(13)('species');
                module.exports = function(O, D) {
                    var C = anObject(O).constructor;
                    var S;
                    return void 0 === C || void 0 == (S = anObject(C)[SPECIES]) ? D : aFunction(S);
                };
            },
            function(module, exports, __nested_webpack_require_156215_156234__) {
                var ctx = __nested_webpack_require_156215_156234__(48);
                var invoke = __nested_webpack_require_156215_156234__(185);
                var html = __nested_webpack_require_156215_156234__(102);
                var cel = __nested_webpack_require_156215_156234__(68);
                var global1 = __nested_webpack_require_156215_156234__(11);
                var process1 = global1.process;
                var setTask = global1.setImmediate;
                var clearTask = global1.clearImmediate;
                var MessageChannel = global1.MessageChannel;
                var Dispatch = global1.Dispatch;
                var counter = 0;
                var queue = {};
                var ONREADYSTATECHANGE = 'onreadystatechange';
                var defer, channel, port;
                var run = function() {
                    var id = +this;
                    if (queue.hasOwnProperty(id)) {
                        var fn = queue[id];
                        delete queue[id];
                        fn();
                    }
                };
                var listener = function(event) {
                    run.call(event.data);
                };
                if (!setTask || !clearTask) {
                    setTask = function(fn) {
                        var args = [];
                        var i = 1;
                        while(arguments.length > i)args.push(arguments[i++]);
                        queue[++counter] = function() {
                            invoke('function' == typeof fn ? fn : Function(fn), args);
                        };
                        defer(counter);
                        return counter;
                    };
                    clearTask = function(id) {
                        delete queue[id];
                    };
                    if ('process' == __nested_webpack_require_156215_156234__(47)(process1)) defer = function(id) {
                        process1.nextTick(ctx(run, id, 1));
                    };
                    else if (Dispatch && Dispatch.now) defer = function(id) {
                        Dispatch.now(ctx(run, id, 1));
                    };
                    else if (MessageChannel) {
                        channel = new MessageChannel();
                        port = channel.port2;
                        channel.port1.onmessage = listener;
                        defer = ctx(port.postMessage, port, 1);
                    } else if (global1.addEventListener && 'function' == typeof postMessage && !global1.importScripts) {
                        defer = function(id) {
                            global1.postMessage(id + '', '*');
                        };
                        global1.addEventListener('message', listener, false);
                    } else defer = ONREADYSTATECHANGE in cel("script") ? function(id) {
                        html.appendChild(cel("script"))[ONREADYSTATECHANGE] = function() {
                            html.removeChild(this);
                            run.call(id);
                        };
                    } : function(id) {
                        setTimeout(ctx(run, id, 1), 0);
                    };
                }
                module.exports = {
                    set: setTask,
                    clear: clearTask
                };
            },
            function(module, exports, __nested_webpack_require_158802_158821__) {
                var toInteger = __nested_webpack_require_158802_158821__(73);
                var min = Math.min;
                module.exports = function(it) {
                    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
                };
            },
            function(module, exports) {
                var id = 0;
                var px = Math.random();
                module.exports = function(key) {
                    return 'Symbol('.concat(void 0 === key ? '' : key, ')_', (++id + px).toString(36));
                };
            },
            function(module, exports, __nested_webpack_require_159315_159334__) {
                exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
                exports.coerce = coerce;
                exports.disable = disable;
                exports.enable = enable;
                exports.enabled = enabled;
                exports.humanize = __nested_webpack_require_159315_159334__(229);
                exports.instances = [];
                exports.names = [];
                exports.skips = [];
                exports.formatters = {};
                function selectColor(namespace) {
                    var hash = 0, i;
                    for(i in namespace){
                        hash = (hash << 5) - hash + namespace.charCodeAt(i);
                        hash |= 0;
                    }
                    return exports.colors[Math.abs(hash) % exports.colors.length];
                }
                function createDebug(namespace) {
                    var prevTime;
                    function debug() {
                        if (!debug.enabled) return;
                        var self1 = debug;
                        var curr = +new Date();
                        var ms = curr - (prevTime || curr);
                        self1.diff = ms;
                        self1.prev = prevTime;
                        self1.curr = curr;
                        prevTime = curr;
                        var args = new Array(arguments.length);
                        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
                        args[0] = exports.coerce(args[0]);
                        if ('string' != typeof args[0]) args.unshift('%O');
                        var index = 0;
                        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
                            if ('%%' === match) return match;
                            index++;
                            var formatter = exports.formatters[format];
                            if ('function' == typeof formatter) {
                                var val = args[index];
                                match = formatter.call(self1, val);
                                args.splice(index, 1);
                                index--;
                            }
                            return match;
                        });
                        exports.formatArgs.call(self1, args);
                        var logFn = debug.log || exports.log || console.log.bind(console);
                        logFn.apply(self1, args);
                    }
                    debug.namespace = namespace;
                    debug.enabled = exports.enabled(namespace);
                    debug.useColors = exports.useColors();
                    debug.color = selectColor(namespace);
                    debug.destroy = destroy;
                    if ('function' == typeof exports.init) exports.init(debug);
                    exports.instances.push(debug);
                    return debug;
                }
                function destroy() {
                    var index = exports.instances.indexOf(this);
                    if (-1 === index) return false;
                    exports.instances.splice(index, 1);
                    return true;
                }
                function enable(namespaces) {
                    exports.save(namespaces);
                    exports.names = [];
                    exports.skips = [];
                    var i;
                    var split = ('string' == typeof namespaces ? namespaces : '').split(/[\s,]+/);
                    var len = split.length;
                    for(i = 0; i < len; i++)if (!!split[i]) {
                        namespaces = split[i].replace(/\*/g, '.*?');
                        if ('-' === namespaces[0]) exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
                        else exports.names.push(new RegExp('^' + namespaces + '$'));
                    }
                    for(i = 0; i < exports.instances.length; i++){
                        var instance = exports.instances[i];
                        instance.enabled = exports.enabled(instance.namespace);
                    }
                }
                function disable() {
                    exports.enable('');
                }
                function enabled(name) {
                    if ('*' === name[name.length - 1]) return true;
                    var i, len;
                    for(i = 0, len = exports.skips.length; i < len; i++)if (exports.skips[i].test(name)) return false;
                    for(i = 0, len = exports.names.length; i < len; i++)if (exports.names[i].test(name)) return true;
                    return false;
                }
                function coerce(val) {
                    if (val instanceof Error) return val.stack || val.message;
                    return val;
                }
            },
            ,
            function(module, exports, __nested_webpack_require_164305_164324__) {
                module.exports = realpath;
                realpath.realpath = realpath;
                realpath.sync = realpathSync;
                realpath.realpathSync = realpathSync;
                realpath.monkeypatch = monkeypatch;
                realpath.unmonkeypatch = unmonkeypatch;
                var fs = __nested_webpack_require_164305_164324__(3);
                var origRealpath = fs.realpath;
                var origRealpathSync = fs.realpathSync;
                var version = process.version;
                var ok = /^v[0-5]\./.test(version);
                var old = __nested_webpack_require_164305_164324__(217);
                function newError(er) {
                    return er && 'realpath' === er.syscall && ('ELOOP' === er.code || 'ENOMEM' === er.code || 'ENAMETOOLONG' === er.code);
                }
                function realpath(p, cache, cb) {
                    if (ok) return origRealpath(p, cache, cb);
                    if ('function' == typeof cache) {
                        cb = cache;
                        cache = null;
                    }
                    origRealpath(p, cache, function(er, result) {
                        if (newError(er)) old.realpath(p, cache, cb);
                        else cb(er, result);
                    });
                }
                function realpathSync(p, cache) {
                    if (ok) return origRealpathSync(p, cache);
                    try {
                        return origRealpathSync(p, cache);
                    } catch (er) {
                        if (newError(er)) return old.realpathSync(p, cache);
                        throw er;
                    }
                }
                function monkeypatch() {
                    fs.realpath = realpath;
                    fs.realpathSync = realpathSync;
                }
                function unmonkeypatch() {
                    fs.realpath = origRealpath;
                    fs.realpathSync = origRealpathSync;
                }
            },
            function(module, exports, __nested_webpack_require_165706_165725__) {
                exports.alphasort = alphasort;
                exports.alphasorti = alphasorti;
                exports.setopts = setopts;
                exports.ownProp = ownProp;
                exports.makeAbs = makeAbs;
                exports.finish = finish;
                exports.mark = mark;
                exports.isIgnored = isIgnored;
                exports.childrenIgnored = childrenIgnored;
                function ownProp(obj, field) {
                    return Object.prototype.hasOwnProperty.call(obj, field);
                }
                var path = __nested_webpack_require_165706_165725__(0);
                var minimatch = __nested_webpack_require_165706_165725__(60);
                var isAbsolute = __nested_webpack_require_165706_165725__(76);
                var Minimatch = minimatch.Minimatch;
                function alphasorti(a, b) {
                    return a.toLowerCase().localeCompare(b.toLowerCase());
                }
                function alphasort(a, b) {
                    return a.localeCompare(b);
                }
                function setupIgnores(self1, options) {
                    self1.ignore = options.ignore || [];
                    if (!Array.isArray(self1.ignore)) self1.ignore = [
                        self1.ignore
                    ];
                    if (self1.ignore.length) self1.ignore = self1.ignore.map(ignoreMap);
                }
                function ignoreMap(pattern) {
                    var gmatcher = null;
                    if ('/**' === pattern.slice(-3)) {
                        var gpattern = pattern.replace(/(\/\*\*)+$/, '');
                        gmatcher = new Minimatch(gpattern, {
                            dot: true
                        });
                    }
                    return {
                        matcher: new Minimatch(pattern, {
                            dot: true
                        }),
                        gmatcher: gmatcher
                    };
                }
                function setopts(self1, pattern, options) {
                    if (!options) options = {};
                    if (options.matchBase && -1 === pattern.indexOf("/")) {
                        if (options.noglobstar) throw new Error("base matching requires globstar");
                        pattern = "**/" + pattern;
                    }
                    self1.silent = !!options.silent;
                    self1.pattern = pattern;
                    self1.strict = false !== options.strict;
                    self1.realpath = !!options.realpath;
                    self1.realpathCache = options.realpathCache || Object.create(null);
                    self1.follow = !!options.follow;
                    self1.dot = !!options.dot;
                    self1.mark = !!options.mark;
                    self1.nodir = !!options.nodir;
                    if (self1.nodir) self1.mark = true;
                    self1.sync = !!options.sync;
                    self1.nounique = !!options.nounique;
                    self1.nonull = !!options.nonull;
                    self1.nosort = !!options.nosort;
                    self1.nocase = !!options.nocase;
                    self1.stat = !!options.stat;
                    self1.noprocess = !!options.noprocess;
                    self1.absolute = !!options.absolute;
                    self1.maxLength = options.maxLength || 1 / 0;
                    self1.cache = options.cache || Object.create(null);
                    self1.statCache = options.statCache || Object.create(null);
                    self1.symlinks = options.symlinks || Object.create(null);
                    setupIgnores(self1, options);
                    self1.changedCwd = false;
                    var cwd = process.cwd();
                    if (ownProp(options, "cwd")) {
                        self1.cwd = path.resolve(options.cwd);
                        self1.changedCwd = self1.cwd !== cwd;
                    } else self1.cwd = cwd;
                    self1.root = options.root || path.resolve(self1.cwd, "/");
                    self1.root = path.resolve(self1.root);
                    if ("win32" === process.platform) self1.root = self1.root.replace(/\\/g, "/");
                    self1.cwdAbs = isAbsolute(self1.cwd) ? self1.cwd : makeAbs(self1, self1.cwd);
                    if ("win32" === process.platform) self1.cwdAbs = self1.cwdAbs.replace(/\\/g, "/");
                    self1.nomount = !!options.nomount;
                    options.nonegate = true;
                    options.nocomment = true;
                    self1.minimatch = new Minimatch(pattern, options);
                    self1.options = self1.minimatch.options;
                }
                function finish(self1) {
                    var nou = self1.nounique;
                    var all = nou ? [] : Object.create(null);
                    for(var i = 0, l = self1.matches.length; i < l; i++){
                        var matches = self1.matches[i];
                        if (matches && 0 !== Object.keys(matches).length) {
                            var m = Object.keys(matches);
                            if (nou) all.push.apply(all, m);
                            else m.forEach(function(m) {
                                all[m] = true;
                            });
                        } else if (self1.nonull) {
                            var literal = self1.minimatch.globSet[i];
                            if (nou) all.push(literal);
                            else all[literal] = true;
                        }
                    }
                    if (!nou) all = Object.keys(all);
                    if (!self1.nosort) all = all.sort(self1.nocase ? alphasorti : alphasort);
                    if (self1.mark) {
                        for(var i = 0; i < all.length; i++)all[i] = self1._mark(all[i]);
                        if (self1.nodir) all = all.filter(function(e) {
                            var notDir = !/\/$/.test(e);
                            var c = self1.cache[e] || self1.cache[makeAbs(self1, e)];
                            if (notDir && c) notDir = 'DIR' !== c && !Array.isArray(c);
                            return notDir;
                        });
                    }
                    if (self1.ignore.length) all = all.filter(function(m) {
                        return !isIgnored(self1, m);
                    });
                    self1.found = all;
                }
                function mark(self1, p) {
                    var abs = makeAbs(self1, p);
                    var c = self1.cache[abs];
                    var m = p;
                    if (c) {
                        var isDir = 'DIR' === c || Array.isArray(c);
                        var slash = '/' === p.slice(-1);
                        if (isDir && !slash) m += '/';
                        else if (!isDir && slash) m = m.slice(0, -1);
                        if (m !== p) {
                            var mabs = makeAbs(self1, m);
                            self1.statCache[mabs] = self1.statCache[abs];
                            self1.cache[mabs] = self1.cache[abs];
                        }
                    }
                    return m;
                }
                function makeAbs(self1, f) {
                    var abs = f;
                    abs = '/' === f.charAt(0) ? path.join(self1.root, f) : isAbsolute(f) || '' === f ? f : self1.changedCwd ? path.resolve(self1.cwd, f) : path.resolve(f);
                    if ('win32' === process.platform) abs = abs.replace(/\\/g, '/');
                    return abs;
                }
                function isIgnored(self1, path) {
                    if (!self1.ignore.length) return false;
                    return self1.ignore.some(function(item) {
                        return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path));
                    });
                }
                function childrenIgnored(self1, path) {
                    if (!self1.ignore.length) return false;
                    return self1.ignore.some(function(item) {
                        return !!(item.gmatcher && item.gmatcher.match(path));
                    });
                }
            },
            function(module, exports, __nested_webpack_require_171958_171977__) {
                var path = __nested_webpack_require_171958_171977__(0);
                var fs = __nested_webpack_require_171958_171977__(3);
                var _0777 = parseInt('0777', 8);
                module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;
                function mkdirP(p, opts, f, made) {
                    if ('function' == typeof opts) {
                        f = opts;
                        opts = {};
                    } else if (!opts || 'object' != typeof opts) opts = {
                        mode: opts
                    };
                    var mode = opts.mode;
                    var xfs = opts.fs || fs;
                    if (void 0 === mode) mode = _0777 & ~process.umask();
                    if (!made) made = null;
                    var cb = f || function() {};
                    p = path.resolve(p);
                    xfs.mkdir(p, mode, function(er) {
                        if (!er) {
                            made = made || p;
                            return cb(null, made);
                        }
                        switch(er.code){
                            case 'ENOENT':
                                mkdirP(path.dirname(p), opts, function(er, made) {
                                    if (er) cb(er, made);
                                    else mkdirP(p, opts, cb, made);
                                });
                                break;
                            default:
                                xfs.stat(p, function(er2, stat) {
                                    er2 || !stat.isDirectory() ? cb(er, made) : cb(null, made);
                                });
                                break;
                        }
                    });
                }
                mkdirP.sync = function sync(p, opts, made) {
                    if (!opts || 'object' != typeof opts) opts = {
                        mode: opts
                    };
                    var mode = opts.mode;
                    var xfs = opts.fs || fs;
                    if (void 0 === mode) mode = _0777 & ~process.umask();
                    if (!made) made = null;
                    p = path.resolve(p);
                    try {
                        xfs.mkdirSync(p, mode);
                        made = made || p;
                    } catch (err0) {
                        switch(err0.code){
                            case 'ENOENT':
                                made = sync(path.dirname(p), opts, made);
                                sync(p, opts, made);
                                break;
                            default:
                                var stat;
                                try {
                                    stat = xfs.statSync(p);
                                } catch (err1) {
                                    throw err0;
                                }
                                if (!stat.isDirectory()) throw err0;
                                break;
                        }
                    }
                    return made;
                };
            },
            ,
            ,
            ,
            ,
            ,
            function(module, exports, __webpack_require__) {
                "use strict";
                module.exports = (x)=>{
                    if ('string' != typeof x) throw new TypeError('Expected a string, got ' + typeof x);
                    if (0xFEFF === x.charCodeAt(0)) return x.slice(1);
                    return x;
                };
            },
            function(module, exports) {
                module.exports = wrappy;
                function wrappy(fn, cb) {
                    if (fn && cb) return wrappy(fn)(cb);
                    if ('function' != typeof fn) throw new TypeError('need wrapper function');
                    Object.keys(fn).forEach(function(k) {
                        wrapper[k] = fn[k];
                    });
                    return wrapper;
                    function wrapper() {
                        var args = new Array(arguments.length);
                        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
                        var ret = fn.apply(this, args);
                        var cb = args[args.length - 1];
                        if ('function' == typeof ret && ret !== cb) Object.keys(cb).forEach(function(k) {
                            ret[k] = cb[k];
                        });
                        return ret;
                    }
                }
            },
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_176175_176194__) {
                var cof = __nested_webpack_require_176175_176194__(47);
                module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
                    return 'String' == cof(it) ? it.split('') : Object(it);
                };
            },
            function(module, exports, __nested_webpack_require_176549_176568__) {
                var $keys = __nested_webpack_require_176549_176568__(195);
                var enumBugKeys = __nested_webpack_require_176549_176568__(101);
                module.exports = Object.keys || function(O) {
                    return $keys(O, enumBugKeys);
                };
            },
            function(module, exports, __nested_webpack_require_176837_176856__) {
                var defined = __nested_webpack_require_176837_176856__(67);
                module.exports = function(it) {
                    return Object(defined(it));
                };
            },
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            function(module, exports) {
                module.exports = {
                    name: "yarn",
                    installationMethod: "unknown",
                    version: "1.10.0-0",
                    license: "BSD-2-Clause",
                    preferGlobal: true,
                    description: "📦🐈 Fast, reliable, and secure dependency management.",
                    dependencies: {
                        "@zkochan/cmd-shim": "^2.2.4",
                        "babel-runtime": "^6.26.0",
                        bytes: "^3.0.0",
                        camelcase: "^4.0.0",
                        chalk: "^2.1.0",
                        commander: "^2.9.0",
                        death: "^1.0.0",
                        debug: "^3.0.0",
                        "deep-equal": "^1.0.1",
                        "detect-indent": "^5.0.0",
                        dnscache: "^1.0.1",
                        glob: "^7.1.1",
                        "gunzip-maybe": "^1.4.0",
                        "hash-for-dep": "^1.2.3",
                        "imports-loader": "^0.8.0",
                        ini: "^1.3.4",
                        inquirer: "^3.0.1",
                        invariant: "^2.2.0",
                        "is-builtin-module": "^2.0.0",
                        "is-ci": "^1.0.10",
                        "is-webpack-bundle": "^1.0.0",
                        leven: "^2.0.0",
                        "loud-rejection": "^1.2.0",
                        micromatch: "^2.3.11",
                        mkdirp: "^0.5.1",
                        "node-emoji": "^1.6.1",
                        "normalize-url": "^2.0.0",
                        "npm-logical-tree": "^1.2.1",
                        "object-path": "^0.11.2",
                        "proper-lockfile": "^2.0.0",
                        puka: "^1.0.0",
                        read: "^1.0.7",
                        request: "^2.87.0",
                        "request-capture-har": "^1.2.2",
                        rimraf: "^2.5.0",
                        semver: "^5.1.0",
                        ssri: "^5.3.0",
                        "strip-ansi": "^4.0.0",
                        "strip-bom": "^3.0.0",
                        "tar-fs": "^1.16.0",
                        "tar-stream": "^1.6.1",
                        uuid: "^3.0.1",
                        "v8-compile-cache": "^2.0.0",
                        "validate-npm-package-license": "^3.0.3",
                        yn: "^2.0.0"
                    },
                    devDependencies: {
                        "babel-core": "^6.26.0",
                        "babel-eslint": "^7.2.3",
                        "babel-loader": "^6.2.5",
                        "babel-plugin-array-includes": "^2.0.3",
                        "babel-plugin-transform-builtin-extend": "^1.1.2",
                        "babel-plugin-transform-inline-imports-commonjs": "^1.0.0",
                        "babel-plugin-transform-runtime": "^6.4.3",
                        "babel-preset-env": "^1.6.0",
                        "babel-preset-flow": "^6.23.0",
                        "babel-preset-stage-0": "^6.0.0",
                        babylon: "^6.5.0",
                        commitizen: "^2.9.6",
                        "cz-conventional-changelog": "^2.0.0",
                        eslint: "^4.3.0",
                        "eslint-config-fb-strict": "^22.0.0",
                        "eslint-plugin-babel": "^5.0.0",
                        "eslint-plugin-flowtype": "^2.35.0",
                        "eslint-plugin-jasmine": "^2.6.2",
                        "eslint-plugin-jest": "^21.0.0",
                        "eslint-plugin-jsx-a11y": "^6.0.2",
                        "eslint-plugin-prefer-object-spread": "^1.2.1",
                        "eslint-plugin-prettier": "^2.1.2",
                        "eslint-plugin-react": "^7.1.0",
                        "eslint-plugin-relay": "^0.0.24",
                        "eslint-plugin-yarn-internal": "file:scripts/eslint-rules",
                        execa: "^0.10.0",
                        "flow-bin": "^0.66.0",
                        "git-release-notes": "^3.0.0",
                        gulp: "^3.9.0",
                        "gulp-babel": "^7.0.0",
                        "gulp-if": "^2.0.1",
                        "gulp-newer": "^1.0.0",
                        "gulp-plumber": "^1.0.1",
                        "gulp-sourcemaps": "^2.2.0",
                        "gulp-util": "^3.0.7",
                        "gulp-watch": "^5.0.0",
                        jest: "^22.4.4",
                        jsinspect: "^0.12.6",
                        minimatch: "^3.0.4",
                        "mock-stdin": "^0.3.0",
                        prettier: "^1.5.2",
                        temp: "^0.8.3",
                        webpack: "^2.1.0-beta.25",
                        yargs: "^6.3.0"
                    },
                    resolutions: {
                        sshpk: "^1.14.2"
                    },
                    engines: {
                        node: ">=4.0.0"
                    },
                    repository: "yarnpkg/yarn",
                    bin: {
                        yarn: "./bin/yarn.js",
                        yarnpkg: "./bin/yarn.js"
                    },
                    scripts: {
                        build: "gulp build",
                        "build-bundle": "node ./scripts/build-webpack.js",
                        "build-chocolatey": "powershell ./scripts/build-chocolatey.ps1",
                        "build-deb": "./scripts/build-deb.sh",
                        "build-dist": "bash ./scripts/build-dist.sh",
                        "build-win-installer": "scripts\\build-windows-installer.bat",
                        changelog: "git-release-notes $(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^)..$(git describe --tags --abbrev=0) scripts/changelog.md",
                        "dupe-check": "yarn jsinspect ./src",
                        lint: "eslint . && flow check",
                        "pkg-tests": "yarn --cwd packages/pkg-tests jest yarn.test.js",
                        prettier: "eslint src __tests__ --fix",
                        "release-branch": "./scripts/release-branch.sh",
                        test: "yarn lint && yarn test-only",
                        "test-only": "node --max_old_space_size=4096 node_modules/jest/bin/jest.js --verbose",
                        "test-only-debug": "node --inspect-brk --max_old_space_size=4096 node_modules/jest/bin/jest.js --runInBand --verbose",
                        "test-coverage": "node --max_old_space_size=4096 node_modules/jest/bin/jest.js --coverage --verbose",
                        watch: "gulp watch",
                        commit: "git-cz"
                    },
                    jest: {
                        collectCoverageFrom: [
                            "src/**/*.js"
                        ],
                        testEnvironment: "node",
                        modulePathIgnorePatterns: [
                            "__tests__/fixtures/",
                            "packages/pkg-tests/pkg-tests-fixtures",
                            "dist/"
                        ],
                        testPathIgnorePatterns: [
                            "__tests__/(fixtures|__mocks__)/",
                            "updates/",
                            "_(temp|mock|install|init|helpers).js$",
                            "packages/pkg-tests"
                        ]
                    },
                    config: {
                        commitizen: {
                            path: "./node_modules/cz-conventional-changelog"
                        }
                    }
                };
            },
            ,
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_181311_181330__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = stringify;
                var _misc;
                function _load_misc() {
                    return _misc = __nested_webpack_require_181311_181330__(12);
                }
                var _constants;
                function _load_constants() {
                    return _constants = __nested_webpack_require_181311_181330__(6);
                }
                var _package;
                function _load_package() {
                    return _package = __nested_webpack_require_181311_181330__(145);
                }
                const NODE_VERSION = process.version;
                function shouldWrapKey(str) {
                    return 0 === str.indexOf('true') || 0 === str.indexOf('false') || /[:\s\n\\",\[\]]/g.test(str) || /^[0-9]/g.test(str) || !/^[a-zA-Z]/g.test(str);
                }
                function maybeWrap(str) {
                    if ('boolean' == typeof str || 'number' == typeof str || shouldWrapKey(str)) return JSON.stringify(str);
                    return str;
                }
                const priorities = {
                    name: 1,
                    version: 2,
                    uid: 3,
                    resolved: 4,
                    integrity: 5,
                    registry: 6,
                    dependencies: 7
                };
                function priorityThenAlphaSort(a, b) {
                    if (priorities[a] || priorities[b]) return (priorities[a] || 100) > (priorities[b] || 100) ? 1 : -1;
                    return (0, (_misc || _load_misc()).sortAlpha)(a, b);
                }
                function _stringify(obj, options) {
                    if ('object' != typeof obj) throw new TypeError();
                    const indent = options.indent;
                    const lines = [];
                    const keys = Object.keys(obj).sort(priorityThenAlphaSort);
                    let addedKeys = [];
                    for(let i = 0; i < keys.length; i++){
                        const key = keys[i];
                        const val = obj[key];
                        if (null == val || addedKeys.indexOf(key) >= 0) continue;
                        const valKeys = [
                            key
                        ];
                        if ('object' == typeof val) for(let j = i + 1; j < keys.length; j++){
                            const key = keys[j];
                            if (val === obj[key]) valKeys.push(key);
                        }
                        const keyLine = valKeys.sort((_misc || _load_misc()).sortAlpha).map(maybeWrap).join(', ');
                        if ('string' == typeof val || 'boolean' == typeof val || 'number' == typeof val) lines.push(`${keyLine} ${maybeWrap(val)}`);
                        else if ('object' == typeof val) lines.push(`${keyLine}:\n${_stringify(val, {
                            indent: indent + '  '
                        })}` + (options.topLevel ? '\n' : ''));
                        else throw new TypeError();
                        addedKeys = addedKeys.concat(valKeys);
                    }
                    return indent + lines.join(`\n${indent}`);
                }
                function stringify(obj, noHeader, enableVersions) {
                    const val = _stringify(obj, {
                        indent: '',
                        topLevel: true
                    });
                    if (noHeader) return val;
                    const lines = [];
                    lines.push('# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.');
                    lines.push(`# yarn lockfile v${(_constants || _load_constants()).LOCKFILE_VERSION}`);
                    if (enableVersions) {
                        lines.push(`# yarn v${(_package || _load_package()).version}`);
                        lines.push(`# node ${NODE_VERSION}`);
                    }
                    lines.push('\n');
                    lines.push(val);
                    return lines.join('\n');
                }
            },
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_184744_184763__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.fileDatesEqual = exports.copyFile = exports.unlink = void 0;
                var _asyncToGenerator2;
                function _load_asyncToGenerator() {
                    return _asyncToGenerator2 = _interopRequireDefault(__nested_webpack_require_184744_184763__(1));
                }
                let fixTimes = (()=>{
                    var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(fd, dest, data) {
                        const doOpen = void 0 === fd;
                        let openfd = fd ? fd : -1;
                        if (void 0 === disableTimestampCorrection) {
                            const destStat = yield lstat(dest);
                            disableTimestampCorrection = fileDatesEqual(destStat.mtime, data.mtime);
                        }
                        if (disableTimestampCorrection) return;
                        if (doOpen) try {
                            openfd = yield open(dest, 'a', data.mode);
                        } catch (er) {
                            try {
                                openfd = yield open(dest, 'r', data.mode);
                            } catch (err) {
                                return;
                            }
                        }
                        try {
                            if (openfd) yield futimes(openfd, data.atime, data.mtime);
                        } catch (er) {} finally{
                            if (doOpen && openfd) yield close(openfd);
                        }
                    });
                    return function(_x7, _x8, _x9) {
                        return _ref3.apply(this, arguments);
                    };
                })();
                var _fs;
                function _load_fs() {
                    return _fs = _interopRequireDefault(__nested_webpack_require_184744_184763__(3));
                }
                var _promise;
                function _load_promise() {
                    return _promise = __nested_webpack_require_184744_184763__(40);
                }
                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    };
                }
                let disableTimestampCorrection;
                const readFileBuffer = (0, (_promise || _load_promise()).promisify)((_fs || _load_fs()).default.readFile);
                const close = (0, (_promise || _load_promise()).promisify)((_fs || _load_fs()).default.close);
                const lstat = (0, (_promise || _load_promise()).promisify)((_fs || _load_fs()).default.lstat);
                const open = (0, (_promise || _load_promise()).promisify)((_fs || _load_fs()).default.open);
                const futimes = (0, (_promise || _load_promise()).promisify)((_fs || _load_fs()).default.futimes);
                const write = (0, (_promise || _load_promise()).promisify)((_fs || _load_fs()).default.write);
                const unlink = exports.unlink = (0, (_promise || _load_promise()).promisify)(__nested_webpack_require_184744_184763__(233));
                exports.copyFile = (()=>{
                    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(data, cleanup) {
                        try {
                            yield unlink(data.dest);
                            yield copyFilePoly(data.src, data.dest, 0, data);
                        } finally{
                            if (cleanup) cleanup();
                        }
                    });
                    return function(_x, _x2) {
                        return _ref.apply(this, arguments);
                    };
                })();
                const copyFilePoly = (src, dest, flags, data)=>{
                    if ((_fs || _load_fs()).default.copyFile) return new Promise((resolve, reject)=>(_fs || _load_fs()).default.copyFile(src, dest, flags, (err)=>{
                            if (err) reject(err);
                            else fixTimes(void 0, dest, data).then(()=>resolve()).catch((ex)=>reject(ex));
                        }));
                    return copyWithBuffer(src, dest, flags, data);
                };
                const copyWithBuffer = (()=>{
                    var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)(function*(src, dest, flags, data) {
                        const fd = yield open(dest, 'w', data.mode);
                        try {
                            const buffer = yield readFileBuffer(src);
                            yield write(fd, buffer, 0, buffer.length);
                            yield fixTimes(fd, dest, data);
                        } finally{
                            yield close(fd);
                        }
                    });
                    return function(_x3, _x4, _x5, _x6) {
                        return _ref2.apply(this, arguments);
                    };
                })();
                const fileDatesEqual = exports.fileDatesEqual = (a, b)=>{
                    const aTime = a.getTime();
                    const bTime = b.getTime();
                    if ('win32' !== process.platform) return aTime === bTime;
                    if (Math.abs(aTime - bTime) <= 1) return true;
                    const aTimeSec = Math.floor(aTime / 1000);
                    const bTimeSec = Math.floor(bTime / 1000);
                    if (aTime - 1000 * aTimeSec === 0 || bTime - 1000 * bTimeSec === 0) return aTimeSec === bTimeSec;
                    return aTime === bTime;
                };
            },
            ,
            ,
            ,
            ,
            function(module, exports, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.isFakeRoot = isFakeRoot;
                exports.isRootUser = isRootUser;
                function getUid() {
                    if ('win32' !== process.platform && process.getuid) return process.getuid();
                    return null;
                }
                exports.default = isRootUser(getUid()) && !isFakeRoot();
                function isFakeRoot() {
                    return Boolean(process.env.FAKEROOTKEY);
                }
                function isRootUser(uid) {
                    return 0 === uid;
                }
            },
            ,
            function(module, exports, __nested_webpack_require_191783_191802__) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.getDataDir = getDataDir;
                exports.getCacheDir = getCacheDir;
                exports.getConfigDir = getConfigDir;
                const path = __nested_webpack_require_191783_191802__(0);
                const userHome = __nested_webpack_require_191783_191802__(45).default;
                const FALLBACK_CONFIG_DIR = path.join(userHome, '.config', 'yarn');
                const FALLBACK_CACHE_DIR = path.join(userHome, '.cache', 'yarn');
                function getDataDir() {
                    if ('win32' === process.platform) {
                        const WIN32_APPDATA_DIR = getLocalAppDataDir();
                        return null == WIN32_APPDATA_DIR ? FALLBACK_CONFIG_DIR : path.join(WIN32_APPDATA_DIR, 'Data');
                    }
                    if (process.env.XDG_DATA_HOME) return path.join(process.env.XDG_DATA_HOME, 'yarn');
                    return FALLBACK_CONFIG_DIR;
                }
                function getCacheDir() {
                    if ('win32' === process.platform) return path.join(getLocalAppDataDir() || path.join(userHome, 'AppData', 'Local', 'Yarn'), 'Cache');
                    if (process.env.XDG_CACHE_HOME) return path.join(process.env.XDG_CACHE_HOME, 'yarn');
                    if ('darwin' === process.platform) return path.join(userHome, 'Library', 'Caches', 'Yarn');
                    return FALLBACK_CACHE_DIR;
                }
                function getConfigDir() {
                    if ('win32' === process.platform) {
                        const WIN32_APPDATA_DIR = getLocalAppDataDir();
                        return null == WIN32_APPDATA_DIR ? FALLBACK_CONFIG_DIR : path.join(WIN32_APPDATA_DIR, 'Config');
                    }
                    if (process.env.XDG_CONFIG_HOME) return path.join(process.env.XDG_CONFIG_HOME, 'yarn');
                    return FALLBACK_CONFIG_DIR;
                }
                function getLocalAppDataDir() {
                    return process.env.LOCALAPPDATA ? path.join(process.env.LOCALAPPDATA, 'Yarn') : null;
                }
            },
            ,
            function(module, exports, __nested_webpack_require_194037_194056__) {
                module.exports = {
                    default: __nested_webpack_require_194037_194056__(179),
                    __esModule: true
                };
            },
            function(module, exports, __webpack_require__) {
                "use strict";
                module.exports = balanced;
                function balanced(a, b, str) {
                    if (a instanceof RegExp) a = maybeMatch(a, str);
                    if (b instanceof RegExp) b = maybeMatch(b, str);
                    var r = range(a, b, str);
                    return r && {
                        start: r[0],
                        end: r[1],
                        pre: str.slice(0, r[0]),
                        body: str.slice(r[0] + a.length, r[1]),
                        post: str.slice(r[1] + b.length)
                    };
                }
                function maybeMatch(reg, str) {
                    var m = str.match(reg);
                    return m ? m[0] : null;
                }
                balanced.range = range;
                function range(a, b, str) {
                    var begs, beg, left, right, result;
                    var ai = str.indexOf(a);
                    var bi = str.indexOf(b, ai + 1);
                    var i = ai;
                    if (ai >= 0 && bi > 0) {
                        begs = [];
                        left = str.length;
                        while(i >= 0 && !result){
                            if (i == ai) {
                                begs.push(i);
                                ai = str.indexOf(a, i + 1);
                            } else if (1 == begs.length) result = [
                                begs.pop(),
                                bi
                            ];
                            else {
                                beg = begs.pop();
                                if (beg < left) {
                                    left = beg;
                                    right = bi;
                                }
                                bi = str.indexOf(b, i + 1);
                            }
                            i = ai < bi && ai >= 0 ? ai : bi;
                        }
                        if (begs.length) result = [
                            left,
                            right
                        ];
                    }
                    return result;
                }
            },
            function(module, exports, __nested_webpack_require_195445_195464__) {
                var concatMap = __nested_webpack_require_195445_195464__(178);
                var balanced = __nested_webpack_require_195445_195464__(174);
                module.exports = expandTop;
                var escSlash = '\0SLASH' + Math.random() + '\0';
                var escOpen = '\0OPEN' + Math.random() + '\0';
                var escClose = '\0CLOSE' + Math.random() + '\0';
                var escComma = '\0COMMA' + Math.random() + '\0';
                var escPeriod = '\0PERIOD' + Math.random() + '\0';
                function numeric(str) {
                    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
                }
                function escapeBraces(str) {
                    return str.split('\\\\').join(escSlash).split('\\{').join(escOpen).split('\\}').join(escClose).split('\\,').join(escComma).split('\\.').join(escPeriod);
                }
                function unescapeBraces(str) {
                    return str.split(escSlash).join('\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');
                }
                function parseCommaParts(str) {
                    if (!str) return [
                        ''
                    ];
                    var parts = [];
                    var m = balanced('{', '}', str);
                    if (!m) return str.split(',');
                    var pre = m.pre;
                    var body = m.body;
                    var post = m.post;
                    var p = pre.split(',');
                    p[p.length - 1] += '{' + body + '}';
                    var postParts = parseCommaParts(post);
                    if (post.length) {
                        p[p.length - 1] += postParts.shift();
                        p.push.apply(p, postParts);
                    }
                    parts.push.apply(parts, p);
                    return parts;
                }
                function expandTop(str) {
                    if (!str) return [];
                    if ('{}' === str.substr(0, 2)) str = '\\{\\}' + str.substr(2);
                    return expand(escapeBraces(str), true).map(unescapeBraces);
                }
                function embrace(str) {
                    return '{' + str + '}';
                }
                function isPadded(el) {
                    return /^-?0\d/.test(el);
                }
                function lte(i, y) {
                    return i <= y;
                }
                function gte(i, y) {
                    return i >= y;
                }
                function expand(str, isTop) {
                    var expansions = [];
                    var m = balanced('{', '}', str);
                    if (!m || /\$$/.test(m.pre)) return [
                        str
                    ];
                    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
                    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
                    var isSequence = isNumericSequence || isAlphaSequence;
                    var isOptions = m.body.indexOf(',') >= 0;
                    if (!isSequence && !isOptions) {
                        if (m.post.match(/,.*\}/)) {
                            str = m.pre + '{' + m.body + escClose + m.post;
                            return expand(str);
                        }
                        return [
                            str
                        ];
                    }
                    var n;
                    if (isSequence) n = m.body.split(/\.\./);
                    else {
                        n = parseCommaParts(m.body);
                        if (1 === n.length) {
                            n = expand(n[0], false).map(embrace);
                            if (1 === n.length) {
                                var post = m.post.length ? expand(m.post, false) : [
                                    ''
                                ];
                                return post.map(function(p) {
                                    return m.pre + n[0] + p;
                                });
                            }
                        }
                    }
                    var pre = m.pre;
                    var post = m.post.length ? expand(m.post, false) : [
                        ''
                    ];
                    var N;
                    if (isSequence) {
                        var x = numeric(n[0]);
                        var y = numeric(n[1]);
                        var width = Math.max(n[0].length, n[1].length);
                        var incr = 3 == n.length ? Math.abs(numeric(n[2])) : 1;
                        var test = lte;
                        var reverse = y < x;
                        if (reverse) {
                            incr *= -1;
                            test = gte;
                        }
                        var pad = n.some(isPadded);
                        N = [];
                        for(var i = x; test(i, y); i += incr){
                            var c;
                            if (isAlphaSequence) {
                                c = String.fromCharCode(i);
                                if ('\\' === c) c = '';
                            } else {
                                c = String(i);
                                if (pad) {
                                    var need = width - c.length;
                                    if (need > 0) {
                                        var z = new Array(need + 1).join('0');
                                        c = i < 0 ? '-' + z + c.slice(1) : z + c;
                                    }
                                }
                            }
                            N.push(c);
                        }
                    } else N = concatMap(n, function(el) {
                        return expand(el, false);
                    });
                    for(var j = 0; j < N.length; j++)for(var k = 0; k < post.length; k++){
                        var expansion = pre + N[j] + post[k];
                        if (!isTop || isSequence || expansion) expansions.push(expansion);
                    }
                    return expansions;
                }
            },
            function(module, exports, __webpack_require__) {
                "use strict";
                function preserveCamelCase(str) {
                    let isLastCharLower = false;
                    let isLastCharUpper = false;
                    let isLastLastCharUpper = false;
                    for(let i = 0; i < str.length; i++){
                        const c = str[i];
                        if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
                            str = str.substr(0, i) + '-' + str.substr(i);
                            isLastCharLower = false;
                            isLastLastCharUpper = isLastCharUpper;
                            isLastCharUpper = true;
                            i++;
                        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {
                            str = str.substr(0, i - 1) + '-' + str.substr(i - 1);
                            isLastLastCharUpper = isLastCharUpper;
                            isLastCharUpper = false;
                            isLastCharLower = true;
                        } else {
                            isLastCharLower = c.toLowerCase() === c;
                            isLastLastCharUpper = isLastCharUpper;
                            isLastCharUpper = c.toUpperCase() === c;
                        }
                    }
                    return str;
                }
                module.exports = function(str) {
                    str = arguments.length > 1 ? Array.from(arguments).map((x)=>x.trim()).filter((x)=>x.length).join('-') : str.trim();
                    if (0 === str.length) return '';
                    if (1 === str.length) return str.toLowerCase();
                    if (/^[a-z0-9]+$/.test(str)) return str;
                    const hasUpperCase = str !== str.toLowerCase();
                    if (hasUpperCase) str = preserveCamelCase(str);
                    return str.replace(/^[_.\- ]+/, '').toLowerCase().replace(/[_.\- ]+(\w|$)/g, (m, p1)=>p1.toUpperCase());
                };
            },
            ,
            function(module, exports) {
                module.exports = function(xs, fn) {
                    var res = [];
                    for(var i = 0; i < xs.length; i++){
                        var x = fn(xs[i], i);
                        if (isArray(x)) res.push.apply(res, x);
                        else res.push(x);
                    }
                    return res;
                };
                var isArray = Array.isArray || function(xs) {
                    return '[object Array]' === Object.prototype.toString.call(xs);
                };
            },
            function(module, exports, __nested_webpack_require_202231_202250__) {
                __nested_webpack_require_202231_202250__(205);
                __nested_webpack_require_202231_202250__(207);
                __nested_webpack_require_202231_202250__(210);
                __nested_webpack_require_202231_202250__(206);
                __nested_webpack_require_202231_202250__(208);
                __nested_webpack_require_202231_202250__(209);
                module.exports = __nested_webpack_require_202231_202250__(23).Promise;
            },
            function(module, exports) {
                module.exports = function() {};
            },
            function(module, exports) {
                module.exports = function(it, Constructor, name, forbiddenField) {
                    if (!(it instanceof Constructor) || void 0 !== forbiddenField && forbiddenField in it) throw TypeError(name + ': incorrect invocation!');
                    return it;
                };
            },
            function(module, exports, __nested_webpack_require_202915_202934__) {
                var toIObject = __nested_webpack_require_202915_202934__(74);
                var toLength = __nested_webpack_require_202915_202934__(110);
                var toAbsoluteIndex = __nested_webpack_require_202915_202934__(200);
                module.exports = function(IS_INCLUDES) {
                    return function($this, el, fromIndex) {
                        var O = toIObject($this);
                        var length = toLength(O.length);
                        var index = toAbsoluteIndex(fromIndex, length);
                        var value1;
                        if (IS_INCLUDES && el != el) while(length > index){
                            value1 = O[index++];
                            if (value1 != value1) return true;
                        }
                        else for(; length > index; index++)if (IS_INCLUDES || index in O) {
                            if (O[index] === el) return IS_INCLUDES || index || 0;
                        }
                        return !IS_INCLUDES && -1;
                    };
                };
            },
            function(module, exports, __nested_webpack_require_203911_203930__) {
                var ctx = __nested_webpack_require_203911_203930__(48);
                var call = __nested_webpack_require_203911_203930__(187);
                var isArrayIter = __nested_webpack_require_203911_203930__(186);
                var anObject = __nested_webpack_require_203911_203930__(27);
                var toLength = __nested_webpack_require_203911_203930__(110);
                var getIterFn = __nested_webpack_require_203911_203930__(203);
                var BREAK = {};
                var RETURN = {};
                var exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
                    var iterFn = ITERATOR ? function() {
                        return iterable;
                    } : getIterFn(iterable);
                    var f = ctx(fn, that, entries ? 2 : 1);
                    var index = 0;
                    var length, step, iterator, result;
                    if ('function' != typeof iterFn) throw TypeError(iterable + ' is not iterable!');
                    if (isArrayIter(iterFn)) for(length = toLength(iterable.length); length > index; index++){
                        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                        if (result === BREAK || result === RETURN) return result;
                    }
                    else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done;){
                        result = call(iterator, f, step.value, entries);
                        if (result === BREAK || result === RETURN) return result;
                    }
                };
                exports.BREAK = BREAK;
                exports.RETURN = RETURN;
            },
            function(module, exports, __nested_webpack_require_205158_205177__) {
                module.exports = !__nested_webpack_require_205158_205177__(33) && !__nested_webpack_require_205158_205177__(85)(function() {
                    return 7 != Object.defineProperty(__nested_webpack_require_205158_205177__(68)('div'), 'a', {
                        get: function() {
                            return 7;
                        }
                    }).a;
                });
            },
            function(module, exports) {
                module.exports = function(fn, args, that) {
                    var un = void 0 === that;
                    switch(args.length){
                        case 0:
                            return un ? fn() : fn.call(that);
                        case 1:
                            return un ? fn(args[0]) : fn.call(that, args[0]);
                        case 2:
                            return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                        case 3:
                            return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                        case 4:
                            return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                    }
                    return fn.apply(that, args);
                };
            },
            function(module, exports, __nested_webpack_require_206196_206215__) {
                var Iterators = __nested_webpack_require_206196_206215__(35);
                var ITERATOR = __nested_webpack_require_206196_206215__(13)('iterator');
                var ArrayProto = Array.prototype;
                module.exports = function(it) {
                    return void 0 !== it && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
                };
            },
            function(module, exports, __nested_webpack_require_206560_206579__) {
                var anObject = __nested_webpack_require_206560_206579__(27);
                module.exports = function(iterator, fn, value1, entries) {
                    try {
                        return entries ? fn(anObject(value1)[0], value1[1]) : fn(value1);
                    } catch (e) {
                        var ret = iterator['return'];
                        if (void 0 !== ret) anObject(ret.call(iterator));
                        throw e;
                    }
                };
            },
            function(module, exports, __nested_webpack_require_207049_207068__) {
                "use strict";
                var create = __nested_webpack_require_207049_207068__(192);
                var descriptor = __nested_webpack_require_207049_207068__(106);
                var setToStringTag = __nested_webpack_require_207049_207068__(71);
                var IteratorPrototype = {};
                __nested_webpack_require_207049_207068__(31)(IteratorPrototype, __nested_webpack_require_207049_207068__(13)('iterator'), function() {
                    return this;
                });
                module.exports = function(Constructor, NAME, next) {
                    Constructor.prototype = create(IteratorPrototype, {
                        next: descriptor(1, next)
                    });
                    setToStringTag(Constructor, NAME + ' Iterator');
                };
            },
            function(module, exports, __nested_webpack_require_207652_207671__) {
                var ITERATOR = __nested_webpack_require_207652_207671__(13)('iterator');
                var SAFE_CLOSING = false;
                try {
                    var riter = [
                        7
                    ][ITERATOR]();
                    riter['return'] = function() {
                        SAFE_CLOSING = true;
                    };
                    Array.from(riter, function() {
                        throw 2;
                    });
                } catch (e) {}
                module.exports = function(exec, skipClosing) {
                    if (!skipClosing && !SAFE_CLOSING) return false;
                    var safe = false;
                    try {
                        var arr = [
                            7
                        ];
                        var iter = arr[ITERATOR]();
                        iter.next = function() {
                            return {
                                done: safe = true
                            };
                        };
                        arr[ITERATOR] = function() {
                            return iter;
                        };
                        exec(arr);
                    } catch (e) {}
                    return safe;
                };
            },
            function(module, exports) {
                module.exports = function(done, value1) {
                    return {
                        value: value1,
                        done: !!done
                    };
                };
            },
            function(module, exports, __nested_webpack_require_208526_208545__) {
                var global1 = __nested_webpack_require_208526_208545__(11);
                var macrotask = __nested_webpack_require_208526_208545__(109).set;
                var Observer = global1.MutationObserver || global1.WebKitMutationObserver;
                var process1 = global1.process;
                var Promise1 = global1.Promise;
                var isNode = 'process' == __nested_webpack_require_208526_208545__(47)(process1);
                module.exports = function() {
                    var head, last, notify;
                    var flush = function() {
                        var parent, fn;
                        if (isNode && (parent = process1.domain)) parent.exit();
                        while(head){
                            fn = head.fn;
                            head = head.next;
                            try {
                                fn();
                            } catch (e) {
                                if (head) notify();
                                else last = void 0;
                                throw e;
                            }
                        }
                        last = void 0;
                        if (parent) parent.enter();
                    };
                    if (isNode) notify = function() {
                        process1.nextTick(flush);
                    };
                    else if (Observer && !(global1.navigator && global1.navigator.standalone)) {
                        var toggle = true;
                        var node = document.createTextNode('');
                        new Observer(flush).observe(node, {
                            characterData: true
                        });
                        notify = function() {
                            node.data = toggle = !toggle;
                        };
                    } else if (Promise1 && Promise1.resolve) {
                        var promise = Promise1.resolve(void 0);
                        notify = function() {
                            promise.then(flush);
                        };
                    } else notify = function() {
                        macrotask.call(global1, flush);
                    };
                    return function(fn) {
                        var task = {
                            fn: fn,
                            next: void 0
                        };
                        if (last) last.next = task;
                        if (!head) {
                            head = task;
                            notify();
                        }
                        last = task;
                    };
                };
            },
            function(module, exports, __nested_webpack_require_210602_210621__) {
                var anObject = __nested_webpack_require_210602_210621__(27);
                var dPs = __nested_webpack_require_210602_210621__(193);
                var enumBugKeys = __nested_webpack_require_210602_210621__(101);
                var IE_PROTO = __nested_webpack_require_210602_210621__(72)('IE_PROTO');
                var Empty = function() {};
                var PROTOTYPE = 'prototype';
                var createDict = function() {
                    var iframe = __nested_webpack_require_210602_210621__(68)('iframe');
                    var i = enumBugKeys.length;
                    var lt = '<';
                    var gt = '>';
                    var iframeDocument;
                    iframe.style.display = 'none';
                    __nested_webpack_require_210602_210621__(102).appendChild(iframe);
                    iframe.src = "javascript:";
                    iframeDocument = iframe.contentWindow.document;
                    iframeDocument.open();
                    iframeDocument.write(lt + "script" + gt + 'document.F=Object' + lt + "/script" + gt);
                    iframeDocument.close();
                    createDict = iframeDocument.F;
                    while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
                    return createDict();
                };
                module.exports = Object.create || function(O, Properties) {
                    var result;
                    if (null !== O) {
                        Empty[PROTOTYPE] = anObject(O);
                        result = new Empty();
                        Empty[PROTOTYPE] = null;
                        result[IE_PROTO] = O;
                    } else result = createDict();
                    return void 0 === Properties ? result : dPs(result, Properties);
                };
            },
            function(module, exports, __nested_webpack_require_212187_212206__) {
                var dP = __nested_webpack_require_212187_212206__(50);
                var anObject = __nested_webpack_require_212187_212206__(27);
                var getKeys = __nested_webpack_require_212187_212206__(132);
                module.exports = __nested_webpack_require_212187_212206__(33) ? Object.defineProperties : function(O, Properties) {
                    anObject(O);
                    var keys = getKeys(Properties);
                    var length = keys.length;
                    var i = 0;
                    var P;
                    while(length > i)dP.f(O, P = keys[i++], Properties[P]);
                    return O;
                };
            },
            function(module, exports, __nested_webpack_require_212667_212686__) {
                var has = __nested_webpack_require_212667_212686__(49);
                var toObject = __nested_webpack_require_212667_212686__(133);
                var IE_PROTO = __nested_webpack_require_212667_212686__(72)('IE_PROTO');
                var ObjectProto = Object.prototype;
                module.exports = Object.getPrototypeOf || function(O) {
                    O = toObject(O);
                    if (has(O, IE_PROTO)) return O[IE_PROTO];
                    if ('function' == typeof O.constructor && O instanceof O.constructor) return O.constructor.prototype;
                    return O instanceof Object ? ObjectProto : null;
                };
            },
            function(module, exports, __nested_webpack_require_213245_213264__) {
                var has = __nested_webpack_require_213245_213264__(49);
                var toIObject = __nested_webpack_require_213245_213264__(74);
                var arrayIndexOf = __nested_webpack_require_213245_213264__(182)(false);
                var IE_PROTO = __nested_webpack_require_213245_213264__(72)('IE_PROTO');
                module.exports = function(object, names) {
                    var O = toIObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for(key in O)if (key != IE_PROTO) has(O, key) && result.push(key);
                    while(names.length > i)if (has(O, key = names[i++])) ~arrayIndexOf(result, key) || result.push(key);
                    return result;
                };
            },
            function(module, exports, __nested_webpack_require_213861_213880__) {
                var hide = __nested_webpack_require_213861_213880__(31);
                module.exports = function(target, src, safe) {
                    for(var key in src)if (safe && target[key]) target[key] = src[key];
                    else hide(target, key, src[key]);
                    return target;
                };
            },
            function(module, exports, __nested_webpack_require_214162_214181__) {
                module.exports = __nested_webpack_require_214162_214181__(31);
            },
            function(module, exports, __nested_webpack_require_214283_214302__) {
                "use strict";
                var global1 = __nested_webpack_require_214283_214302__(11);
                var core = __nested_webpack_require_214283_214302__(23);
                var dP = __nested_webpack_require_214283_214302__(50);
                var DESCRIPTORS = __nested_webpack_require_214283_214302__(33);
                var SPECIES = __nested_webpack_require_214283_214302__(13)('species');
                module.exports = function(KEY) {
                    var C = 'function' == typeof core[KEY] ? core[KEY] : global1[KEY];
                    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                        configurable: true,
                        get: function() {
                            return this;
                        }
                    });
                };
            },
            function(module, exports, __nested_webpack_require_214810_214829__) {
                var toInteger = __nested_webpack_require_214810_214829__(73);
                var defined = __nested_webpack_require_214810_214829__(67);
                module.exports = function(TO_STRING) {
                    return function(that, pos) {
                        var s = String(defined(that));
                        var i = toInteger(pos);
                        var l = s.length;
                        var a, b;
                        if (i < 0 || i >= l) return TO_STRING ? '' : void 0;
                        a = s.charCodeAt(i);
                        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
                    };
                };
            },
            function(module, exports, __nested_webpack_require_215510_215529__) {
                var toInteger = __nested_webpack_require_215510_215529__(73);
                var max = Math.max;
                var min = Math.min;
                module.exports = function(index, length) {
                    index = toInteger(index);
                    return index < 0 ? max(index + length, 0) : min(index, length);
                };
            },
            function(module, exports, __nested_webpack_require_215811_215830__) {
                var isObject = __nested_webpack_require_215811_215830__(34);
                module.exports = function(it, S) {
                    if (!isObject(it)) return it;
                    var fn, val;
                    if (S && 'function' == typeof (fn = it.toString) && !isObject(val = fn.call(it))) return val;
                    if ('function' == typeof (fn = it.valueOf) && !isObject(val = fn.call(it))) return val;
                    if (!S && 'function' == typeof (fn = it.toString) && !isObject(val = fn.call(it))) return val;
                    throw TypeError("Can't convert object to primitive value");
                };
            },
            function(module, exports, __nested_webpack_require_216545_216564__) {
                var global1 = __nested_webpack_require_216545_216564__(11);
                var navigator1 = global1.navigator;
                module.exports = navigator1 && navigator1.userAgent || '';
            },
            function(module, exports, __nested_webpack_require_216754_216773__) {
                var classof = __nested_webpack_require_216754_216773__(100);
                var ITERATOR = __nested_webpack_require_216754_216773__(13)('iterator');
                var Iterators = __nested_webpack_require_216754_216773__(35);
                module.exports = __nested_webpack_require_216754_216773__(23).getIteratorMethod = function(it) {
                    if (void 0 != it) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
                };
            },
            function(module, exports, __nested_webpack_require_217144_217163__) {
                "use strict";
                var addToUnscopables = __nested_webpack_require_217144_217163__(180);
                var step = __nested_webpack_require_217144_217163__(190);
                var Iterators = __nested_webpack_require_217144_217163__(35);
                var toIObject = __nested_webpack_require_217144_217163__(74);
                module.exports = __nested_webpack_require_217144_217163__(103)(Array, 'Array', function(iterated, kind) {
                    this._t = toIObject(iterated);
                    this._i = 0;
                    this._k = kind;
                }, function() {
                    var O = this._t;
                    var kind = this._k;
                    var index = this._i++;
                    if (!O || index >= O.length) {
                        this._t = void 0;
                        return step(1);
                    }
                    if ('keys' == kind) return step(0, index);
                    if ('values' == kind) return step(0, O[index]);
                    return step(0, [
                        index,
                        O[index]
                    ]);
                }, 'values');
                Iterators.Arguments = Iterators.Array;
                addToUnscopables('keys');
                addToUnscopables('values');
                addToUnscopables('entries');
            },
            function(module, exports) {},
            function(module, exports, __nested_webpack_require_218389_218408__) {
                "use strict";
                var LIBRARY = __nested_webpack_require_218389_218408__(69);
                var global1 = __nested_webpack_require_218389_218408__(11);
                var ctx = __nested_webpack_require_218389_218408__(48);
                var classof = __nested_webpack_require_218389_218408__(100);
                var $export = __nested_webpack_require_218389_218408__(41);
                var isObject = __nested_webpack_require_218389_218408__(34);
                var aFunction = __nested_webpack_require_218389_218408__(46);
                var anInstance = __nested_webpack_require_218389_218408__(181);
                var forOf = __nested_webpack_require_218389_218408__(183);
                var speciesConstructor = __nested_webpack_require_218389_218408__(108);
                var task = __nested_webpack_require_218389_218408__(109).set;
                var microtask = __nested_webpack_require_218389_218408__(191)();
                var newPromiseCapabilityModule = __nested_webpack_require_218389_218408__(70);
                var perform = __nested_webpack_require_218389_218408__(104);
                var userAgent = __nested_webpack_require_218389_218408__(202);
                var promiseResolve = __nested_webpack_require_218389_218408__(105);
                var PROMISE = 'Promise';
                var TypeError1 = global1.TypeError;
                var process1 = global1.process;
                var versions = process1 && process1.versions;
                var v8 = versions && versions.v8 || '';
                var $Promise = global1[PROMISE];
                var isNode = 'process' == classof(process1);
                var empty = function() {};
                var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
                var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
                var USE_NATIVE = !!function() {
                    try {
                        var promise = $Promise.resolve(1);
                        var FakePromise = (promise.constructor = {})[__nested_webpack_require_218389_218408__(13)('species')] = function(exec) {
                            exec(empty, empty);
                        };
                        return (isNode || 'function' == typeof PromiseRejectionEvent) && promise.then(empty) instanceof FakePromise && 0 !== v8.indexOf('6.6') && -1 === userAgent.indexOf('Chrome/66');
                    } catch (e) {}
                }();
                var isThenable = function(it) {
                    var then;
                    return isObject(it) && 'function' == typeof (then = it.then) ? then : false;
                };
                var notify = function(promise, isReject) {
                    if (promise._n) return;
                    promise._n = true;
                    var chain = promise._c;
                    microtask(function() {
                        var value1 = promise._v;
                        var ok = 1 == promise._s;
                        var i = 0;
                        var run = function(reaction) {
                            var handler = ok ? reaction.ok : reaction.fail;
                            var resolve = reaction.resolve;
                            var reject = reaction.reject;
                            var domain = reaction.domain;
                            var result, then, exited;
                            try {
                                if (handler) {
                                    if (!ok) {
                                        if (2 == promise._h) onHandleUnhandled(promise);
                                        promise._h = 1;
                                    }
                                    if (true === handler) result = value1;
                                    else {
                                        if (domain) domain.enter();
                                        result = handler(value1);
                                        if (domain) {
                                            domain.exit();
                                            exited = true;
                                        }
                                    }
                                    if (result === reaction.promise) reject(TypeError1('Promise-chain cycle'));
                                    else if (then = isThenable(result)) then.call(result, resolve, reject);
                                    else resolve(result);
                                } else reject(value1);
                            } catch (e) {
                                if (domain && !exited) domain.exit();
                                reject(e);
                            }
                        };
                        while(chain.length > i)run(chain[i++]);
                        promise._c = [];
                        promise._n = false;
                        if (isReject && !promise._h) onUnhandled(promise);
                    });
                };
                var onUnhandled = function(promise) {
                    task.call(global1, function() {
                        var value1 = promise._v;
                        var unhandled = isUnhandled(promise);
                        var result, handler, console1;
                        if (unhandled) {
                            result = perform(function() {
                                if (isNode) process1.emit('unhandledRejection', value1, promise);
                                else if (handler = global1.onunhandledrejection) handler({
                                    promise: promise,
                                    reason: value1
                                });
                                else if ((console1 = global1.console) && console1.error) console1.error('Unhandled promise rejection', value1);
                            });
                            promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                        }
                        promise._a = void 0;
                        if (unhandled && result.e) throw result.v;
                    });
                };
                var isUnhandled = function(promise) {
                    return 1 !== promise._h && 0 === (promise._a || promise._c).length;
                };
                var onHandleUnhandled = function(promise) {
                    task.call(global1, function() {
                        var handler;
                        if (isNode) process1.emit('rejectionHandled', promise);
                        else if (handler = global1.onrejectionhandled) handler({
                            promise: promise,
                            reason: promise._v
                        });
                    });
                };
                var $reject = function(value1) {
                    var promise = this;
                    if (promise._d) return;
                    promise._d = true;
                    promise = promise._w || promise;
                    promise._v = value1;
                    promise._s = 2;
                    if (!promise._a) promise._a = promise._c.slice();
                    notify(promise, true);
                };
                var $resolve = function(value1) {
                    var promise = this;
                    var then;
                    if (promise._d) return;
                    promise._d = true;
                    promise = promise._w || promise;
                    try {
                        if (promise === value1) throw TypeError1("Promise can't be resolved itself");
                        if (then = isThenable(value1)) microtask(function() {
                            var wrapper = {
                                _w: promise,
                                _d: false
                            };
                            try {
                                then.call(value1, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                            } catch (e) {
                                $reject.call(wrapper, e);
                            }
                        });
                        else {
                            promise._v = value1;
                            promise._s = 1;
                            notify(promise, false);
                        }
                    } catch (e) {
                        $reject.call({
                            _w: promise,
                            _d: false
                        }, e);
                    }
                };
                if (!USE_NATIVE) {
                    $Promise = function(executor) {
                        anInstance(this, $Promise, PROMISE, '_h');
                        aFunction(executor);
                        Internal.call(this);
                        try {
                            executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                        } catch (err) {
                            $reject.call(this, err);
                        }
                    };
                    Internal = function(executor) {
                        this._c = [];
                        this._a = void 0;
                        this._s = 0;
                        this._d = false;
                        this._v = void 0;
                        this._h = 0;
                        this._n = false;
                    };
                    Internal.prototype = __nested_webpack_require_218389_218408__(196)($Promise.prototype, {
                        then: function(onFulfilled, onRejected) {
                            var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                            reaction.ok = 'function' == typeof onFulfilled ? onFulfilled : true;
                            reaction.fail = 'function' == typeof onRejected && onRejected;
                            reaction.domain = isNode ? process1.domain : void 0;
                            this._c.push(reaction);
                            if (this._a) this._a.push(reaction);
                            if (this._s) notify(this, false);
                            return reaction.promise;
                        },
                        catch: function(onRejected) {
                            return this.then(void 0, onRejected);
                        }
                    });
                    OwnPromiseCapability = function() {
                        var promise = new Internal();
                        this.promise = promise;
                        this.resolve = ctx($resolve, promise, 1);
                        this.reject = ctx($reject, promise, 1);
                    };
                    newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
                        return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
                    };
                }
                $export($export.G + $export.W + !USE_NATIVE * $export.F, {
                    Promise: $Promise
                });
                __nested_webpack_require_218389_218408__(71)($Promise, PROMISE);
                __nested_webpack_require_218389_218408__(198)(PROMISE);
                Wrapper = __nested_webpack_require_218389_218408__(23)[PROMISE];
                $export($export.S + !USE_NATIVE * $export.F, PROMISE, {
                    reject: function(r) {
                        var capability = newPromiseCapability(this);
                        var $$reject = capability.reject;
                        $$reject(r);
                        return capability.promise;
                    }
                });
                $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
                    resolve: function(x) {
                        return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
                    }
                });
                $export($export.S + !(USE_NATIVE && __nested_webpack_require_218389_218408__(189)(function(iter) {
                    $Promise.all(iter)['catch'](empty);
                })) * $export.F, PROMISE, {
                    all: function(iterable) {
                        var C = this;
                        var capability = newPromiseCapability(C);
                        var resolve = capability.resolve;
                        var reject = capability.reject;
                        var result = perform(function() {
                            var values = [];
                            var index = 0;
                            var remaining = 1;
                            forOf(iterable, false, function(promise) {
                                var $index = index++;
                                var alreadyCalled = false;
                                values.push(void 0);
                                remaining++;
                                C.resolve(promise).then(function(value1) {
                                    if (alreadyCalled) return;
                                    alreadyCalled = true;
                                    values[$index] = value1;
                                    --remaining || resolve(values);
                                }, reject);
                            });
                            --remaining || resolve(values);
                        });
                        if (result.e) reject(result.v);
                        return capability.promise;
                    },
                    race: function(iterable) {
                        var C = this;
                        var capability = newPromiseCapability(C);
                        var reject = capability.reject;
                        var result = perform(function() {
                            forOf(iterable, false, function(promise) {
                                C.resolve(promise).then(capability.resolve, reject);
                            });
                        });
                        if (result.e) reject(result.v);
                        return capability.promise;
                    }
                });
            },
            function(module, exports, __nested_webpack_require_228282_228301__) {
                "use strict";
                var $at = __nested_webpack_require_228282_228301__(199)(true);
                __nested_webpack_require_228282_228301__(103)(String, 'String', function(iterated) {
                    this._t = String(iterated);
                    this._i = 0;
                }, function() {
                    var O = this._t;
                    var index = this._i;
                    var point;
                    if (index >= O.length) return {
                        value: void 0,
                        done: true
                    };
                    point = $at(O, index);
                    this._i += point.length;
                    return {
                        value: point,
                        done: false
                    };
                });
            },
            function(module, exports, __nested_webpack_require_228893_228912__) {
                "use strict";
                var $export = __nested_webpack_require_228893_228912__(41);
                var core = __nested_webpack_require_228893_228912__(23);
                var global1 = __nested_webpack_require_228893_228912__(11);
                var speciesConstructor = __nested_webpack_require_228893_228912__(108);
                var promiseResolve = __nested_webpack_require_228893_228912__(105);
                $export($export.P + $export.R, 'Promise', {
                    finally: function(onFinally) {
                        var C = speciesConstructor(this, core.Promise || global1.Promise);
                        var isFunction = 'function' == typeof onFinally;
                        return this.then(isFunction ? function(x) {
                            return promiseResolve(C, onFinally()).then(function() {
                                return x;
                            });
                        } : onFinally, isFunction ? function(e) {
                            return promiseResolve(C, onFinally()).then(function() {
                                throw e;
                            });
                        } : onFinally);
                    }
                });
            },
            function(module, exports, __nested_webpack_require_229733_229752__) {
                "use strict";
                var $export = __nested_webpack_require_229733_229752__(41);
                var newPromiseCapability = __nested_webpack_require_229733_229752__(70);
                var perform = __nested_webpack_require_229733_229752__(104);
                $export($export.S, 'Promise', {
                    try: function(callbackfn) {
                        var promiseCapability = newPromiseCapability.f(this);
                        var result = perform(callbackfn);
                        (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
                        return promiseCapability.promise;
                    }
                });
            },
            function(module, exports, __nested_webpack_require_230283_230302__) {
                __nested_webpack_require_230283_230302__(204);
                var global1 = __nested_webpack_require_230283_230302__(11);
                var hide = __nested_webpack_require_230283_230302__(31);
                var Iterators = __nested_webpack_require_230283_230302__(35);
                var TO_STRING_TAG = __nested_webpack_require_230283_230302__(13)('toStringTag');
                var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(',');
                for(var i = 0; i < DOMIterables.length; i++){
                    var NAME = DOMIterables[i];
                    var Collection = global1[NAME];
                    var proto = Collection && Collection.prototype;
                    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                    Iterators[NAME] = Iterators.Array;
                }
            },
            function(module, exports, __nested_webpack_require_231338_231357__) {
                exports = module.exports = __nested_webpack_require_231338_231357__(112);
                exports.log = log;
                exports.formatArgs = formatArgs;
                exports.save = save;
                exports.load = load;
                exports.useColors = useColors;
                exports.storage = 'undefined' != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : localstorage();
                exports.colors = [
                    '#0000CC',
                    '#0000FF',
                    '#0033CC',
                    '#0033FF',
                    '#0066CC',
                    '#0066FF',
                    '#0099CC',
                    '#0099FF',
                    '#00CC00',
                    '#00CC33',
                    '#00CC66',
                    '#00CC99',
                    '#00CCCC',
                    '#00CCFF',
                    '#3300CC',
                    '#3300FF',
                    '#3333CC',
                    '#3333FF',
                    '#3366CC',
                    '#3366FF',
                    '#3399CC',
                    '#3399FF',
                    '#33CC00',
                    '#33CC33',
                    '#33CC66',
                    '#33CC99',
                    '#33CCCC',
                    '#33CCFF',
                    '#6600CC',
                    '#6600FF',
                    '#6633CC',
                    '#6633FF',
                    '#66CC00',
                    '#66CC33',
                    '#9900CC',
                    '#9900FF',
                    '#9933CC',
                    '#9933FF',
                    '#99CC00',
                    '#99CC33',
                    '#CC0000',
                    '#CC0033',
                    '#CC0066',
                    '#CC0099',
                    '#CC00CC',
                    '#CC00FF',
                    '#CC3300',
                    '#CC3333',
                    '#CC3366',
                    '#CC3399',
                    '#CC33CC',
                    '#CC33FF',
                    '#CC6600',
                    '#CC6633',
                    '#CC9900',
                    '#CC9933',
                    '#CCCC00',
                    '#CCCC33',
                    '#FF0000',
                    '#FF0033',
                    '#FF0066',
                    '#FF0099',
                    '#FF00CC',
                    '#FF00FF',
                    '#FF3300',
                    '#FF3333',
                    '#FF3366',
                    '#FF3399',
                    '#FF33CC',
                    '#FF33FF',
                    '#FF6600',
                    '#FF6633',
                    '#FF9900',
                    '#FF9933',
                    '#FFCC00',
                    '#FFCC33'
                ];
                function useColors() {
                    if ('undefined' != typeof window && window.process && 'renderer' === window.process.type) return true;
                    if ('undefined' != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
                    return 'undefined' != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || 'undefined' != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || 'undefined' != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || 'undefined' != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
                }
                exports.formatters.j = function(v) {
                    try {
                        return JSON.stringify(v);
                    } catch (err) {
                        return '[UnexpectedJSONParseError]: ' + err.message;
                    }
                };
                function formatArgs(args) {
                    var useColors = this.useColors;
                    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
                    if (!useColors) return;
                    var c = 'color: ' + this.color;
                    args.splice(1, 0, c, 'color: inherit');
                    var index = 0;
                    var lastC = 0;
                    args[0].replace(/%[a-zA-Z%]/g, function(match) {
                        if ('%%' === match) return;
                        index++;
                        if ('%c' === match) lastC = index;
                    });
                    args.splice(lastC, 0, c);
                }
                function log() {
                    return 'object' == typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
                }
                function save(namespaces) {
                    try {
                        if (null == namespaces) exports.storage.removeItem('debug');
                        else exports.storage.debug = namespaces;
                    } catch (e) {}
                }
                function load() {
                    var r;
                    try {
                        r = exports.storage.debug;
                    } catch (e) {}
                    if (!r && 'undefined' != typeof process && 'env' in process) r = process.env.DEBUG;
                    return r;
                }
                exports.enable(load());
                function localstorage() {
                    try {
                        return window.localStorage;
                    } catch (e) {}
                }
            },
            function(module, exports, __nested_webpack_require_237130_237149__) {
                if ('undefined' == typeof process || 'renderer' === process.type) module.exports = __nested_webpack_require_237130_237149__(211);
                else module.exports = __nested_webpack_require_237130_237149__(213);
            },
            function(module, exports, __nested_webpack_require_237477_237496__) {
                var tty = __nested_webpack_require_237477_237496__(79);
                var util = __nested_webpack_require_237477_237496__(2);
                exports = module.exports = __nested_webpack_require_237477_237496__(112);
                exports.init = init;
                exports.log = log;
                exports.formatArgs = formatArgs;
                exports.save = save;
                exports.load = load;
                exports.useColors = useColors;
                exports.colors = [
                    6,
                    2,
                    3,
                    4,
                    5,
                    1
                ];
                try {
                    var supportsColor = __nested_webpack_require_237477_237496__(239);
                    if (supportsColor && supportsColor.level >= 2) exports.colors = [
                        20,
                        21,
                        26,
                        27,
                        32,
                        33,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        56,
                        57,
                        62,
                        63,
                        68,
                        69,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        92,
                        93,
                        98,
                        99,
                        112,
                        113,
                        128,
                        129,
                        134,
                        135,
                        148,
                        149,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        178,
                        179,
                        184,
                        185,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        214,
                        215,
                        220,
                        221
                    ];
                } catch (err) {}
                exports.inspectOpts = Object.keys(process.env).filter(function(key) {
                    return /^debug_/i.test(key);
                }).reduce(function(obj, key) {
                    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
                        return k.toUpperCase();
                    });
                    var val = process.env[key];
                    val = /^(yes|on|true|enabled)$/i.test(val) ? true : /^(no|off|false|disabled)$/i.test(val) ? false : 'null' === val ? null : Number(val);
                    obj[prop] = val;
                    return obj;
                }, {});
                function useColors() {
                    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
                }
                exports.formatters.o = function(v) {
                    this.inspectOpts.colors = this.useColors;
                    return util.inspect(v, this.inspectOpts).split('\n').map(function(str) {
                        return str.trim();
                    }).join(' ');
                };
                exports.formatters.O = function(v) {
                    this.inspectOpts.colors = this.useColors;
                    return util.inspect(v, this.inspectOpts);
                };
                function formatArgs(args) {
                    var name = this.namespace;
                    var useColors = this.useColors;
                    if (useColors) {
                        var c = this.color;
                        var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
                        var prefix = '  ' + colorCode + ';1m' + name + " \x1b[0m";
                        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
                        args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
                    } else args[0] = getDate() + name + ' ' + args[0];
                }
                function getDate() {
                    if (exports.inspectOpts.hideDate) return '';
                    return new Date().toISOString() + ' ';
                }
                function log() {
                    return process.stderr.write(util.format.apply(util, arguments) + '\n');
                }
                function save(namespaces) {
                    if (null == namespaces) delete process.env.DEBUG;
                    else process.env.DEBUG = namespaces;
                }
                function load() {
                    return process.env.DEBUG;
                }
                function init(debug) {
                    debug.inspectOpts = {};
                    var keys = Object.keys(exports.inspectOpts);
                    for(var i = 0; i < keys.length; i++)debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
                }
                exports.enable(load());
            },
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_241949_241968__) {
                var pathModule = __nested_webpack_require_241949_241968__(0);
                var isWindows = 'win32' === process.platform;
                var fs = __nested_webpack_require_241949_241968__(3);
                var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
                function rethrow() {
                    var callback;
                    if (DEBUG) {
                        var backtrace = new Error;
                        callback = debugCallback;
                    } else callback = missingCallback;
                    return callback;
                    function debugCallback(err) {
                        if (err) {
                            backtrace.message = err.message;
                            err = backtrace;
                            missingCallback(err);
                        }
                    }
                    function missingCallback(err) {
                        if (err) {
                            if (process.throwDeprecation) throw err;
                            if (!process.noDeprecation) {
                                var msg = 'fs: missing callback ' + (err.stack || err.message);
                                if (process.traceDeprecation) console.trace(msg);
                                else console.error(msg);
                            }
                        }
                    }
                }
                function maybeCallback(cb) {
                    return 'function' == typeof cb ? cb : rethrow();
                }
                pathModule.normalize;
                if (isWindows) var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
                else var nextPartRe = /(.*?)(?:[\/]+|$)/g;
                if (isWindows) var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
                else var splitRootRe = /^[\/]*/;
                exports.realpathSync = function(p, cache) {
                    p = pathModule.resolve(p);
                    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) return cache[p];
                    var original = p, seenLinks = {}, knownHard = {};
                    var pos;
                    var current;
                    var base;
                    var previous;
                    start();
                    function start() {
                        var m = splitRootRe.exec(p);
                        pos = m[0].length;
                        current = m[0];
                        base = m[0];
                        previous = '';
                        if (isWindows && !knownHard[base]) {
                            fs.lstatSync(base);
                            knownHard[base] = true;
                        }
                    }
                    while(pos < p.length){
                        nextPartRe.lastIndex = pos;
                        var result = nextPartRe.exec(p);
                        previous = current;
                        current += result[0];
                        base = previous + result[1];
                        pos = nextPartRe.lastIndex;
                        if (knownHard[base] || cache && cache[base] === base) continue;
                        var resolvedLink;
                        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) resolvedLink = cache[base];
                        else {
                            var stat = fs.lstatSync(base);
                            if (!stat.isSymbolicLink()) {
                                knownHard[base] = true;
                                if (cache) cache[base] = base;
                                continue;
                            }
                            var linkTarget = null;
                            if (!isWindows) {
                                var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
                                if (seenLinks.hasOwnProperty(id)) linkTarget = seenLinks[id];
                            }
                            if (null === linkTarget) {
                                fs.statSync(base);
                                linkTarget = fs.readlinkSync(base);
                            }
                            resolvedLink = pathModule.resolve(previous, linkTarget);
                            if (cache) cache[base] = resolvedLink;
                            if (!isWindows) seenLinks[id] = linkTarget;
                        }
                        p = pathModule.resolve(resolvedLink, p.slice(pos));
                        start();
                    }
                    if (cache) cache[original] = p;
                    return p;
                };
                exports.realpath = function(p, cache, cb) {
                    if ('function' != typeof cb) {
                        cb = maybeCallback(cache);
                        cache = null;
                    }
                    p = pathModule.resolve(p);
                    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) return process.nextTick(cb.bind(null, null, cache[p]));
                    var original = p, seenLinks = {}, knownHard = {};
                    var pos;
                    var current;
                    var base;
                    var previous;
                    start();
                    function start() {
                        var m = splitRootRe.exec(p);
                        pos = m[0].length;
                        current = m[0];
                        base = m[0];
                        previous = '';
                        if (isWindows && !knownHard[base]) fs.lstat(base, function(err) {
                            if (err) return cb(err);
                            knownHard[base] = true;
                            LOOP();
                        });
                        else process.nextTick(LOOP);
                    }
                    function LOOP() {
                        if (pos >= p.length) {
                            if (cache) cache[original] = p;
                            return cb(null, p);
                        }
                        nextPartRe.lastIndex = pos;
                        var result = nextPartRe.exec(p);
                        previous = current;
                        current += result[0];
                        base = previous + result[1];
                        pos = nextPartRe.lastIndex;
                        if (knownHard[base] || cache && cache[base] === base) return process.nextTick(LOOP);
                        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) return gotResolvedLink(cache[base]);
                        return fs.lstat(base, gotStat);
                    }
                    function gotStat(err, stat) {
                        if (err) return cb(err);
                        if (!stat.isSymbolicLink()) {
                            knownHard[base] = true;
                            if (cache) cache[base] = base;
                            return process.nextTick(LOOP);
                        }
                        if (!isWindows) {
                            var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
                            if (seenLinks.hasOwnProperty(id)) return gotTarget(null, seenLinks[id], base);
                        }
                        fs.stat(base, function(err) {
                            if (err) return cb(err);
                            fs.readlink(base, function(err, target) {
                                if (!isWindows) seenLinks[id] = target;
                                gotTarget(err, target);
                            });
                        });
                    }
                    function gotTarget(err, target, base) {
                        if (err) return cb(err);
                        var resolvedLink = pathModule.resolve(previous, target);
                        if (cache) cache[base] = resolvedLink;
                        gotResolvedLink(resolvedLink);
                    }
                    function gotResolvedLink(resolvedLink) {
                        p = pathModule.resolve(resolvedLink, p.slice(pos));
                        start();
                    }
                };
            },
            function(module, exports, __nested_webpack_require_250586_250605__) {
                module.exports = globSync;
                globSync.GlobSync = GlobSync;
                var fs = __nested_webpack_require_250586_250605__(3);
                var rp = __nested_webpack_require_250586_250605__(114);
                var minimatch = __nested_webpack_require_250586_250605__(60);
                minimatch.Minimatch;
                __nested_webpack_require_250586_250605__(75).Glob;
                __nested_webpack_require_250586_250605__(2);
                var path = __nested_webpack_require_250586_250605__(0);
                var assert = __nested_webpack_require_250586_250605__(22);
                var isAbsolute = __nested_webpack_require_250586_250605__(76);
                var common = __nested_webpack_require_250586_250605__(115);
                common.alphasort;
                common.alphasorti;
                var setopts = common.setopts;
                var ownProp = common.ownProp;
                var childrenIgnored = common.childrenIgnored;
                var isIgnored = common.isIgnored;
                function globSync(pattern, options) {
                    if ('function' == typeof options || 3 === arguments.length) throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
                    return new GlobSync(pattern, options).found;
                }
                function GlobSync(pattern, options) {
                    if (!pattern) throw new Error('must provide pattern');
                    if ('function' == typeof options || 3 === arguments.length) throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
                    if (!(this instanceof GlobSync)) return new GlobSync(pattern, options);
                    setopts(this, pattern, options);
                    if (this.noprocess) return this;
                    var n = this.minimatch.set.length;
                    this.matches = new Array(n);
                    for(var i = 0; i < n; i++)this._process(this.minimatch.set[i], i, false);
                    this._finish();
                }
                GlobSync.prototype._finish = function() {
                    assert(this instanceof GlobSync);
                    if (this.realpath) {
                        var self1 = this;
                        this.matches.forEach(function(matchset, index) {
                            var set = self1.matches[index] = Object.create(null);
                            for(var p in matchset)try {
                                p = self1._makeAbs(p);
                                var real = rp.realpathSync(p, self1.realpathCache);
                                set[real] = true;
                            } catch (er) {
                                if ('stat' === er.syscall) set[self1._makeAbs(p)] = true;
                                else throw er;
                            }
                        });
                    }
                    common.finish(this);
                };
                GlobSync.prototype._process = function(pattern, index, inGlobStar) {
                    assert(this instanceof GlobSync);
                    var n = 0;
                    while('string' == typeof pattern[n])n++;
                    var prefix;
                    switch(n){
                        case pattern.length:
                            this._processSimple(pattern.join('/'), index);
                            return;
                        case 0:
                            prefix = null;
                            break;
                        default:
                            prefix = pattern.slice(0, n).join('/');
                            break;
                    }
                    var remain = pattern.slice(n);
                    var read;
                    if (null === prefix) read = '.';
                    else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
                        if (!prefix || !isAbsolute(prefix)) prefix = '/' + prefix;
                        read = prefix;
                    } else read = prefix;
                    var abs = this._makeAbs(read);
                    if (childrenIgnored(this, read)) return;
                    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
                    if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
                    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
                };
                GlobSync.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar) {
                    var entries = this._readdir(abs, inGlobStar);
                    if (!entries) return;
                    var pn = remain[0];
                    var negate = !!this.minimatch.negate;
                    var rawGlob = pn._glob;
                    var dotOk = this.dot || '.' === rawGlob.charAt(0);
                    var matchedEntries = [];
                    for(var i = 0; i < entries.length; i++){
                        var e = entries[i];
                        if ('.' !== e.charAt(0) || dotOk) {
                            var m;
                            m = negate && !prefix ? !e.match(pn) : e.match(pn);
                            if (m) matchedEntries.push(e);
                        }
                    }
                    var len = matchedEntries.length;
                    if (0 === len) return;
                    if (1 === remain.length && !this.mark && !this.stat) {
                        if (!this.matches[index]) this.matches[index] = Object.create(null);
                        for(var i = 0; i < len; i++){
                            var e = matchedEntries[i];
                            if (prefix) e = '/' !== prefix.slice(-1) ? prefix + '/' + e : prefix + e;
                            if ('/' === e.charAt(0) && !this.nomount) e = path.join(this.root, e);
                            this._emitMatch(index, e);
                        }
                        return;
                    }
                    remain.shift();
                    for(var i = 0; i < len; i++){
                        var e = matchedEntries[i];
                        var newPattern;
                        newPattern = prefix ? [
                            prefix,
                            e
                        ] : [
                            e
                        ];
                        this._process(newPattern.concat(remain), index, inGlobStar);
                    }
                };
                GlobSync.prototype._emitMatch = function(index, e) {
                    if (isIgnored(this, e)) return;
                    var abs = this._makeAbs(e);
                    if (this.mark) e = this._mark(e);
                    if (this.absolute) e = abs;
                    if (this.matches[index][e]) return;
                    if (this.nodir) {
                        var c = this.cache[abs];
                        if ('DIR' === c || Array.isArray(c)) return;
                    }
                    this.matches[index][e] = true;
                    if (this.stat) this._stat(e);
                };
                GlobSync.prototype._readdirInGlobStar = function(abs) {
                    if (this.follow) return this._readdir(abs, false);
                    var entries;
                    var lstat;
                    try {
                        lstat = fs.lstatSync(abs);
                    } catch (er) {
                        if ('ENOENT' === er.code) return null;
                    }
                    var isSym = lstat && lstat.isSymbolicLink();
                    this.symlinks[abs] = isSym;
                    if (isSym || !lstat || lstat.isDirectory()) entries = this._readdir(abs, false);
                    else this.cache[abs] = 'FILE';
                    return entries;
                };
                GlobSync.prototype._readdir = function(abs, inGlobStar) {
                    if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs);
                    if (ownProp(this.cache, abs)) {
                        var c = this.cache[abs];
                        if (!c || 'FILE' === c) return null;
                        if (Array.isArray(c)) return c;
                    }
                    try {
                        return this._readdirEntries(abs, fs.readdirSync(abs));
                    } catch (er) {
                        this._readdirError(abs, er);
                        return null;
                    }
                };
                GlobSync.prototype._readdirEntries = function(abs, entries) {
                    if (!this.mark && !this.stat) for(var i = 0; i < entries.length; i++){
                        var e = entries[i];
                        e = '/' === abs ? abs + e : abs + '/' + e;
                        this.cache[e] = true;
                    }
                    this.cache[abs] = entries;
                    return entries;
                };
                GlobSync.prototype._readdirError = function(f, er) {
                    switch(er.code){
                        case 'ENOTSUP':
                        case 'ENOTDIR':
                            var abs = this._makeAbs(f);
                            this.cache[abs] = 'FILE';
                            if (abs === this.cwdAbs) {
                                var error = new Error(er.code + ' invalid cwd ' + this.cwd);
                                error.path = this.cwd;
                                error.code = er.code;
                                throw error;
                            }
                            break;
                        case 'ENOENT':
                        case 'ELOOP':
                        case 'ENAMETOOLONG':
                        case 'UNKNOWN':
                            this.cache[this._makeAbs(f)] = false;
                            break;
                        default:
                            this.cache[this._makeAbs(f)] = false;
                            if (this.strict) throw er;
                            if (!this.silent) console.error('glob error', er);
                            break;
                    }
                };
                GlobSync.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar) {
                    var entries = this._readdir(abs, inGlobStar);
                    if (!entries) return;
                    var remainWithoutGlobStar = remain.slice(1);
                    var gspref = prefix ? [
                        prefix
                    ] : [];
                    var noGlobStar = gspref.concat(remainWithoutGlobStar);
                    this._process(noGlobStar, index, false);
                    var len = entries.length;
                    var isSym = this.symlinks[abs];
                    if (isSym && inGlobStar) return;
                    for(var i = 0; i < len; i++){
                        var e = entries[i];
                        if ('.' !== e.charAt(0) || !!this.dot) {
                            var instead = gspref.concat(entries[i], remainWithoutGlobStar);
                            this._process(instead, index, true);
                            var below = gspref.concat(entries[i], remain);
                            this._process(below, index, true);
                        }
                    }
                };
                GlobSync.prototype._processSimple = function(prefix, index) {
                    var exists = this._stat(prefix);
                    if (!this.matches[index]) this.matches[index] = Object.create(null);
                    if (!exists) return;
                    if (prefix && isAbsolute(prefix) && !this.nomount) {
                        var trail = /[\/\\]$/.test(prefix);
                        if ('/' === prefix.charAt(0)) prefix = path.join(this.root, prefix);
                        else {
                            prefix = path.resolve(this.root, prefix);
                            if (trail) prefix += '/';
                        }
                    }
                    if ('win32' === process.platform) prefix = prefix.replace(/\\/g, '/');
                    this._emitMatch(index, prefix);
                };
                GlobSync.prototype._stat = function(f) {
                    var abs = this._makeAbs(f);
                    var needDir = '/' === f.slice(-1);
                    if (f.length > this.maxLength) return false;
                    if (!this.stat && ownProp(this.cache, abs)) {
                        var c = this.cache[abs];
                        if (Array.isArray(c)) c = 'DIR';
                        if (!needDir || 'DIR' === c) return c;
                        if (needDir && 'FILE' === c) return false;
                    }
                    var stat = this.statCache[abs];
                    if (!stat) {
                        var lstat;
                        try {
                            lstat = fs.lstatSync(abs);
                        } catch (er) {
                            if (er && ('ENOENT' === er.code || 'ENOTDIR' === er.code)) {
                                this.statCache[abs] = false;
                                return false;
                            }
                        }
                        if (lstat && lstat.isSymbolicLink()) try {
                            stat = fs.statSync(abs);
                        } catch (er) {
                            stat = lstat;
                        }
                        else stat = lstat;
                    }
                    this.statCache[abs] = stat;
                    var c = true;
                    if (stat) c = stat.isDirectory() ? 'DIR' : 'FILE';
                    this.cache[abs] = this.cache[abs] || c;
                    if (needDir && 'FILE' === c) return false;
                    return c;
                };
                GlobSync.prototype._mark = function(p) {
                    return common.mark(this, p);
                };
                GlobSync.prototype._makeAbs = function(f) {
                    return common.makeAbs(this, f);
                };
            },
            ,
            ,
            function(module, exports, __webpack_require__) {
                "use strict";
                module.exports = function(flag, argv) {
                    argv = argv || process.argv;
                    var terminatorPos = argv.indexOf('--');
                    var prefix = /^--/.test(flag) ? '' : '--';
                    var pos = argv.indexOf(prefix + flag);
                    return -1 !== pos && (-1 !== terminatorPos ? pos < terminatorPos : true);
                };
            },
            ,
            function(module, exports, __nested_webpack_require_263105_263124__) {
                var wrappy = __nested_webpack_require_263105_263124__(123);
                var reqs = Object.create(null);
                var once = __nested_webpack_require_263105_263124__(61);
                module.exports = wrappy(inflight);
                function inflight(key, cb) {
                    if (reqs[key]) {
                        reqs[key].push(cb);
                        return null;
                    }
                    reqs[key] = [
                        cb
                    ];
                    return makeres(key);
                }
                function makeres(key) {
                    return once(function RES() {
                        var cbs = reqs[key];
                        var len = cbs.length;
                        var args = slice(arguments);
                        try {
                            for(var i = 0; i < len; i++)cbs[i].apply(null, args);
                        } finally{
                            if (cbs.length > len) {
                                cbs.splice(0, len);
                                process.nextTick(function() {
                                    RES.apply(null, args);
                                });
                            } else delete reqs[key];
                        }
                    });
                }
                function slice(args) {
                    var length = args.length;
                    var array = [];
                    for(var i = 0; i < length; i++)array[i] = args[i];
                    return array;
                }
            },
            function(module, exports) {
                if ('function' == typeof Object.create) module.exports = function(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
                else module.exports = function(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function() {};
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                };
            },
            ,
            ,
            function(module, exports, __nested_webpack_require_265316_265335__) {
                module.exports = void 0 !== __nested_webpack_require_265316_265335__;
            },
            ,
            function(module, exports) {
                var s = 1000;
                var m = 60 * s;
                var h = 60 * m;
                var d = 24 * h;
                var y = 365.25 * d;
                module.exports = function(val, options) {
                    options = options || {};
                    var type = typeof val;
                    if ('string' === type && val.length > 0) return parse(val);
                    if ('number' === type && false === isNaN(val)) return options.long ? fmtLong(val) : fmtShort(val);
                    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
                };
                function parse(str) {
                    str = String(str);
                    if (str.length > 100) return;
                    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
                    if (!match) return;
                    var n = parseFloat(match[1]);
                    var type = (match[2] || 'ms').toLowerCase();
                    switch(type){
                        case 'years':
                        case 'year':
                        case 'yrs':
                        case 'yr':
                        case 'y':
                            return n * y;
                        case 'days':
                        case 'day':
                        case 'd':
                            return n * d;
                        case 'hours':
                        case 'hour':
                        case 'hrs':
                        case 'hr':
                        case 'h':
                            return n * h;
                        case 'minutes':
                        case 'minute':
                        case 'mins':
                        case 'min':
                        case 'm':
                            return n * m;
                        case 'seconds':
                        case 'second':
                        case 'secs':
                        case 'sec':
                        case 's':
                            return n * s;
                        case 'milliseconds':
                        case 'millisecond':
                        case 'msecs':
                        case 'msec':
                        case 'ms':
                            return n;
                        default:
                            return;
                    }
                }
                function fmtShort(ms) {
                    if (ms >= d) return Math.round(ms / d) + 'd';
                    if (ms >= h) return Math.round(ms / h) + 'h';
                    if (ms >= m) return Math.round(ms / m) + 'm';
                    if (ms >= s) return Math.round(ms / s) + 's';
                    return ms + 'ms';
                }
                function fmtLong(ms) {
                    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
                }
                function plural(ms, n, name) {
                    if (ms < n) return;
                    if (ms < 1.5 * n) return Math.floor(ms / n) + ' ' + name;
                    return Math.ceil(ms / n) + ' ' + name + 's';
                }
            },
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_268381_268400__) {
                module.exports = rimraf;
                rimraf.sync = rimrafSync;
                var assert = __nested_webpack_require_268381_268400__(22);
                var path = __nested_webpack_require_268381_268400__(0);
                var fs = __nested_webpack_require_268381_268400__(3);
                var glob = __nested_webpack_require_268381_268400__(75);
                var _0666 = parseInt('666', 8);
                var defaultGlobOpts = {
                    nosort: true,
                    silent: true
                };
                var timeout = 0;
                var isWindows = "win32" === process.platform;
                function defaults(options) {
                    var methods = [
                        'unlink',
                        'chmod',
                        'stat',
                        'lstat',
                        'rmdir',
                        'readdir'
                    ];
                    methods.forEach(function(m) {
                        options[m] = options[m] || fs[m];
                        m += 'Sync';
                        options[m] = options[m] || fs[m];
                    });
                    options.maxBusyTries = options.maxBusyTries || 3;
                    options.emfileWait = options.emfileWait || 1000;
                    if (false === options.glob) options.disableGlob = true;
                    options.disableGlob = options.disableGlob || false;
                    options.glob = options.glob || defaultGlobOpts;
                }
                function rimraf(p, options, cb) {
                    if ('function' == typeof options) {
                        cb = options;
                        options = {};
                    }
                    assert(p, 'rimraf: missing path');
                    assert.equal(typeof p, 'string', 'rimraf: path should be a string');
                    assert.equal(typeof cb, 'function', 'rimraf: callback function required');
                    assert(options, 'rimraf: invalid options argument provided');
                    assert.equal(typeof options, 'object', 'rimraf: options should be object');
                    defaults(options);
                    var busyTries = 0;
                    var errState = null;
                    var n = 0;
                    if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [
                        p
                    ]);
                    options.lstat(p, function(er, stat) {
                        if (!er) return afterGlob(null, [
                            p
                        ]);
                        glob(p, options.glob, afterGlob);
                    });
                    function next(er) {
                        errState = errState || er;
                        if (0 === --n) cb(errState);
                    }
                    function afterGlob(er, results) {
                        if (er) return cb(er);
                        n = results.length;
                        if (0 === n) return cb();
                        results.forEach(function(p) {
                            rimraf_(p, options, function CB(er) {
                                if (er) {
                                    if (("EBUSY" === er.code || "ENOTEMPTY" === er.code || "EPERM" === er.code) && busyTries < options.maxBusyTries) {
                                        busyTries++;
                                        var time = 100 * busyTries;
                                        return setTimeout(function() {
                                            rimraf_(p, options, CB);
                                        }, time);
                                    }
                                    if ("EMFILE" === er.code && timeout < options.emfileWait) return setTimeout(function() {
                                        rimraf_(p, options, CB);
                                    }, timeout++);
                                    if ("ENOENT" === er.code) er = null;
                                }
                                timeout = 0;
                                next(er);
                            });
                        });
                    }
                }
                function rimraf_(p, options, cb) {
                    assert(p);
                    assert(options);
                    assert('function' == typeof cb);
                    options.lstat(p, function(er, st) {
                        if (er && "ENOENT" === er.code) return cb(null);
                        if (er && "EPERM" === er.code && isWindows) fixWinEPERM(p, options, er, cb);
                        if (st && st.isDirectory()) return rmdir(p, options, er, cb);
                        options.unlink(p, function(er) {
                            if (er) {
                                if ("ENOENT" === er.code) return cb(null);
                                if ("EPERM" === er.code) return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
                                if ("EISDIR" === er.code) return rmdir(p, options, er, cb);
                            }
                            return cb(er);
                        });
                    });
                }
                function fixWinEPERM(p, options, er, cb) {
                    assert(p);
                    assert(options);
                    assert('function' == typeof cb);
                    if (er) assert(er instanceof Error);
                    options.chmod(p, _0666, function(er2) {
                        if (er2) cb("ENOENT" === er2.code ? null : er);
                        else options.stat(p, function(er3, stats) {
                            if (er3) cb("ENOENT" === er3.code ? null : er);
                            else if (stats.isDirectory()) rmdir(p, options, er, cb);
                            else options.unlink(p, cb);
                        });
                    });
                }
                function fixWinEPERMSync(p, options, er) {
                    assert(p);
                    assert(options);
                    if (er) assert(er instanceof Error);
                    try {
                        options.chmodSync(p, _0666);
                    } catch (er2) {
                        if ("ENOENT" === er2.code) return;
                        throw er;
                    }
                    try {
                        var stats = options.statSync(p);
                    } catch (er3) {
                        if ("ENOENT" === er3.code) return;
                        throw er;
                    }
                    if (stats.isDirectory()) rmdirSync(p, options, er);
                    else options.unlinkSync(p);
                }
                function rmdir(p, options, originalEr, cb) {
                    assert(p);
                    assert(options);
                    if (originalEr) assert(originalEr instanceof Error);
                    assert('function' == typeof cb);
                    options.rmdir(p, function(er) {
                        if (er && ("ENOTEMPTY" === er.code || "EEXIST" === er.code || "EPERM" === er.code)) rmkids(p, options, cb);
                        else er && "ENOTDIR" === er.code ? cb(originalEr) : cb(er);
                    });
                }
                function rmkids(p, options, cb) {
                    assert(p);
                    assert(options);
                    assert('function' == typeof cb);
                    options.readdir(p, function(er, files) {
                        if (er) return cb(er);
                        var n = files.length;
                        if (0 === n) return options.rmdir(p, cb);
                        var errState;
                        files.forEach(function(f) {
                            rimraf(path.join(p, f), options, function(er) {
                                if (errState) return;
                                if (er) return cb(errState = er);
                                if (0 === --n) options.rmdir(p, cb);
                            });
                        });
                    });
                }
                function rimrafSync(p, options) {
                    options = options || {};
                    defaults(options);
                    assert(p, 'rimraf: missing path');
                    assert.equal(typeof p, 'string', 'rimraf: path should be a string');
                    assert(options, 'rimraf: missing options');
                    assert.equal(typeof options, 'object', 'rimraf: options should be object');
                    var results;
                    if (options.disableGlob || !glob.hasMagic(p)) results = [
                        p
                    ];
                    else try {
                        options.lstatSync(p);
                        results = [
                            p
                        ];
                    } catch (er) {
                        results = glob.sync(p, options.glob);
                    }
                    if (!results.length) return;
                    for(var i = 0; i < results.length; i++){
                        var p = results[i];
                        try {
                            var st = options.lstatSync(p);
                        } catch (er) {
                            if ("ENOENT" === er.code) return;
                            if ("EPERM" === er.code && isWindows) fixWinEPERMSync(p, options, er);
                        }
                        try {
                            if (st && st.isDirectory()) rmdirSync(p, options, null);
                            else options.unlinkSync(p);
                        } catch (er) {
                            if ("ENOENT" === er.code) return;
                            if ("EPERM" === er.code) return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
                            if ("EISDIR" !== er.code) throw er;
                            rmdirSync(p, options, er);
                        }
                    }
                }
                function rmdirSync(p, options, originalEr) {
                    assert(p);
                    assert(options);
                    if (originalEr) assert(originalEr instanceof Error);
                    try {
                        options.rmdirSync(p);
                    } catch (er) {
                        if ("ENOENT" === er.code) return;
                        if ("ENOTDIR" === er.code) throw originalEr;
                        if ("ENOTEMPTY" === er.code || "EEXIST" === er.code || "EPERM" === er.code) rmkidsSync(p, options);
                    }
                }
                function rmkidsSync(p, options) {
                    assert(p);
                    assert(options);
                    options.readdirSync(p).forEach(function(f) {
                        rimrafSync(path.join(p, f), options);
                    });
                    var retries = isWindows ? 100 : 1;
                    var i = 0;
                    do {
                        var threw = true;
                        try {
                            var ret = options.rmdirSync(p, options);
                            threw = false;
                            return ret;
                        } finally{
                            if (++i < retries && threw) continue;
                        }
                    }while (true);
                }
            },
            ,
            ,
            ,
            ,
            ,
            function(module, exports, __nested_webpack_require_277539_277558__) {
                "use strict";
                var hasFlag = __nested_webpack_require_277539_277558__(221);
                var support = function(level) {
                    if (0 === level) return false;
                    return {
                        level: level,
                        hasBasic: true,
                        has256: level >= 2,
                        has16m: level >= 3
                    };
                };
                var supportLevel = function() {
                    if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) return 0;
                    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) return 3;
                    if (hasFlag('color=256')) return 2;
                    if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) return 1;
                    if (process.stdout && !process.stdout.isTTY) return 0;
                    if ('win32' === process.platform) return 1;
                    if ('CI' in process.env) {
                        if ('TRAVIS' in process.env || 'Travis' === process.env.CI) return 1;
                        return 0;
                    }
                    if ('TEAMCITY_VERSION' in process.env) return null === process.env.TEAMCITY_VERSION.match(/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/) ? 0 : 1;
                    if (/^(screen|xterm)-256(?:color)?/.test(process.env.TERM)) return 2;
                    if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) return 1;
                    if ('COLORTERM' in process.env) return 1;
                    process.env.TERM;
                    return 0;
                }();
                if (0 === supportLevel && 'FORCE_COLOR' in process.env) supportLevel = 1;
                module.exports = process && support(supportLevel);
            }
        ]);
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const stringify = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js");
        const compile = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js");
        const expand = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js");
        const parse = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js");
        const braces = (input, options = {})=>{
            let output = [];
            if (Array.isArray(input)) for (const pattern of input){
                const result = braces.create(pattern, options);
                if (Array.isArray(result)) output.push(...result);
                else output.push(result);
            }
            else output = [].concat(braces.create(input, options));
            if (options && true === options.expand && true === options.nodupes) output = [
                ...new Set(output)
            ];
            return output;
        };
        braces.parse = (input, options = {})=>parse(input, options);
        braces.stringify = (input, options = {})=>{
            if ('string' == typeof input) return stringify(braces.parse(input, options), options);
            return stringify(input, options);
        };
        braces.compile = (input, options = {})=>{
            if ('string' == typeof input) input = braces.parse(input, options);
            return compile(input, options);
        };
        braces.expand = (input, options = {})=>{
            if ('string' == typeof input) input = braces.parse(input, options);
            let result = expand(input, options);
            if (true === options.noempty) result = result.filter(Boolean);
            if (true === options.nodupes) result = [
                ...new Set(result)
            ];
            return result;
        };
        braces.create = (input, options = {})=>{
            if ('' === input || input.length < 3) return [
                input
            ];
            return true !== options.expand ? braces.compile(input, options) : braces.expand(input, options);
        };
        module.exports = braces;
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const fill = __webpack_require__("../../node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js");
        const compile = (ast, options = {})=>{
            const walk = (node, parent = {})=>{
                const invalidBlock = utils.isInvalidBrace(parent);
                const invalidNode = true === node.invalid && true === options.escapeInvalid;
                const invalid = true === invalidBlock || true === invalidNode;
                const prefix = true === options.escapeInvalid ? '\\' : '';
                let output = '';
                if (true === node.isOpen) return prefix + node.value;
                if (true === node.isClose) {
                    console.log('node.isClose', prefix, node.value);
                    return prefix + node.value;
                }
                if ('open' === node.type) return invalid ? prefix + node.value : '(';
                if ('close' === node.type) return invalid ? prefix + node.value : ')';
                if ('comma' === node.type) return 'comma' === node.prev.type ? '' : invalid ? node.value : '|';
                if (node.value) return node.value;
                if (node.nodes && node.ranges > 0) {
                    const args = utils.reduce(node.nodes);
                    const range = fill(...args, {
                        ...options,
                        wrap: false,
                        toRegex: true,
                        strictZeros: true
                    });
                    if (0 !== range.length) return args.length > 1 && range.length > 1 ? `(${range})` : range;
                }
                if (node.nodes) for (const child of node.nodes)output += walk(child, node);
                return output;
            };
            return walk(ast);
        };
        module.exports = compile;
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js": function(module) {
        module.exports = {
            MAX_LENGTH: 10000,
            CHAR_0: '0',
            CHAR_9: '9',
            CHAR_UPPERCASE_A: 'A',
            CHAR_LOWERCASE_A: 'a',
            CHAR_UPPERCASE_Z: 'Z',
            CHAR_LOWERCASE_Z: 'z',
            CHAR_LEFT_PARENTHESES: '(',
            CHAR_RIGHT_PARENTHESES: ')',
            CHAR_ASTERISK: '*',
            CHAR_AMPERSAND: '&',
            CHAR_AT: '@',
            CHAR_BACKSLASH: '\\',
            CHAR_BACKTICK: '`',
            CHAR_CARRIAGE_RETURN: '\r',
            CHAR_CIRCUMFLEX_ACCENT: '^',
            CHAR_COLON: ':',
            CHAR_COMMA: ',',
            CHAR_DOLLAR: '$',
            CHAR_DOT: '.',
            CHAR_DOUBLE_QUOTE: '"',
            CHAR_EQUAL: '=',
            CHAR_EXCLAMATION_MARK: '!',
            CHAR_FORM_FEED: '\f',
            CHAR_FORWARD_SLASH: '/',
            CHAR_HASH: '#',
            CHAR_HYPHEN_MINUS: '-',
            CHAR_LEFT_ANGLE_BRACKET: '<',
            CHAR_LEFT_CURLY_BRACE: '{',
            CHAR_LEFT_SQUARE_BRACKET: '[',
            CHAR_LINE_FEED: '\n',
            CHAR_NO_BREAK_SPACE: '\u00A0',
            CHAR_PERCENT: '%',
            CHAR_PLUS: '+',
            CHAR_QUESTION_MARK: '?',
            CHAR_RIGHT_ANGLE_BRACKET: '>',
            CHAR_RIGHT_CURLY_BRACE: '}',
            CHAR_RIGHT_SQUARE_BRACKET: ']',
            CHAR_SEMICOLON: ';',
            CHAR_SINGLE_QUOTE: '\'',
            CHAR_SPACE: ' ',
            CHAR_TAB: '\t',
            CHAR_UNDERSCORE: '_',
            CHAR_VERTICAL_LINE: '|',
            CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF'
        };
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const fill = __webpack_require__("../../node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js");
        const stringify = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js");
        const append = (queue = '', stash = '', enclose = false)=>{
            const result = [];
            queue = [].concat(queue);
            stash = [].concat(stash);
            if (!stash.length) return queue;
            if (!queue.length) return enclose ? utils.flatten(stash).map((ele)=>`{${ele}}`) : stash;
            for (const item of queue)if (Array.isArray(item)) for (const value1 of item)result.push(append(value1, stash, enclose));
            else for (let ele of stash){
                if (true === enclose && 'string' == typeof ele) ele = `{${ele}}`;
                result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
            }
            return utils.flatten(result);
        };
        const expand = (ast, options = {})=>{
            const rangeLimit = void 0 === options.rangeLimit ? 1000 : options.rangeLimit;
            const walk = (node, parent = {})=>{
                node.queue = [];
                let p = parent;
                let q = parent.queue;
                while('brace' !== p.type && 'root' !== p.type && p.parent){
                    p = p.parent;
                    q = p.queue;
                }
                if (node.invalid || node.dollar) {
                    q.push(append(q.pop(), stringify(node, options)));
                    return;
                }
                if ('brace' === node.type && true !== node.invalid && 2 === node.nodes.length) {
                    q.push(append(q.pop(), [
                        '{}'
                    ]));
                    return;
                }
                if (node.nodes && node.ranges > 0) {
                    const args = utils.reduce(node.nodes);
                    if (utils.exceedsLimit(...args, options.step, rangeLimit)) throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
                    let range = fill(...args, options);
                    if (0 === range.length) range = stringify(node, options);
                    q.push(append(q.pop(), range));
                    node.nodes = [];
                    return;
                }
                const enclose = utils.encloseBrace(node);
                let queue = node.queue;
                let block = node;
                while('brace' !== block.type && 'root' !== block.type && block.parent){
                    block = block.parent;
                    queue = block.queue;
                }
                for(let i = 0; i < node.nodes.length; i++){
                    const child = node.nodes[i];
                    if ('comma' === child.type && 'brace' === node.type) {
                        if (1 === i) queue.push('');
                        queue.push('');
                        continue;
                    }
                    if ('close' === child.type) {
                        q.push(append(q.pop(), queue, enclose));
                        continue;
                    }
                    if (child.value && 'open' !== child.type) {
                        queue.push(append(queue.pop(), child.value));
                        continue;
                    }
                    if (child.nodes) walk(child, node);
                }
                return queue;
            };
            return utils.flatten(walk(ast));
        };
        module.exports = expand;
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const stringify = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js");
        const { MAX_LENGTH, CHAR_BACKSLASH, CHAR_BACKTICK, CHAR_COMMA, CHAR_DOT, CHAR_LEFT_PARENTHESES, CHAR_RIGHT_PARENTHESES, CHAR_LEFT_CURLY_BRACE, CHAR_RIGHT_CURLY_BRACE, CHAR_LEFT_SQUARE_BRACKET, CHAR_RIGHT_SQUARE_BRACKET, CHAR_DOUBLE_QUOTE, CHAR_SINGLE_QUOTE, CHAR_NO_BREAK_SPACE, CHAR_ZERO_WIDTH_NOBREAK_SPACE } = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js");
        const parse = (input, options = {})=>{
            if ('string' != typeof input) throw new TypeError('Expected a string');
            const opts = options || {};
            const max = 'number' == typeof opts.maxLength ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
            if (input.length > max) throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
            const ast = {
                type: 'root',
                input,
                nodes: []
            };
            const stack = [
                ast
            ];
            let block = ast;
            let prev = ast;
            let brackets = 0;
            const length = input.length;
            let index = 0;
            let depth = 0;
            let value1;
            const advance = ()=>input[index++];
            const push = (node)=>{
                if ('text' === node.type && 'dot' === prev.type) prev.type = 'text';
                if (prev && 'text' === prev.type && 'text' === node.type) {
                    prev.value += node.value;
                    return;
                }
                block.nodes.push(node);
                node.parent = block;
                node.prev = prev;
                prev = node;
                return node;
            };
            push({
                type: 'bos'
            });
            while(index < length){
                block = stack[stack.length - 1];
                value1 = advance();
                if (value1 === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value1 === CHAR_NO_BREAK_SPACE) continue;
                if (value1 === CHAR_BACKSLASH) {
                    push({
                        type: 'text',
                        value: (options.keepEscaping ? value1 : '') + advance()
                    });
                    continue;
                }
                if (value1 === CHAR_RIGHT_SQUARE_BRACKET) {
                    push({
                        type: 'text',
                        value: '\\' + value1
                    });
                    continue;
                }
                if (value1 === CHAR_LEFT_SQUARE_BRACKET) {
                    brackets++;
                    let next;
                    while(index < length && (next = advance())){
                        value1 += next;
                        if (next === CHAR_LEFT_SQUARE_BRACKET) {
                            brackets++;
                            continue;
                        }
                        if (next === CHAR_BACKSLASH) {
                            value1 += advance();
                            continue;
                        }
                        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                            brackets--;
                            if (0 === brackets) break;
                        }
                    }
                    push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if (value1 === CHAR_LEFT_PARENTHESES) {
                    block = push({
                        type: 'paren',
                        nodes: []
                    });
                    stack.push(block);
                    push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if (value1 === CHAR_RIGHT_PARENTHESES) {
                    if ('paren' !== block.type) {
                        push({
                            type: 'text',
                            value: value1
                        });
                        continue;
                    }
                    block = stack.pop();
                    push({
                        type: 'text',
                        value: value1
                    });
                    block = stack[stack.length - 1];
                    continue;
                }
                if (value1 === CHAR_DOUBLE_QUOTE || value1 === CHAR_SINGLE_QUOTE || value1 === CHAR_BACKTICK) {
                    const open = value1;
                    let next;
                    if (true !== options.keepQuotes) value1 = '';
                    while(index < length && (next = advance())){
                        if (next === CHAR_BACKSLASH) {
                            value1 += next + advance();
                            continue;
                        }
                        if (next === open) {
                            if (true === options.keepQuotes) value1 += next;
                            break;
                        }
                        value1 += next;
                    }
                    push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if (value1 === CHAR_LEFT_CURLY_BRACE) {
                    depth++;
                    const dollar = prev.value && '$' === prev.value.slice(-1) || true === block.dollar;
                    const brace = {
                        type: 'brace',
                        open: true,
                        close: false,
                        dollar,
                        depth,
                        commas: 0,
                        ranges: 0,
                        nodes: []
                    };
                    block = push(brace);
                    stack.push(block);
                    push({
                        type: 'open',
                        value: value1
                    });
                    continue;
                }
                if (value1 === CHAR_RIGHT_CURLY_BRACE) {
                    if ('brace' !== block.type) {
                        push({
                            type: 'text',
                            value: value1
                        });
                        continue;
                    }
                    const type = 'close';
                    block = stack.pop();
                    block.close = true;
                    push({
                        type,
                        value: value1
                    });
                    depth--;
                    block = stack[stack.length - 1];
                    continue;
                }
                if (value1 === CHAR_COMMA && depth > 0) {
                    if (block.ranges > 0) {
                        block.ranges = 0;
                        const open = block.nodes.shift();
                        block.nodes = [
                            open,
                            {
                                type: 'text',
                                value: stringify(block)
                            }
                        ];
                    }
                    push({
                        type: 'comma',
                        value: value1
                    });
                    block.commas++;
                    continue;
                }
                if (value1 === CHAR_DOT && depth > 0 && 0 === block.commas) {
                    const siblings = block.nodes;
                    if (0 === depth || 0 === siblings.length) {
                        push({
                            type: 'text',
                            value: value1
                        });
                        continue;
                    }
                    if ('dot' === prev.type) {
                        block.range = [];
                        prev.value += value1;
                        prev.type = 'range';
                        if (3 !== block.nodes.length && 5 !== block.nodes.length) {
                            block.invalid = true;
                            block.ranges = 0;
                            prev.type = 'text';
                            continue;
                        }
                        block.ranges++;
                        block.args = [];
                        continue;
                    }
                    if ('range' === prev.type) {
                        siblings.pop();
                        const before = siblings[siblings.length - 1];
                        before.value += prev.value + value1;
                        prev = before;
                        block.ranges--;
                        continue;
                    }
                    push({
                        type: 'dot',
                        value: value1
                    });
                    continue;
                }
                push({
                    type: 'text',
                    value: value1
                });
            }
            do {
                block = stack.pop();
                if ('root' !== block.type) {
                    block.nodes.forEach((node)=>{
                        if (!node.nodes) {
                            if ('open' === node.type) node.isOpen = true;
                            if ('close' === node.type) node.isClose = true;
                            if (!node.nodes) node.type = 'text';
                            node.invalid = true;
                        }
                    });
                    const parent = stack[stack.length - 1];
                    const index = parent.nodes.indexOf(block);
                    parent.nodes.splice(index, 1, ...block.nodes);
                }
            }while (stack.length > 0);
            push({
                type: 'eos'
            });
            return ast;
        };
        module.exports = parse;
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const utils = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js");
        module.exports = (ast, options = {})=>{
            const stringify = (node, parent = {})=>{
                const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
                const invalidNode = true === node.invalid && true === options.escapeInvalid;
                let output = '';
                if (node.value) {
                    if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) return '\\' + node.value;
                    return node.value;
                }
                if (node.value) return node.value;
                if (node.nodes) for (const child of node.nodes)output += stringify(child);
                return output;
            };
            return stringify(ast);
        };
    },
    "../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js": function(__unused_webpack_module, exports) {
        exports.isInteger = (num)=>{
            if ('number' == typeof num) return Number.isInteger(num);
            if ('string' == typeof num && '' !== num.trim()) return Number.isInteger(Number(num));
            return false;
        };
        exports.find = (node, type)=>node.nodes.find((node)=>node.type === type);
        exports.exceedsLimit = (min, max, step = 1, limit)=>{
            if (false === limit) return false;
            if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
            return (Number(max) - Number(min)) / Number(step) >= limit;
        };
        exports.escapeNode = (block, n = 0, type)=>{
            const node = block.nodes[n];
            if (!node) return;
            if (type && node.type === type || 'open' === node.type || 'close' === node.type) {
                if (true !== node.escaped) {
                    node.value = '\\' + node.value;
                    node.escaped = true;
                }
            }
        };
        exports.encloseBrace = (node)=>{
            if ('brace' !== node.type) return false;
            if (node.commas >> 0 + node.ranges >> 0 === 0) {
                node.invalid = true;
                return true;
            }
            return false;
        };
        exports.isInvalidBrace = (block)=>{
            if ('brace' !== block.type) return false;
            if (true === block.invalid || block.dollar) return true;
            if (block.commas >> 0 + block.ranges >> 0 === 0) {
                block.invalid = true;
                return true;
            }
            if (true !== block.open || true !== block.close) {
                block.invalid = true;
                return true;
            }
            return false;
        };
        exports.isOpenOrClose = (node)=>{
            if ('open' === node.type || 'close' === node.type) return true;
            return true === node.open || true === node.close;
        };
        exports.reduce = (nodes)=>nodes.reduce((acc, node)=>{
                if ('text' === node.type) acc.push(node.value);
                if ('range' === node.type) node.type = 'text';
                return acc;
            }, []);
        exports.flatten = (...args)=>{
            const result = [];
            const flat = (arr)=>{
                for(let i = 0; i < arr.length; i++){
                    const ele = arr[i];
                    if (Array.isArray(ele)) {
                        flat(ele);
                        continue;
                    }
                    if (void 0 !== ele) result.push(ele);
                }
                return result;
            };
            flat(args);
            return result;
        };
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const taskManager = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/managers/tasks.js");
        const async_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/async.js");
        const stream_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/stream.js");
        const sync_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/sync.js");
        const settings_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/settings.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        async function FastGlob(source, options) {
            assertPatternsInput(source);
            const works = getWorks(source, async_1.default, options);
            const result = await Promise.all(works);
            return utils.array.flatten(result);
        }
        (function(FastGlob) {
            FastGlob.glob = FastGlob;
            FastGlob.globSync = sync;
            FastGlob.globStream = stream;
            FastGlob.async = FastGlob;
            function sync(source, options) {
                assertPatternsInput(source);
                const works = getWorks(source, sync_1.default, options);
                return utils.array.flatten(works);
            }
            FastGlob.sync = sync;
            function stream(source, options) {
                assertPatternsInput(source);
                const works = getWorks(source, stream_1.default, options);
                return utils.stream.merge(works);
            }
            FastGlob.stream = stream;
            function generateTasks(source, options) {
                assertPatternsInput(source);
                const patterns = [].concat(source);
                const settings = new settings_1.default(options);
                return taskManager.generate(patterns, settings);
            }
            FastGlob.generateTasks = generateTasks;
            function isDynamicPattern(source, options) {
                assertPatternsInput(source);
                const settings = new settings_1.default(options);
                return utils.pattern.isDynamicPattern(source, settings);
            }
            FastGlob.isDynamicPattern = isDynamicPattern;
            function escapePath(source) {
                assertPatternsInput(source);
                return utils.path.escape(source);
            }
            FastGlob.escapePath = escapePath;
            function convertPathToPattern(source) {
                assertPatternsInput(source);
                return utils.path.convertPathToPattern(source);
            }
            FastGlob.convertPathToPattern = convertPathToPattern;
            let posix;
            (function(posix) {
                function escapePath(source) {
                    assertPatternsInput(source);
                    return utils.path.escapePosixPath(source);
                }
                posix.escapePath = escapePath;
                function convertPathToPattern(source) {
                    assertPatternsInput(source);
                    return utils.path.convertPosixPathToPattern(source);
                }
                posix.convertPathToPattern = convertPathToPattern;
            })(posix = FastGlob.posix || (FastGlob.posix = {}));
            let win32;
            (function(win32) {
                function escapePath(source) {
                    assertPatternsInput(source);
                    return utils.path.escapeWindowsPath(source);
                }
                win32.escapePath = escapePath;
                function convertPathToPattern(source) {
                    assertPatternsInput(source);
                    return utils.path.convertWindowsPathToPattern(source);
                }
                win32.convertPathToPattern = convertPathToPattern;
            })(win32 = FastGlob.win32 || (FastGlob.win32 = {}));
        })(FastGlob || (FastGlob = {}));
        function getWorks(source, _Provider, options) {
            const patterns = [].concat(source);
            const settings = new settings_1.default(options);
            const tasks = taskManager.generate(patterns, settings);
            const provider = new _Provider(settings);
            return tasks.map(provider.read, provider);
        }
        function assertPatternsInput(input) {
            const source = [].concat(input);
            const isValidSource = source.every((item)=>utils.string.isString(item) && !utils.string.isEmpty(item));
            if (!isValidSource) throw new TypeError('Patterns must be a string (non empty) or an array of strings');
        }
        module.exports = FastGlob;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/managers/tasks.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        function generate(input, settings) {
            const patterns = processPatterns(input, settings);
            const ignore = processPatterns(settings.ignore, settings);
            const positivePatterns = getPositivePatterns(patterns);
            const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
            const staticPatterns = positivePatterns.filter((pattern)=>utils.pattern.isStaticPattern(pattern, settings));
            const dynamicPatterns = positivePatterns.filter((pattern)=>utils.pattern.isDynamicPattern(pattern, settings));
            const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
            const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
            return staticTasks.concat(dynamicTasks);
        }
        exports.generate = generate;
        function processPatterns(input, settings) {
            let patterns = input;
            if (settings.braceExpansion) patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
            if (settings.baseNameMatch) patterns = patterns.map((pattern)=>pattern.includes('/') ? pattern : `**/${pattern}`);
            return patterns.map((pattern)=>utils.pattern.removeDuplicateSlashes(pattern));
        }
        function convertPatternsToTasks(positive, negative, dynamic) {
            const tasks = [];
            const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
            const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
            const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
            const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
            tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
            if ('.' in insideCurrentDirectoryGroup) tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));
            else tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
            return tasks;
        }
        exports.convertPatternsToTasks = convertPatternsToTasks;
        function getPositivePatterns(patterns) {
            return utils.pattern.getPositivePatterns(patterns);
        }
        exports.getPositivePatterns = getPositivePatterns;
        function getNegativePatternsAsPositive(patterns, ignore) {
            const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
            const positive = negative.map(utils.pattern.convertToPositivePattern);
            return positive;
        }
        exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
        function groupPatternsByBaseDirectory(patterns) {
            const group = {};
            return patterns.reduce((collection, pattern)=>{
                const base = utils.pattern.getBaseDirectory(pattern);
                if (base in collection) collection[base].push(pattern);
                else collection[base] = [
                    pattern
                ];
                return collection;
            }, group);
        }
        exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
        function convertPatternGroupsToTasks(positive, negative, dynamic) {
            return Object.keys(positive).map((base)=>convertPatternGroupToTask(base, positive[base], negative, dynamic));
        }
        exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
        function convertPatternGroupToTask(base, positive, negative, dynamic) {
            return {
                dynamic,
                positive,
                negative,
                base,
                patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
            };
        }
        exports.convertPatternGroupToTask = convertPatternGroupToTask;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/async.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const async_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/async.js");
        const provider_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/provider.js");
        class ProviderAsync extends provider_1.default {
            constructor(){
                super(...arguments);
                this._reader = new async_1.default(this._settings);
            }
            async read(task) {
                const root = this._getRootDirectory(task);
                const options = this._getReaderOptions(task);
                const entries = await this.api(root, task, options);
                return entries.map((entry)=>options.transform(entry));
            }
            api(root, task, options) {
                if (task.dynamic) return this._reader.dynamic(root, options);
                return this._reader.static(task.patterns, options);
            }
        }
        exports["default"] = ProviderAsync;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/deep.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        const partial_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/matchers/partial.js");
        class DeepFilter {
            constructor(_settings, _micromatchOptions){
                this._settings = _settings;
                this._micromatchOptions = _micromatchOptions;
            }
            getFilter(basePath, positive, negative) {
                const matcher = this._getMatcher(positive);
                const negativeRe = this._getNegativePatternsRe(negative);
                return (entry)=>this._filter(basePath, entry, matcher, negativeRe);
            }
            _getMatcher(patterns) {
                return new partial_1.default(patterns, this._settings, this._micromatchOptions);
            }
            _getNegativePatternsRe(patterns) {
                const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
                return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
            }
            _filter(basePath, entry, matcher, negativeRe) {
                if (this._isSkippedByDeep(basePath, entry.path)) return false;
                if (this._isSkippedSymbolicLink(entry)) return false;
                const filepath = utils.path.removeLeadingDotSegment(entry.path);
                if (this._isSkippedByPositivePatterns(filepath, matcher)) return false;
                return this._isSkippedByNegativePatterns(filepath, negativeRe);
            }
            _isSkippedByDeep(basePath, entryPath) {
                if (this._settings.deep === 1 / 0) return false;
                return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
            }
            _getEntryLevel(basePath, entryPath) {
                const entryPathDepth = entryPath.split('/').length;
                if ('' === basePath) return entryPathDepth;
                const basePathDepth = basePath.split('/').length;
                return entryPathDepth - basePathDepth;
            }
            _isSkippedSymbolicLink(entry) {
                return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
            }
            _isSkippedByPositivePatterns(entryPath, matcher) {
                return !this._settings.baseNameMatch && !matcher.match(entryPath);
            }
            _isSkippedByNegativePatterns(entryPath, patternsRe) {
                return !utils.pattern.matchAny(entryPath, patternsRe);
            }
        }
        exports["default"] = DeepFilter;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/entry.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        class EntryFilter {
            constructor(_settings, _micromatchOptions){
                this._settings = _settings;
                this._micromatchOptions = _micromatchOptions;
                this.index = new Map();
            }
            getFilter(positive, negative) {
                const [absoluteNegative, relativeNegative] = utils.pattern.partitionAbsoluteAndRelative(negative);
                const patterns = {
                    positive: {
                        all: utils.pattern.convertPatternsToRe(positive, this._micromatchOptions)
                    },
                    negative: {
                        absolute: utils.pattern.convertPatternsToRe(absoluteNegative, Object.assign(Object.assign({}, this._micromatchOptions), {
                            dot: true
                        })),
                        relative: utils.pattern.convertPatternsToRe(relativeNegative, Object.assign(Object.assign({}, this._micromatchOptions), {
                            dot: true
                        }))
                    }
                };
                return (entry)=>this._filter(entry, patterns);
            }
            _filter(entry, patterns) {
                const filepath = utils.path.removeLeadingDotSegment(entry.path);
                if (this._settings.unique && this._isDuplicateEntry(filepath)) return false;
                if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) return false;
                const isMatched = this._isMatchToPatternsSet(filepath, patterns, entry.dirent.isDirectory());
                if (this._settings.unique && isMatched) this._createIndexRecord(filepath);
                return isMatched;
            }
            _isDuplicateEntry(filepath) {
                return this.index.has(filepath);
            }
            _createIndexRecord(filepath) {
                this.index.set(filepath, void 0);
            }
            _onlyFileFilter(entry) {
                return this._settings.onlyFiles && !entry.dirent.isFile();
            }
            _onlyDirectoryFilter(entry) {
                return this._settings.onlyDirectories && !entry.dirent.isDirectory();
            }
            _isMatchToPatternsSet(filepath, patterns, isDirectory) {
                const isMatched = this._isMatchToPatterns(filepath, patterns.positive.all, isDirectory);
                if (!isMatched) return false;
                const isMatchedByRelativeNegative = this._isMatchToPatterns(filepath, patterns.negative.relative, isDirectory);
                if (isMatchedByRelativeNegative) return false;
                const isMatchedByAbsoluteNegative = this._isMatchToAbsoluteNegative(filepath, patterns.negative.absolute, isDirectory);
                if (isMatchedByAbsoluteNegative) return false;
                return true;
            }
            _isMatchToAbsoluteNegative(filepath, patternsRe, isDirectory) {
                if (0 === patternsRe.length) return false;
                const fullpath = utils.path.makeAbsolute(this._settings.cwd, filepath);
                return this._isMatchToPatterns(fullpath, patternsRe, isDirectory);
            }
            _isMatchToPatterns(filepath, patternsRe, isDirectory) {
                if (0 === patternsRe.length) return false;
                const isMatched = utils.pattern.matchAny(filepath, patternsRe);
                if (!isMatched && isDirectory) return utils.pattern.matchAny(filepath + '/', patternsRe);
                return isMatched;
            }
        }
        exports["default"] = EntryFilter;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/error.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        class ErrorFilter {
            constructor(_settings){
                this._settings = _settings;
            }
            getFilter() {
                return (error)=>this._isNonFatalError(error);
            }
            _isNonFatalError(error) {
                return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
            }
        }
        exports["default"] = ErrorFilter;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/matchers/matcher.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        class Matcher {
            constructor(_patterns, _settings, _micromatchOptions){
                this._patterns = _patterns;
                this._settings = _settings;
                this._micromatchOptions = _micromatchOptions;
                this._storage = [];
                this._fillStorage();
            }
            _fillStorage() {
                for (const pattern of this._patterns){
                    const segments = this._getPatternSegments(pattern);
                    const sections = this._splitSegmentsIntoSections(segments);
                    this._storage.push({
                        complete: sections.length <= 1,
                        pattern,
                        segments,
                        sections
                    });
                }
            }
            _getPatternSegments(pattern) {
                const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
                return parts.map((part)=>{
                    const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
                    if (!dynamic) return {
                        dynamic: false,
                        pattern: part
                    };
                    return {
                        dynamic: true,
                        pattern: part,
                        patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
                    };
                });
            }
            _splitSegmentsIntoSections(segments) {
                return utils.array.splitWhen(segments, (segment)=>segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
            }
        }
        exports["default"] = Matcher;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/matchers/partial.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const matcher_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/matchers/matcher.js");
        class PartialMatcher extends matcher_1.default {
            match(filepath) {
                const parts = filepath.split('/');
                const levels = parts.length;
                const patterns = this._storage.filter((info)=>!info.complete || info.segments.length > levels);
                for (const pattern of patterns){
                    const section = pattern.sections[0];
                    if (!pattern.complete && levels > section.length) return true;
                    const match = parts.every((part, index)=>{
                        const segment = pattern.segments[index];
                        if (segment.dynamic && segment.patternRe.test(part)) return true;
                        if (!segment.dynamic && segment.pattern === part) return true;
                        return false;
                    });
                    if (match) return true;
                }
                return false;
            }
        }
        exports["default"] = PartialMatcher;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/provider.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const path = __webpack_require__("path");
        const deep_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/deep.js");
        const entry_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/entry.js");
        const error_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/filters/error.js");
        const entry_2 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/transformers/entry.js");
        class Provider {
            constructor(_settings){
                this._settings = _settings;
                this.errorFilter = new error_1.default(this._settings);
                this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
                this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
                this.entryTransformer = new entry_2.default(this._settings);
            }
            _getRootDirectory(task) {
                return path.resolve(this._settings.cwd, task.base);
            }
            _getReaderOptions(task) {
                const basePath = '.' === task.base ? '' : task.base;
                return {
                    basePath,
                    pathSegmentSeparator: '/',
                    concurrency: this._settings.concurrency,
                    deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
                    entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
                    errorFilter: this.errorFilter.getFilter(),
                    followSymbolicLinks: this._settings.followSymbolicLinks,
                    fs: this._settings.fs,
                    stats: this._settings.stats,
                    throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
                    transform: this.entryTransformer.getTransformer()
                };
            }
            _getMicromatchOptions() {
                return {
                    dot: this._settings.dot,
                    matchBase: this._settings.baseNameMatch,
                    nobrace: !this._settings.braceExpansion,
                    nocase: !this._settings.caseSensitiveMatch,
                    noext: !this._settings.extglob,
                    noglobstar: !this._settings.globstar,
                    posix: true,
                    strictSlashes: false
                };
            }
        }
        exports["default"] = Provider;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/stream.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const stream_1 = __webpack_require__("stream");
        const stream_2 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/stream.js");
        const provider_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/provider.js");
        class ProviderStream extends provider_1.default {
            constructor(){
                super(...arguments);
                this._reader = new stream_2.default(this._settings);
            }
            read(task) {
                const root = this._getRootDirectory(task);
                const options = this._getReaderOptions(task);
                const source = this.api(root, task, options);
                const destination = new stream_1.Readable({
                    objectMode: true,
                    read: ()=>{}
                });
                source.once('error', (error)=>destination.emit('error', error)).on('data', (entry)=>destination.emit('data', options.transform(entry))).once('end', ()=>destination.emit('end'));
                destination.once('close', ()=>source.destroy());
                return destination;
            }
            api(root, task, options) {
                if (task.dynamic) return this._reader.dynamic(root, options);
                return this._reader.static(task.patterns, options);
            }
        }
        exports["default"] = ProviderStream;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/sync.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const sync_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/sync.js");
        const provider_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/provider.js");
        class ProviderSync extends provider_1.default {
            constructor(){
                super(...arguments);
                this._reader = new sync_1.default(this._settings);
            }
            read(task) {
                const root = this._getRootDirectory(task);
                const options = this._getReaderOptions(task);
                const entries = this.api(root, task, options);
                return entries.map(options.transform);
            }
            api(root, task, options) {
                if (task.dynamic) return this._reader.dynamic(root, options);
                return this._reader.static(task.patterns, options);
            }
        }
        exports["default"] = ProviderSync;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/providers/transformers/entry.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        class EntryTransformer {
            constructor(_settings){
                this._settings = _settings;
            }
            getTransformer() {
                return (entry)=>this._transform(entry);
            }
            _transform(entry) {
                let filepath = entry.path;
                if (this._settings.absolute) {
                    filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
                    filepath = utils.path.unixify(filepath);
                }
                if (this._settings.markDirectories && entry.dirent.isDirectory()) filepath += '/';
                if (!this._settings.objectMode) return filepath;
                return Object.assign(Object.assign({}, entry), {
                    path: filepath
                });
            }
        }
        exports["default"] = EntryTransformer;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/async.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const fsWalk = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js");
        const reader_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/reader.js");
        const stream_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/stream.js");
        class ReaderAsync extends reader_1.default {
            constructor(){
                super(...arguments);
                this._walkAsync = fsWalk.walk;
                this._readerStream = new stream_1.default(this._settings);
            }
            dynamic(root, options) {
                return new Promise((resolve, reject)=>{
                    this._walkAsync(root, options, (error, entries)=>{
                        if (null === error) resolve(entries);
                        else reject(error);
                    });
                });
            }
            async static(patterns, options) {
                const entries = [];
                const stream = this._readerStream.static(patterns, options);
                return new Promise((resolve, reject)=>{
                    stream.once('error', reject);
                    stream.on('data', (entry)=>entries.push(entry));
                    stream.once('end', ()=>resolve(entries));
                });
            }
        }
        exports["default"] = ReaderAsync;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/reader.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const path = __webpack_require__("path");
        const fsStat = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js");
        class Reader {
            constructor(_settings){
                this._settings = _settings;
                this._fsStatSettings = new fsStat.Settings({
                    followSymbolicLink: this._settings.followSymbolicLinks,
                    fs: this._settings.fs,
                    throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
                });
            }
            _getFullEntryPath(filepath) {
                return path.resolve(this._settings.cwd, filepath);
            }
            _makeEntry(stats, pattern) {
                const entry = {
                    name: pattern,
                    path: pattern,
                    dirent: utils.fs.createDirentFromStats(pattern, stats)
                };
                if (this._settings.stats) entry.stats = stats;
                return entry;
            }
            _isFatalError(error) {
                return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
            }
        }
        exports["default"] = Reader;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/stream.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const stream_1 = __webpack_require__("stream");
        const fsStat = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js");
        const fsWalk = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js");
        const reader_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/reader.js");
        class ReaderStream extends reader_1.default {
            constructor(){
                super(...arguments);
                this._walkStream = fsWalk.walkStream;
                this._stat = fsStat.stat;
            }
            dynamic(root, options) {
                return this._walkStream(root, options);
            }
            static(patterns, options) {
                const filepaths = patterns.map(this._getFullEntryPath, this);
                const stream = new stream_1.PassThrough({
                    objectMode: true
                });
                stream._write = (index, _enc, done)=>this._getEntry(filepaths[index], patterns[index], options).then((entry)=>{
                        if (null !== entry && options.entryFilter(entry)) stream.push(entry);
                        if (index === filepaths.length - 1) stream.end();
                        done();
                    }).catch(done);
                for(let i = 0; i < filepaths.length; i++)stream.write(i);
                return stream;
            }
            _getEntry(filepath, pattern, options) {
                return this._getStat(filepath).then((stats)=>this._makeEntry(stats, pattern)).catch((error)=>{
                    if (options.errorFilter(error)) return null;
                    throw error;
                });
            }
            _getStat(filepath) {
                return new Promise((resolve, reject)=>{
                    this._stat(filepath, this._fsStatSettings, (error, stats)=>null === error ? resolve(stats) : reject(error));
                });
            }
        }
        exports["default"] = ReaderStream;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/sync.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        const fsStat = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js");
        const fsWalk = __webpack_require__("../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js");
        const reader_1 = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/readers/reader.js");
        class ReaderSync extends reader_1.default {
            constructor(){
                super(...arguments);
                this._walkSync = fsWalk.walkSync;
                this._statSync = fsStat.statSync;
            }
            dynamic(root, options) {
                return this._walkSync(root, options);
            }
            static(patterns, options) {
                const entries = [];
                for (const pattern of patterns){
                    const filepath = this._getFullEntryPath(pattern);
                    const entry = this._getEntry(filepath, pattern, options);
                    if (null !== entry && !!options.entryFilter(entry)) entries.push(entry);
                }
                return entries;
            }
            _getEntry(filepath, pattern, options) {
                try {
                    const stats = this._getStat(filepath);
                    return this._makeEntry(stats, pattern);
                } catch (error) {
                    if (options.errorFilter(error)) return null;
                    throw error;
                }
            }
            _getStat(filepath) {
                return this._statSync(filepath, this._fsStatSettings);
            }
        }
        exports["default"] = ReaderSync;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/settings.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
        const fs = __webpack_require__("fs");
        const os = __webpack_require__("os");
        const CPU_COUNT = Math.max(os.cpus().length, 1);
        exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
            lstat: fs.lstat,
            lstatSync: fs.lstatSync,
            stat: fs.stat,
            statSync: fs.statSync,
            readdir: fs.readdir,
            readdirSync: fs.readdirSync
        };
        class Settings {
            constructor(_options = {}){
                this._options = _options;
                this.absolute = this._getValue(this._options.absolute, false);
                this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
                this.braceExpansion = this._getValue(this._options.braceExpansion, true);
                this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
                this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
                this.cwd = this._getValue(this._options.cwd, process.cwd());
                this.deep = this._getValue(this._options.deep, 1 / 0);
                this.dot = this._getValue(this._options.dot, false);
                this.extglob = this._getValue(this._options.extglob, true);
                this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
                this.fs = this._getFileSystemMethods(this._options.fs);
                this.globstar = this._getValue(this._options.globstar, true);
                this.ignore = this._getValue(this._options.ignore, []);
                this.markDirectories = this._getValue(this._options.markDirectories, false);
                this.objectMode = this._getValue(this._options.objectMode, false);
                this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
                this.onlyFiles = this._getValue(this._options.onlyFiles, true);
                this.stats = this._getValue(this._options.stats, false);
                this.suppressErrors = this._getValue(this._options.suppressErrors, false);
                this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
                this.unique = this._getValue(this._options.unique, true);
                if (this.onlyDirectories) this.onlyFiles = false;
                if (this.stats) this.objectMode = true;
                this.ignore = [].concat(this.ignore);
            }
            _getValue(option, value1) {
                return void 0 === option ? value1 : option;
            }
            _getFileSystemMethods(methods = {}) {
                return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
            }
        }
        exports["default"] = Settings;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/array.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.splitWhen = exports.flatten = void 0;
        function flatten(items) {
            return items.reduce((collection, item)=>[].concat(collection, item), []);
        }
        exports.flatten = flatten;
        function splitWhen(items, predicate) {
            const result = [
                []
            ];
            let groupIndex = 0;
            for (const item of items)if (predicate(item)) {
                groupIndex++;
                result[groupIndex] = [];
            } else result[groupIndex].push(item);
            return result;
        }
        exports.splitWhen = splitWhen;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/errno.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isEnoentCodeError = void 0;
        function isEnoentCodeError(error) {
            return 'ENOENT' === error.code;
        }
        exports.isEnoentCodeError = isEnoentCodeError;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/fs.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createDirentFromStats = void 0;
        class DirentFromStats {
            constructor(name, stats){
                this.name = name;
                this.isBlockDevice = stats.isBlockDevice.bind(stats);
                this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
                this.isDirectory = stats.isDirectory.bind(stats);
                this.isFIFO = stats.isFIFO.bind(stats);
                this.isFile = stats.isFile.bind(stats);
                this.isSocket = stats.isSocket.bind(stats);
                this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
            }
        }
        function createDirentFromStats(name, stats) {
            return new DirentFromStats(name, stats);
        }
        exports.createDirentFromStats = createDirentFromStats;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;
        const array = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/array.js");
        exports.array = array;
        const errno = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/errno.js");
        exports.errno = errno;
        const fs = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/fs.js");
        exports.fs = fs;
        const path = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/path.js");
        exports.path = path;
        const pattern = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/pattern.js");
        exports.pattern = pattern;
        const stream = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/stream.js");
        exports.stream = stream;
        const string = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/string.js");
        exports.string = string;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/path.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.convertPosixPathToPattern = exports.convertWindowsPathToPattern = exports.convertPathToPattern = exports.escapePosixPath = exports.escapeWindowsPath = exports.escape = exports.removeLeadingDotSegment = exports.makeAbsolute = exports.unixify = void 0;
        const os = __webpack_require__("os");
        const path = __webpack_require__("path");
        const IS_WINDOWS_PLATFORM = 'win32' === os.platform();
        const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
        const POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
        const WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
        const DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
        const WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
        function unixify(filepath) {
            return filepath.replace(/\\/g, '/');
        }
        exports.unixify = unixify;
        function makeAbsolute(cwd, filepath) {
            return path.resolve(cwd, filepath);
        }
        exports.makeAbsolute = makeAbsolute;
        function removeLeadingDotSegment(entry) {
            if ('.' === entry.charAt(0)) {
                const secondCharactery = entry.charAt(1);
                if ('/' === secondCharactery || '\\' === secondCharactery) return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
            }
            return entry;
        }
        exports.removeLeadingDotSegment = removeLeadingDotSegment;
        exports.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
        function escapeWindowsPath(pattern) {
            return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
        }
        exports.escapeWindowsPath = escapeWindowsPath;
        function escapePosixPath(pattern) {
            return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
        }
        exports.escapePosixPath = escapePosixPath;
        exports.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
        function convertWindowsPathToPattern(filepath) {
            return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, '//$1').replace(WINDOWS_BACKSLASHES_RE, '/');
        }
        exports.convertWindowsPathToPattern = convertWindowsPathToPattern;
        function convertPosixPathToPattern(filepath) {
            return escapePosixPath(filepath);
        }
        exports.convertPosixPathToPattern = convertPosixPathToPattern;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/pattern.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isAbsolute = exports.partitionAbsoluteAndRelative = exports.removeDuplicateSlashes = exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;
        const path = __webpack_require__("path");
        const globParent = __webpack_require__("../../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js");
        const micromatch = __webpack_require__("../../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js");
        const GLOBSTAR = '**';
        const ESCAPE_SYMBOL = '\\';
        const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
        const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
        const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
        const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
        const BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
        const DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
        function isStaticPattern(pattern, options = {}) {
            return !isDynamicPattern(pattern, options);
        }
        exports.isStaticPattern = isStaticPattern;
        function isDynamicPattern(pattern, options = {}) {
            if ('' === pattern) return false;
            if (false === options.caseSensitiveMatch || pattern.includes(ESCAPE_SYMBOL)) return true;
            if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) return true;
            if (false !== options.extglob && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) return true;
            if (false !== options.braceExpansion && hasBraceExpansion(pattern)) return true;
            return false;
        }
        exports.isDynamicPattern = isDynamicPattern;
        function hasBraceExpansion(pattern) {
            const openingBraceIndex = pattern.indexOf('{');
            if (-1 === openingBraceIndex) return false;
            const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);
            if (-1 === closingBraceIndex) return false;
            const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
            return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
        }
        function convertToPositivePattern(pattern) {
            return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
        }
        exports.convertToPositivePattern = convertToPositivePattern;
        function convertToNegativePattern(pattern) {
            return '!' + pattern;
        }
        exports.convertToNegativePattern = convertToNegativePattern;
        function isNegativePattern(pattern) {
            return pattern.startsWith('!') && '(' !== pattern[1];
        }
        exports.isNegativePattern = isNegativePattern;
        function isPositivePattern(pattern) {
            return !isNegativePattern(pattern);
        }
        exports.isPositivePattern = isPositivePattern;
        function getNegativePatterns(patterns) {
            return patterns.filter(isNegativePattern);
        }
        exports.getNegativePatterns = getNegativePatterns;
        function getPositivePatterns(patterns) {
            return patterns.filter(isPositivePattern);
        }
        exports.getPositivePatterns = getPositivePatterns;
        function getPatternsInsideCurrentDirectory(patterns) {
            return patterns.filter((pattern)=>!isPatternRelatedToParentDirectory(pattern));
        }
        exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
        function getPatternsOutsideCurrentDirectory(patterns) {
            return patterns.filter(isPatternRelatedToParentDirectory);
        }
        exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
        function isPatternRelatedToParentDirectory(pattern) {
            return pattern.startsWith('..') || pattern.startsWith('./..');
        }
        exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
        function getBaseDirectory(pattern) {
            return globParent(pattern, {
                flipBackslashes: false
            });
        }
        exports.getBaseDirectory = getBaseDirectory;
        function hasGlobStar(pattern) {
            return pattern.includes(GLOBSTAR);
        }
        exports.hasGlobStar = hasGlobStar;
        function endsWithSlashGlobStar(pattern) {
            return pattern.endsWith('/' + GLOBSTAR);
        }
        exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
        function isAffectDepthOfReadingPattern(pattern) {
            const basename = path.basename(pattern);
            return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
        }
        exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
        function expandPatternsWithBraceExpansion(patterns) {
            return patterns.reduce((collection, pattern)=>collection.concat(expandBraceExpansion(pattern)), []);
        }
        exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
        function expandBraceExpansion(pattern) {
            const patterns = micromatch.braces(pattern, {
                expand: true,
                nodupes: true,
                keepEscaping: true
            });
            patterns.sort((a, b)=>a.length - b.length);
            return patterns.filter((pattern)=>'' !== pattern);
        }
        exports.expandBraceExpansion = expandBraceExpansion;
        function getPatternParts(pattern, options) {
            let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), {
                parts: true
            }));
            if (0 === parts.length) parts = [
                pattern
            ];
            if (parts[0].startsWith('/')) {
                parts[0] = parts[0].slice(1);
                parts.unshift('');
            }
            return parts;
        }
        exports.getPatternParts = getPatternParts;
        function makeRe(pattern, options) {
            return micromatch.makeRe(pattern, options);
        }
        exports.makeRe = makeRe;
        function convertPatternsToRe(patterns, options) {
            return patterns.map((pattern)=>makeRe(pattern, options));
        }
        exports.convertPatternsToRe = convertPatternsToRe;
        function matchAny(entry, patternsRe) {
            return patternsRe.some((patternRe)=>patternRe.test(entry));
        }
        exports.matchAny = matchAny;
        function removeDuplicateSlashes(pattern) {
            return pattern.replace(DOUBLE_SLASH_RE, '/');
        }
        exports.removeDuplicateSlashes = removeDuplicateSlashes;
        function partitionAbsoluteAndRelative(patterns) {
            const absolute = [];
            const relative = [];
            for (const pattern of patterns)if (isAbsolute(pattern)) absolute.push(pattern);
            else relative.push(pattern);
            return [
                absolute,
                relative
            ];
        }
        exports.partitionAbsoluteAndRelative = partitionAbsoluteAndRelative;
        function isAbsolute(pattern) {
            return path.isAbsolute(pattern);
        }
        exports.isAbsolute = isAbsolute;
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/stream.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.merge = void 0;
        const merge2 = __webpack_require__("../../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js");
        function merge(streams) {
            const mergedStream = merge2(streams);
            streams.forEach((stream)=>{
                stream.once('error', (error)=>mergedStream.emit('error', error));
            });
            mergedStream.once('close', ()=>propagateCloseEventToSources(streams));
            mergedStream.once('end', ()=>propagateCloseEventToSources(streams));
            return mergedStream;
        }
        exports.merge = merge;
        function propagateCloseEventToSources(streams) {
            streams.forEach((stream)=>stream.emit('close'));
        }
    },
    "../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/utils/string.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isEmpty = exports.isString = void 0;
        function isString(input) {
            return 'string' == typeof input;
        }
        exports.isString = isString;
        function isEmpty(input) {
            return '' === input;
        }
        exports.isEmpty = isEmpty;
    },
    "../../node_modules/.pnpm/fastq@1.19.1/node_modules/fastq/queue.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var reusify = __webpack_require__("../../node_modules/.pnpm/reusify@1.1.0/node_modules/reusify/reusify.js");
        function fastqueue(context, worker, _concurrency) {
            if ('function' == typeof context) {
                _concurrency = worker;
                worker = context;
                context = null;
            }
            if (!(_concurrency >= 1)) throw new Error('fastqueue concurrency must be equal to or greater than 1');
            var cache = reusify(Task);
            var queueHead = null;
            var queueTail = null;
            var _running = 0;
            var errorHandler = null;
            var self1 = {
                push: push,
                drain: noop,
                saturated: noop,
                pause: pause,
                paused: false,
                get concurrency () {
                    return _concurrency;
                },
                set concurrency (value){
                    if (!(value >= 1)) throw new Error('fastqueue concurrency must be equal to or greater than 1');
                    _concurrency = value;
                    if (self1.paused) return;
                    for(; queueHead && _running < _concurrency;){
                        _running++;
                        release();
                    }
                },
                running: running,
                resume: resume,
                idle: idle,
                length: length,
                getQueue: getQueue,
                unshift: unshift,
                empty: noop,
                kill: kill,
                killAndDrain: killAndDrain,
                error: error
            };
            return self1;
            function running() {
                return _running;
            }
            function pause() {
                self1.paused = true;
            }
            function length() {
                var current = queueHead;
                var counter = 0;
                while(current){
                    current = current.next;
                    counter++;
                }
                return counter;
            }
            function getQueue() {
                var current = queueHead;
                var tasks = [];
                while(current){
                    tasks.push(current.value);
                    current = current.next;
                }
                return tasks;
            }
            function resume() {
                if (!self1.paused) return;
                self1.paused = false;
                if (null === queueHead) {
                    _running++;
                    release();
                    return;
                }
                for(; queueHead && _running < _concurrency;){
                    _running++;
                    release();
                }
            }
            function idle() {
                return 0 === _running && 0 === self1.length();
            }
            function push(value1, done) {
                var current = cache.get();
                current.context = context;
                current.release = release;
                current.value = value1;
                current.callback = done || noop;
                current.errorHandler = errorHandler;
                if (_running >= _concurrency || self1.paused) {
                    if (queueTail) {
                        queueTail.next = current;
                        queueTail = current;
                    } else {
                        queueHead = current;
                        queueTail = current;
                        self1.saturated();
                    }
                } else {
                    _running++;
                    worker.call(context, current.value, current.worked);
                }
            }
            function unshift(value1, done) {
                var current = cache.get();
                current.context = context;
                current.release = release;
                current.value = value1;
                current.callback = done || noop;
                current.errorHandler = errorHandler;
                if (_running >= _concurrency || self1.paused) {
                    if (queueHead) {
                        current.next = queueHead;
                        queueHead = current;
                    } else {
                        queueHead = current;
                        queueTail = current;
                        self1.saturated();
                    }
                } else {
                    _running++;
                    worker.call(context, current.value, current.worked);
                }
            }
            function release(holder) {
                if (holder) cache.release(holder);
                var next = queueHead;
                if (next && _running <= _concurrency) {
                    if (self1.paused) _running--;
                    else {
                        if (queueTail === queueHead) queueTail = null;
                        queueHead = next.next;
                        next.next = null;
                        worker.call(context, next.value, next.worked);
                        if (null === queueTail) self1.empty();
                    }
                } else if (0 === --_running) self1.drain();
            }
            function kill() {
                queueHead = null;
                queueTail = null;
                self1.drain = noop;
            }
            function killAndDrain() {
                queueHead = null;
                queueTail = null;
                self1.drain();
                self1.drain = noop;
            }
            function error(handler) {
                errorHandler = handler;
            }
        }
        function noop() {}
        function Task() {
            this.value = null;
            this.callback = noop;
            this.next = null;
            this.release = noop;
            this.context = null;
            this.errorHandler = null;
            var self1 = this;
            this.worked = function(err, result) {
                var callback = self1.callback;
                var errorHandler = self1.errorHandler;
                var val = self1.value;
                self1.value = null;
                self1.callback = noop;
                if (self1.errorHandler) errorHandler(err, val);
                callback.call(self1.context, err, result);
                self1.release(self1);
            };
        }
        function queueAsPromised(context, worker, _concurrency) {
            if ('function' == typeof context) {
                _concurrency = worker;
                worker = context;
                context = null;
            }
            function asyncWrapper(arg, cb) {
                worker.call(this, arg).then(function(res) {
                    cb(null, res);
                }, cb);
            }
            var queue = fastqueue(context, asyncWrapper, _concurrency);
            var pushCb = queue.push;
            var unshiftCb = queue.unshift;
            queue.push = push;
            queue.unshift = unshift;
            queue.drained = drained;
            return queue;
            function push(value1) {
                var p = new Promise(function(resolve, reject) {
                    pushCb(value1, function(err, result) {
                        if (err) {
                            reject(err);
                            return;
                        }
                        resolve(result);
                    });
                });
                p.catch(noop);
                return p;
            }
            function unshift(value1) {
                var p = new Promise(function(resolve, reject) {
                    unshiftCb(value1, function(err, result) {
                        if (err) {
                            reject(err);
                            return;
                        }
                        resolve(result);
                    });
                });
                p.catch(noop);
                return p;
            }
            function drained() {
                var p = new Promise(function(resolve) {
                    process.nextTick(function() {
                        if (queue.idle()) resolve();
                        else {
                            var previousDrain = queue.drain;
                            queue.drain = function() {
                                if ('function' == typeof previousDrain) previousDrain();
                                resolve();
                                queue.drain = previousDrain;
                            };
                        }
                    });
                });
                return p;
            }
        }
        module.exports = fastqueue;
        module.exports.promise = queueAsPromised;
    },
    "../../node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        /*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */ const util = __webpack_require__("util");
        const toRegexRange = __webpack_require__("../../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js");
        const isObject = (val)=>null !== val && 'object' == typeof val && !Array.isArray(val);
        const transform = (toNumber)=>(value1)=>true === toNumber ? Number(value1) : String(value1);
        const isValidValue = (value1)=>'number' == typeof value1 || 'string' == typeof value1 && '' !== value1;
        const isNumber = (num)=>Number.isInteger(+num);
        const zeros = (input)=>{
            let value1 = `${input}`;
            let index = -1;
            if ('-' === value1[0]) value1 = value1.slice(1);
            if ('0' === value1) return false;
            while('0' === value1[++index]);
            return index > 0;
        };
        const stringify = (start, end, options)=>{
            if ('string' == typeof start || 'string' == typeof end) return true;
            return true === options.stringify;
        };
        const pad = (input, maxLength, toNumber)=>{
            if (maxLength > 0) {
                let dash = '-' === input[0] ? '-' : '';
                if (dash) input = input.slice(1);
                input = dash + input.padStart(dash ? maxLength - 1 : maxLength, '0');
            }
            if (false === toNumber) return String(input);
            return input;
        };
        const toMaxLen = (input, maxLength)=>{
            let negative = '-' === input[0] ? '-' : '';
            if (negative) {
                input = input.slice(1);
                maxLength--;
            }
            while(input.length < maxLength)input = '0' + input;
            return negative ? '-' + input : input;
        };
        const toSequence = (parts, options, maxLen)=>{
            parts.negatives.sort((a, b)=>a < b ? -1 : a > b ? 1 : 0);
            parts.positives.sort((a, b)=>a < b ? -1 : a > b ? 1 : 0);
            let prefix = options.capture ? '' : '?:';
            let positives = '';
            let negatives = '';
            let result;
            if (parts.positives.length) positives = parts.positives.map((v)=>toMaxLen(String(v), maxLen)).join('|');
            if (parts.negatives.length) negatives = `-(${prefix}${parts.negatives.map((v)=>toMaxLen(String(v), maxLen)).join('|')})`;
            result = positives && negatives ? `${positives}|${negatives}` : positives || negatives;
            if (options.wrap) return `(${prefix}${result})`;
            return result;
        };
        const toRange = (a, b, isNumbers, options)=>{
            if (isNumbers) return toRegexRange(a, b, {
                wrap: false,
                ...options
            });
            let start = String.fromCharCode(a);
            if (a === b) return start;
            let stop = String.fromCharCode(b);
            return `[${start}-${stop}]`;
        };
        const toRegex = (start, end, options)=>{
            if (Array.isArray(start)) {
                let wrap = true === options.wrap;
                let prefix = options.capture ? '' : '?:';
                return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
            }
            return toRegexRange(start, end, options);
        };
        const rangeError = (...args)=>new RangeError('Invalid range arguments: ' + util.inspect(...args));
        const invalidRange = (start, end, options)=>{
            if (true === options.strictRanges) throw rangeError([
                start,
                end
            ]);
            return [];
        };
        const invalidStep = (step, options)=>{
            if (true === options.strictRanges) throw new TypeError(`Expected step "${step}" to be a number`);
            return [];
        };
        const fillNumbers = (start, end, step = 1, options = {})=>{
            let a = Number(start);
            let b = Number(end);
            if (!Number.isInteger(a) || !Number.isInteger(b)) {
                if (true === options.strictRanges) throw rangeError([
                    start,
                    end
                ]);
                return [];
            }
            if (0 === a) a = 0;
            if (0 === b) b = 0;
            let descending = a > b;
            let startString = String(start);
            let endString = String(end);
            let stepString = String(step);
            step = Math.max(Math.abs(step), 1);
            let padded = zeros(startString) || zeros(endString) || zeros(stepString);
            let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
            let toNumber = false === padded && false === stringify(start, end, options);
            let format = options.transform || transform(toNumber);
            if (options.toRegex && 1 === step) return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
            let parts = {
                negatives: [],
                positives: []
            };
            let push = (num)=>parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
            let range = [];
            let index = 0;
            while(descending ? a >= b : a <= b){
                if (true === options.toRegex && step > 1) push(a);
                else range.push(pad(format(a, index), maxLen, toNumber));
                a = descending ? a - step : a + step;
                index++;
            }
            if (true === options.toRegex) return step > 1 ? toSequence(parts, options, maxLen) : toRegex(range, null, {
                wrap: false,
                ...options
            });
            return range;
        };
        const fillLetters = (start, end, step = 1, options = {})=>{
            if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) return invalidRange(start, end, options);
            let format = options.transform || ((val)=>String.fromCharCode(val));
            let a = `${start}`.charCodeAt(0);
            let b = `${end}`.charCodeAt(0);
            let descending = a > b;
            let min = Math.min(a, b);
            let max = Math.max(a, b);
            if (options.toRegex && 1 === step) return toRange(min, max, false, options);
            let range = [];
            let index = 0;
            while(descending ? a >= b : a <= b){
                range.push(format(a, index));
                a = descending ? a - step : a + step;
                index++;
            }
            if (true === options.toRegex) return toRegex(range, null, {
                wrap: false,
                options
            });
            return range;
        };
        const fill = (start, end, step, options = {})=>{
            if (null == end && isValidValue(start)) return [
                start
            ];
            if (!isValidValue(start) || !isValidValue(end)) return invalidRange(start, end, options);
            if ('function' == typeof step) return fill(start, end, 1, {
                transform: step
            });
            if (isObject(step)) return fill(start, end, 0, step);
            let opts = {
                ...options
            };
            if (true === opts.capture) opts.wrap = true;
            step = step || opts.step || 1;
            if (!isNumber(step)) {
                if (null != step && !isObject(step)) return invalidStep(step, opts);
                return fill(start, end, 1, step);
            }
            if (isNumber(start) && isNumber(end)) return fillNumbers(start, end, step, opts);
            return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
        };
        module.exports = fill;
    },
    "../../node_modules/.pnpm/git-up@7.0.0/node_modules/git-up/lib/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var parseUrl = __webpack_require__("../../node_modules/.pnpm/parse-url@8.1.0/node_modules/parse-url/dist/index.js"), isSsh = __webpack_require__("../../node_modules/.pnpm/is-ssh@1.4.1/node_modules/is-ssh/lib/index.js");
        function gitUp(input) {
            var output = parseUrl(input);
            output.token = "";
            if ("x-oauth-basic" === output.password) output.token = output.user;
            else if ("x-token-auth" === output.user) output.token = output.password;
            if (isSsh(output.protocols) || 0 === output.protocols.length && isSsh(input)) output.protocol = "ssh";
            else if (output.protocols.length) output.protocol = output.protocols[0];
            else {
                output.protocol = "file";
                output.protocols = [
                    "file"
                ];
            }
            output.href = output.href.replace(/\/$/, "");
            return output;
        }
        module.exports = gitUp;
    },
    "../../node_modules/.pnpm/git-url-parse@13.1.1/node_modules/git-url-parse/lib/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var gitUp = __webpack_require__("../../node_modules/.pnpm/git-up@7.0.0/node_modules/git-up/lib/index.js");
        function gitUrlParse(url) {
            if ("string" != typeof url) throw new Error("The url must be a string.");
            var shorthandRe = /^([a-z\d-]{1,39})\/([-\.\w]{1,100})$/i;
            if (shorthandRe.test(url)) url = "https://github.com/" + url;
            var urlInfo = gitUp(url), sourceParts = urlInfo.resource.split("."), splits = null;
            urlInfo.toString = function(type) {
                return gitUrlParse.stringify(this, type);
            };
            urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(".") : urlInfo.source = urlInfo.resource;
            urlInfo.git_suffix = /\.git$/.test(urlInfo.pathname);
            urlInfo.name = decodeURIComponent((urlInfo.pathname || urlInfo.href).replace(/(^\/)|(\/$)/g, '').replace(/\.git$/, ""));
            urlInfo.owner = decodeURIComponent(urlInfo.user);
            switch(urlInfo.source){
                case "git.cloudforge.com":
                    urlInfo.owner = urlInfo.user;
                    urlInfo.organization = sourceParts[0];
                    urlInfo.source = "cloudforge.com";
                    break;
                case "visualstudio.com":
                    if ('vs-ssh.visualstudio.com' === urlInfo.resource) {
                        splits = urlInfo.name.split("/");
                        if (4 === splits.length) {
                            urlInfo.organization = splits[1];
                            urlInfo.owner = splits[2];
                            urlInfo.name = splits[3];
                            urlInfo.full_name = splits[2] + '/' + splits[3];
                        }
                        break;
                    }
                    splits = urlInfo.name.split("/");
                    if (2 === splits.length) {
                        urlInfo.owner = splits[1];
                        urlInfo.name = splits[1];
                        urlInfo.full_name = '_git/' + urlInfo.name;
                    } else if (3 === splits.length) {
                        urlInfo.name = splits[2];
                        if ('DefaultCollection' === splits[0]) {
                            urlInfo.owner = splits[2];
                            urlInfo.organization = splits[0];
                            urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;
                        } else {
                            urlInfo.owner = splits[0];
                            urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;
                        }
                    } else if (4 === splits.length) {
                        urlInfo.organization = splits[0];
                        urlInfo.owner = splits[1];
                        urlInfo.name = splits[3];
                        urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;
                    }
                    break;
                case "dev.azure.com":
                case "azure.com":
                    if ('ssh.dev.azure.com' === urlInfo.resource) {
                        splits = urlInfo.name.split("/");
                        if (4 === splits.length) {
                            urlInfo.organization = splits[1];
                            urlInfo.owner = splits[2];
                            urlInfo.name = splits[3];
                        }
                        break;
                    }
                    splits = urlInfo.name.split("/");
                    if (5 === splits.length) {
                        urlInfo.organization = splits[0];
                        urlInfo.owner = splits[1];
                        urlInfo.name = splits[4];
                        urlInfo.full_name = '_git/' + urlInfo.name;
                    } else if (3 === splits.length) {
                        urlInfo.name = splits[2];
                        if ('DefaultCollection' === splits[0]) {
                            urlInfo.owner = splits[2];
                            urlInfo.organization = splits[0];
                            urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;
                        } else {
                            urlInfo.owner = splits[0];
                            urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;
                        }
                    } else if (4 === splits.length) {
                        urlInfo.organization = splits[0];
                        urlInfo.owner = splits[1];
                        urlInfo.name = splits[3];
                        urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;
                    }
                    if (urlInfo.query && urlInfo.query['path']) urlInfo.filepath = urlInfo.query['path'].replace(/^\/+/g, '');
                    if (urlInfo.query && urlInfo.query['version']) urlInfo.ref = urlInfo.query['version'].replace(/^GB/, '');
                    break;
                default:
                    splits = urlInfo.name.split("/");
                    var nameIndex = splits.length - 1;
                    if (splits.length >= 2) {
                        var dashIndex = splits.indexOf("-", 2);
                        var blobIndex = splits.indexOf("blob", 2);
                        var treeIndex = splits.indexOf("tree", 2);
                        var commitIndex = splits.indexOf("commit", 2);
                        var srcIndex = splits.indexOf("src", 2);
                        var rawIndex = splits.indexOf("raw", 2);
                        var editIndex = splits.indexOf("edit", 2);
                        nameIndex = dashIndex > 0 ? dashIndex - 1 : blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : srcIndex > 0 ? srcIndex - 1 : rawIndex > 0 ? rawIndex - 1 : editIndex > 0 ? editIndex - 1 : nameIndex;
                        urlInfo.owner = splits.slice(0, nameIndex).join('/');
                        urlInfo.name = splits[nameIndex];
                        if (commitIndex) urlInfo.commit = splits[nameIndex + 2];
                    }
                    urlInfo.ref = "";
                    urlInfo.filepathtype = "";
                    urlInfo.filepath = "";
                    var offsetNameIndex = splits.length > nameIndex && "-" === splits[nameIndex + 1] ? nameIndex + 1 : nameIndex;
                    if (splits.length > offsetNameIndex + 2 && [
                        "raw",
                        "src",
                        "blob",
                        "tree",
                        "edit"
                    ].indexOf(splits[offsetNameIndex + 1]) >= 0) {
                        urlInfo.filepathtype = splits[offsetNameIndex + 1];
                        urlInfo.ref = splits[offsetNameIndex + 2];
                        if (splits.length > offsetNameIndex + 3) urlInfo.filepath = splits.slice(offsetNameIndex + 3).join('/');
                    }
                    urlInfo.organization = urlInfo.owner;
                    break;
            }
            if (!urlInfo.full_name) {
                urlInfo.full_name = urlInfo.owner;
                if (urlInfo.name) {
                    urlInfo.full_name && (urlInfo.full_name += "/");
                    urlInfo.full_name += urlInfo.name;
                }
            }
            if (urlInfo.owner.startsWith("scm/")) {
                urlInfo.source = "bitbucket-server";
                urlInfo.owner = urlInfo.owner.replace("scm/", "");
                urlInfo.organization = urlInfo.owner;
                urlInfo.full_name = urlInfo.owner + "/" + urlInfo.name;
            }
            var bitbucket = /(projects|users)\/(.*?)\/repos\/(.*?)((\/.*$)|$)/;
            var matches = bitbucket.exec(urlInfo.pathname);
            if (null != matches) {
                urlInfo.source = "bitbucket-server";
                if ("users" === matches[1]) urlInfo.owner = "~" + matches[2];
                else urlInfo.owner = matches[2];
                urlInfo.organization = urlInfo.owner;
                urlInfo.name = matches[3];
                splits = matches[4].split("/");
                if (splits.length > 1) {
                    if ([
                        "raw",
                        "browse"
                    ].indexOf(splits[1]) >= 0) {
                        urlInfo.filepathtype = splits[1];
                        if (splits.length > 2) urlInfo.filepath = splits.slice(2).join('/');
                    } else if ("commits" === splits[1] && splits.length > 2) urlInfo.commit = splits[2];
                }
                urlInfo.full_name = urlInfo.owner + "/" + urlInfo.name;
                if (urlInfo.query.at) urlInfo.ref = urlInfo.query.at;
                else urlInfo.ref = "";
            }
            return urlInfo;
        }
        gitUrlParse.stringify = function(obj, type) {
            type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join('+') : obj.protocol);
            var port = obj.port ? ":" + obj.port : '';
            var user = obj.user || 'git';
            var maybeGitSuffix = obj.git_suffix ? ".git" : "";
            switch(type){
                case "ssh":
                    if (port) return "ssh://" + user + "@" + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
                    return user + "@" + obj.resource + ":" + obj.full_name + maybeGitSuffix;
                case "git+ssh":
                case "ssh+git":
                case "ftp":
                case "ftps":
                    return type + "://" + user + "@" + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
                case "http":
                case "https":
                    var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes('http') || obj.protocols.includes('https')) ? obj.user + "@" : "";
                    return type + "://" + auth + obj.resource + port + "/" + buildPath(obj) + maybeGitSuffix;
                default:
                    return obj.href;
            }
        };
        /*!
 * buildToken
 * Builds OAuth token prefix (helper function)
 *
 * @name buildToken
 * @function
 * @param {GitUrl} obj The parsed Git url object.
 * @return {String} token prefix
 */ function buildToken(obj) {
            switch(obj.source){
                case "bitbucket.org":
                    return "x-token-auth:" + obj.token + "@";
                default:
                    return obj.token + "@";
            }
        }
        function buildPath(obj) {
            switch(obj.source){
                case "bitbucket-server":
                    return "scm/" + obj.full_name;
                default:
                    return "" + obj.full_name;
            }
        }
        module.exports = gitUrlParse;
    },
    "../../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var isGlob = __webpack_require__("../../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js");
        var pathPosixDirname = __webpack_require__("path").posix.dirname;
        var isWin32 = 'win32' === __webpack_require__("os").platform();
        var slash = '/';
        var backslash = /\\/g;
        var enclosure = /[\{\[].*[\}\]]$/;
        var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
        var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
        module.exports = function(str, opts) {
            var options = Object.assign({
                flipBackslashes: true
            }, opts);
            if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) str = str.replace(backslash, slash);
            if (enclosure.test(str)) str += slash;
            str += 'a';
            do str = pathPosixDirname(str);
            while (isGlob(str) || globby.test(str));
            return str.replace(escaped, '$1');
        };
    },
    "../../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js": function(module) {
        /*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */ module.exports = function(str) {
            if ('string' != typeof str || '' === str) return false;
            var match;
            while(match = /(\\).|([@?!+*]\(.*\))/g.exec(str)){
                if (match[2]) return true;
                str = str.slice(match.index + match[0].length);
            }
            return false;
        };
    },
    "../../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        /*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ var isExtglob = __webpack_require__("../../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js");
        var chars = {
            '{': '}',
            '(': ')',
            '[': ']'
        };
        var strictCheck = function(str) {
            if ('!' === str[0]) return true;
            var index = 0;
            var pipeIndex = -2;
            var closeSquareIndex = -2;
            var closeCurlyIndex = -2;
            var closeParenIndex = -2;
            var backSlashIndex = -2;
            while(index < str.length){
                if ('*' === str[index]) return true;
                if ('?' === str[index + 1] && /[\].+)]/.test(str[index])) return true;
                if (-1 !== closeSquareIndex && '[' === str[index] && ']' !== str[index + 1]) {
                    if (closeSquareIndex < index) closeSquareIndex = str.indexOf(']', index);
                    if (closeSquareIndex > index) {
                        if (-1 === backSlashIndex || backSlashIndex > closeSquareIndex) return true;
                        backSlashIndex = str.indexOf('\\', index);
                        if (-1 === backSlashIndex || backSlashIndex > closeSquareIndex) return true;
                    }
                }
                if (-1 !== closeCurlyIndex && '{' === str[index] && '}' !== str[index + 1]) {
                    closeCurlyIndex = str.indexOf('}', index);
                    if (closeCurlyIndex > index) {
                        backSlashIndex = str.indexOf('\\', index);
                        if (-1 === backSlashIndex || backSlashIndex > closeCurlyIndex) return true;
                    }
                }
                if (-1 !== closeParenIndex && '(' === str[index] && '?' === str[index + 1] && /[:!=]/.test(str[index + 2]) && ')' !== str[index + 3]) {
                    closeParenIndex = str.indexOf(')', index);
                    if (closeParenIndex > index) {
                        backSlashIndex = str.indexOf('\\', index);
                        if (-1 === backSlashIndex || backSlashIndex > closeParenIndex) return true;
                    }
                }
                if (-1 !== pipeIndex && '(' === str[index] && '|' !== str[index + 1]) {
                    if (pipeIndex < index) pipeIndex = str.indexOf('|', index);
                    if (-1 !== pipeIndex && ')' !== str[pipeIndex + 1]) {
                        closeParenIndex = str.indexOf(')', pipeIndex);
                        if (closeParenIndex > pipeIndex) {
                            backSlashIndex = str.indexOf('\\', pipeIndex);
                            if (-1 === backSlashIndex || backSlashIndex > closeParenIndex) return true;
                        }
                    }
                }
                if ('\\' === str[index]) {
                    var open = str[index + 1];
                    index += 2;
                    var close = chars[open];
                    if (close) {
                        var n = str.indexOf(close, index);
                        if (-1 !== n) index = n + 1;
                    }
                    if ('!' === str[index]) return true;
                } else index++;
            }
            return false;
        };
        var relaxedCheck = function(str) {
            if ('!' === str[0]) return true;
            var index = 0;
            while(index < str.length){
                if (/[*?{}()[\]]/.test(str[index])) return true;
                if ('\\' === str[index]) {
                    var open = str[index + 1];
                    index += 2;
                    var close = chars[open];
                    if (close) {
                        var n = str.indexOf(close, index);
                        if (-1 !== n) index = n + 1;
                    }
                    if ('!' === str[index]) return true;
                } else index++;
            }
            return false;
        };
        module.exports = function(str, options) {
            if ('string' != typeof str || '' === str) return false;
            if (isExtglob(str)) return true;
            var check = strictCheck;
            if (options && false === options.strict) check = relaxedCheck;
            return check(str);
        };
    },
    "../../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js": function(module) {
        /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */ module.exports = function(num) {
            if ('number' == typeof num) return num - num === 0;
            if ('string' == typeof num && '' !== num.trim()) return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
            return false;
        };
    },
    "../../node_modules/.pnpm/is-ssh@1.4.1/node_modules/is-ssh/lib/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var protocols = __webpack_require__("../../node_modules/.pnpm/protocols@2.0.2/node_modules/protocols/lib/index.js");
        function isSsh(input) {
            if (Array.isArray(input)) return -1 !== input.indexOf("ssh") || -1 !== input.indexOf("rsync");
            if ("string" != typeof input) return false;
            var prots = protocols(input);
            input = input.substring(input.indexOf("://") + 3);
            if (isSsh(prots)) return true;
            var urlPortPattern = new RegExp('\.([a-zA-Z\\d]+):(\\d+)\/');
            return !input.match(urlPortPattern) && input.indexOf("@") < input.indexOf(":");
        }
        module.exports = isSsh;
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports.__defineGetter__('parse', function() {
            return __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js").parse;
        });
        module.exports.__defineGetter__('stringify', function() {
            return __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js").stringify;
        });
        module.exports.__defineGetter__('tokenize', function() {
            return __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js").tokenize;
        });
        module.exports.__defineGetter__('update', function() {
            return __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/document.js").update;
        });
        module.exports.__defineGetter__('analyze', function() {
            return __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js").analyze;
        });
        module.exports.__defineGetter__('utils', function() {
            return __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/utils.js");
        });
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var tokenize = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js").tokenize;
        module.exports.analyze = function(input, options) {
            if (null == options) options = {};
            if (!Array.isArray(input)) input = tokenize(input, options);
            var result = {
                has_whitespace: false,
                has_comments: false,
                has_newlines: false,
                has_trailing_comma: false,
                indent: '',
                newline: '\n',
                quote: '"',
                quote_keys: true
            };
            var stats = {
                indent: {},
                newline: {},
                quote: {}
            };
            for(var i = 0; i < input.length; i++){
                if ('newline' === input[i].type) {
                    if (input[i + 1] && 'whitespace' === input[i + 1].type) {
                        if ('\t' === input[i + 1].raw[0]) stats.indent['\t'] = (stats.indent['\t'] || 0) + 1;
                        if (input[i + 1].raw.match(/^\x20+$/)) {
                            var ws_len = input[i + 1].raw.length;
                            var indent_len = input[i + 1].stack.length + 1;
                            if (ws_len % indent_len === 0) {
                                var t = Array(ws_len / indent_len + 1).join(' ');
                                stats.indent[t] = (stats.indent[t] || 0) + 1;
                            }
                        }
                    }
                    stats.newline[input[i].raw] = (stats.newline[input[i].raw] || 0) + 1;
                }
                if ('newline' === input[i].type) result.has_newlines = true;
                if ('whitespace' === input[i].type) result.has_whitespace = true;
                if ('comment' === input[i].type) result.has_comments = true;
                if ('key' === input[i].type) {
                    if ('"' !== input[i].raw[0] && "'" !== input[i].raw[0]) result.quote_keys = false;
                }
                if ('key' === input[i].type || 'literal' === input[i].type) {
                    if ('"' === input[i].raw[0] || "'" === input[i].raw[0]) stats.quote[input[i].raw[0]] = (stats.quote[input[i].raw[0]] || 0) + 1;
                }
                if ('separator' === input[i].type && ',' === input[i].raw) for(var j = i + 1; j < input.length; j++){
                    if ('literal' === input[j].type || 'key' === input[j].type) break;
                    if ('separator' === input[j].type) result.has_trailing_comma = true;
                }
            }
            for(var k in stats)if (Object.keys(stats[k]).length) result[k] = Object.keys(stats[k]).reduce(function(a, b) {
                return stats[k][a] > stats[k][b] ? a : b;
            });
            return result;
        };
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/document.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var assert = __webpack_require__("assert");
        var tokenize = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js").tokenize;
        var stringify = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js").stringify;
        var analyze = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js").analyze;
        function isObject(x) {
            return 'object' == typeof x && null !== x;
        }
        function value_to_tokenlist(value1, stack, options, is_key, indent) {
            options = Object.create(options);
            options._stringify_key = !!is_key;
            if (indent) options._prefix = indent.prefix.map(function(x) {
                return x.raw;
            }).join('');
            if (null == options._splitMin) options._splitMin = 0;
            if (null == options._splitMax) options._splitMax = 0;
            var stringified = stringify(value1, options);
            if (is_key) return [
                {
                    raw: stringified,
                    type: 'key',
                    stack: stack,
                    value: value1
                }
            ];
            options._addstack = stack;
            var result = tokenize(stringified, {
                _addstack: stack
            });
            result.data = null;
            return result;
        }
        function arg_to_path(path) {
            if ('number' == typeof path) path = String(path);
            if ('' === path) path = [];
            if ('string' == typeof path) path = path.split('.');
            if (!Array.isArray(path)) throw Error('Invalid path type, string or array expected');
            return path;
        }
        function find_element_in_tokenlist(element, lvl, tokens, begin, end) {
            while(tokens[begin].stack[lvl] != element)if (begin++ >= end) return false;
            while(tokens[end].stack[lvl] != element)if (end-- < begin) return false;
            return [
                begin,
                end
            ];
        }
        function is_whitespace(token_type) {
            return 'whitespace' === token_type || 'newline' === token_type || 'comment' === token_type;
        }
        function find_first_non_ws_token(tokens, begin, end) {
            while(is_whitespace(tokens[begin].type))if (begin++ >= end) return false;
            return begin;
        }
        function find_last_non_ws_token(tokens, begin, end) {
            while(is_whitespace(tokens[end].type))if (end-- < begin) return false;
            return end;
        }
        function detect_indent_style(tokens, is_array, begin, end, level) {
            var result = {
                sep1: [],
                sep2: [],
                suffix: [],
                prefix: [],
                newline: []
            };
            if ('separator' === tokens[end].type && tokens[end].stack.length !== level + 1 && ',' !== tokens[end].raw) return result;
            if ('separator' === tokens[end].type) end = find_last_non_ws_token(tokens, begin, end - 1);
            if (false === end) return result;
            while(tokens[end].stack.length > level)end--;
            if (!is_array) {
                while(is_whitespace(tokens[end].type)){
                    if (end < begin) return result;
                    if ('whitespace' !== tokens[end].type) return result;
                    result.sep2.unshift(tokens[end]);
                    end--;
                }
                assert.equal(tokens[end].type, 'separator');
                assert.equal(tokens[end].raw, ':');
                while(is_whitespace(tokens[--end].type)){
                    if (end < begin) return result;
                    if ('whitespace' !== tokens[end].type) return result;
                    result.sep1.unshift(tokens[end]);
                }
                assert.equal(tokens[end].type, 'key');
                end--;
            }
            while(is_whitespace(tokens[end].type)){
                if (end < begin) break;
                if ('whitespace' === tokens[end].type) result.prefix.unshift(tokens[end]);
                else if ('newline' === tokens[end].type) {
                    result.newline.unshift(tokens[end]);
                    break;
                } else break;
                end--;
            }
            return result;
        }
        function Document(text, options) {
            var self1 = Object.create(Document.prototype);
            if (null == options) options = {};
            var tokens = self1._tokens = tokenize(text, options);
            self1._data = tokens.data;
            tokens.data = null;
            self1._options = options;
            var stats = analyze(text, options);
            if (null == options.indent) options.indent = stats.indent;
            if (null == options.quote) options.quote = stats.quote;
            if (null == options.quote_keys) options.quote_keys = stats.quote_keys;
            if (null == options.no_trailing_comma) options.no_trailing_comma = !stats.has_trailing_comma;
            return self1;
        }
        function check_if_can_be_placed(key, object, is_unset) {
            function error(add) {
                return Error("You can't " + (is_unset ? 'unset' : 'set') + " key '" + key + "'" + add);
            }
            if (!isObject(object)) throw error(' of an non-object');
            if (!Array.isArray(object)) return true;
            if (String(key).match(/^\d+$/)) {
                key = Number(String(key));
                if (object.length < key || is_unset && object.length === key) throw error(', out of bounds');
                if (!is_unset || object.length === key + 1) return true;
                throw error(' in the middle of an array');
            }
            throw error(' of an array');
        }
        Document.prototype.set = function(path, value1) {
            path = arg_to_path(path);
            if (0 === path.length) {
                if (void 0 === value1) throw Error("can't remove root document");
                this._data = value1;
                var new_key = false;
            } else {
                var data = this._data;
                for(var i = 0; i < path.length - 1; i++){
                    check_if_can_be_placed(path[i], data, false);
                    data = data[path[i]];
                }
                if (i === path.length - 1) check_if_can_be_placed(path[i], data, void 0 === value1);
                var new_key = !(path[i] in data);
                if (void 0 === value1) {
                    if (Array.isArray(data)) data.pop();
                    else delete data[path[i]];
                } else data[path[i]] = value1;
            }
            if (!this._tokens.length) this._tokens = [
                {
                    raw: '',
                    type: 'literal',
                    stack: [],
                    value: void 0
                }
            ];
            var position = [
                find_first_non_ws_token(this._tokens, 0, this._tokens.length - 1),
                find_last_non_ws_token(this._tokens, 0, this._tokens.length - 1)
            ];
            for(var i = 0; i < path.length - 1; i++){
                position = find_element_in_tokenlist(path[i], i, this._tokens, position[0], position[1]);
                if (false == position) throw Error('internal error, please report this');
            }
            if (0 === path.length) var newtokens = value_to_tokenlist(value1, path, this._options);
            else if (new_key) {
                var path_1 = path.slice(0, i);
                var pos2 = find_last_non_ws_token(this._tokens, position[0] + 1, position[1] - 1);
                assert(false !== pos2);
                var indent = false !== pos2 ? detect_indent_style(this._tokens, Array.isArray(data), position[0] + 1, pos2, i) : {};
                var newtokens = value_to_tokenlist(value1, path, this._options, false, indent);
                var prefix = [];
                if (indent.newline && indent.newline.length) prefix = prefix.concat(indent.newline);
                if (indent.prefix && indent.prefix.length) prefix = prefix.concat(indent.prefix);
                if (!Array.isArray(data)) {
                    prefix = prefix.concat(value_to_tokenlist(path[path.length - 1], path_1, this._options, true));
                    if (indent.sep1 && indent.sep1.length) prefix = prefix.concat(indent.sep1);
                    prefix.push({
                        raw: ':',
                        type: 'separator',
                        stack: path_1
                    });
                    if (indent.sep2 && indent.sep2.length) prefix = prefix.concat(indent.sep2);
                }
                newtokens.unshift.apply(newtokens, prefix);
                if ('separator' === this._tokens[pos2].type && this._tokens[pos2].stack.length === path.length - 1) {
                    if (',' === this._tokens[pos2].raw) newtokens.push({
                        raw: ',',
                        type: 'separator',
                        stack: path_1
                    });
                } else newtokens.unshift({
                    raw: ',',
                    type: 'separator',
                    stack: path_1
                });
                if (indent.suffix && indent.suffix.length) newtokens.push.apply(newtokens, indent.suffix);
                assert.equal(this._tokens[position[1]].type, 'separator');
                position[0] = pos2 + 1;
                position[1] = pos2;
            } else {
                var pos_old = position;
                position = find_element_in_tokenlist(path[i], i, this._tokens, position[0], position[1]);
                if (void 0 === value1 && false !== position) {
                    var newtokens = [];
                    if (!Array.isArray(data)) {
                        var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position[0] - 1);
                        assert.equal(this._tokens[pos2].type, 'separator');
                        assert.equal(this._tokens[pos2].raw, ':');
                        position[0] = pos2;
                        var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position[0] - 1);
                        assert.equal(this._tokens[pos2].type, 'key');
                        assert.equal(this._tokens[pos2].value, path[path.length - 1]);
                        position[0] = pos2;
                    }
                    var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position[0] - 1);
                    assert.equal(this._tokens[pos2].type, 'separator');
                    if (',' === this._tokens[pos2].raw) position[0] = pos2;
                    else {
                        pos2 = find_first_non_ws_token(this._tokens, position[1] + 1, pos_old[1]);
                        assert.equal(this._tokens[pos2].type, 'separator');
                        if (',' === this._tokens[pos2].raw) position[1] = pos2;
                    }
                } else {
                    var indent = false !== pos2 ? detect_indent_style(this._tokens, Array.isArray(data), pos_old[0], position[1] - 1, i) : {};
                    var newtokens = value_to_tokenlist(value1, path, this._options, false, indent);
                }
            }
            newtokens.unshift(position[1] - position[0] + 1);
            newtokens.unshift(position[0]);
            this._tokens.splice.apply(this._tokens, newtokens);
            return this;
        };
        Document.prototype.unset = function(path) {
            return this.set(path, void 0);
        };
        Document.prototype.get = function(path) {
            path = arg_to_path(path);
            var data = this._data;
            for(var i = 0; i < path.length; i++){
                if (!isObject(data)) return;
                data = data[path[i]];
            }
            return data;
        };
        Document.prototype.has = function(path) {
            path = arg_to_path(path);
            var data = this._data;
            for(var i = 0; i < path.length; i++){
                if (!isObject(data)) return false;
                data = data[path[i]];
            }
            return void 0 !== data;
        };
        Document.prototype.update = function(value1) {
            var self1 = this;
            change([], self1._data, value1);
            return self1;
            function change(path, old_data, new_data) {
                if (isObject(new_data) && isObject(old_data)) {
                    if (Array.isArray(new_data) != Array.isArray(old_data)) self1.set(path, new_data);
                    else if (Array.isArray(new_data)) {
                        if (new_data.length > old_data.length) for(var i = 0; i < new_data.length; i++){
                            path.push(String(i));
                            change(path, old_data[i], new_data[i]);
                            path.pop();
                        }
                        else for(var i = old_data.length - 1; i >= 0; i--){
                            path.push(String(i));
                            change(path, old_data[i], new_data[i]);
                            path.pop();
                        }
                    } else {
                        for(var i in new_data){
                            path.push(String(i));
                            change(path, old_data[i], new_data[i]);
                            path.pop();
                        }
                        for(var i in old_data)if (!(i in new_data)) {
                            path.push(String(i));
                            change(path, old_data[i], new_data[i]);
                            path.pop();
                        }
                    }
                } else if (new_data !== old_data) self1.set(path, new_data);
            }
        };
        Document.prototype.toString = function() {
            return this._tokens.map(function(x) {
                return x.raw;
            }).join('');
        };
        module.exports.update = function(source, new_value, options) {
            return Document(source, options).update(new_value).toString();
        };
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Uni = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js");
        function isHexDigit(x) {
            return x >= '0' && x <= '9' || x >= 'A' && x <= 'F' || x >= 'a' && x <= 'f';
        }
        function isOctDigit(x) {
            return x >= '0' && x <= '7';
        }
        function isDecDigit(x) {
            return x >= '0' && x <= '9';
        }
        var unescapeMap = {
            '\'': '\'',
            '"': '"',
            '\\': '\\',
            b: '\b',
            f: '\f',
            n: '\n',
            r: '\r',
            t: '\t',
            v: '\v',
            '/': '/'
        };
        function formatError(input, msg, position, lineno, column, json5) {
            var result = msg + ' at ' + (lineno + 1) + ':' + (column + 1), tmppos = position - column - 1, srcline = '', underline = '';
            var isLineTerminator = json5 ? Uni.isLineTerminator : Uni.isLineTerminatorJSON;
            if (tmppos < position - 70) tmppos = position - 70;
            while(true){
                var chr = input[++tmppos];
                if (isLineTerminator(chr) || tmppos === input.length) {
                    if (position >= tmppos) underline += '^';
                    break;
                }
                srcline += chr;
                if (position === tmppos) underline += '^';
                else if (position > tmppos) underline += '\t' === input[tmppos] ? '\t' : ' ';
                if (srcline.length > 78) break;
            }
            return result + '\n' + srcline + '\n' + underline;
        }
        function parse(input, options) {
            var json5 = false;
            var cjson = false;
            if (options.legacy || 'json' === options.mode) ;
            else if ('cjson' === options.mode) cjson = true;
            else options.mode, json5 = true;
            var isLineTerminator = json5 ? Uni.isLineTerminator : Uni.isLineTerminatorJSON;
            var isWhiteSpace = json5 ? Uni.isWhiteSpace : Uni.isWhiteSpaceJSON;
            var length = input.length, lineno = 0, linestart = 0, position = 0, stack = [];
            var tokenStart = function() {};
            var tokenEnd = function(v) {
                return v;
            };
            if (options._tokenize) (function() {
                var start = null;
                tokenStart = function() {
                    if (null !== start) throw Error('internal error, token overlap');
                    start = position;
                };
                tokenEnd = function(v, type) {
                    if (start != position) {
                        var hash = {
                            raw: input.substr(start, position - start),
                            type: type,
                            stack: stack.slice(0)
                        };
                        if (void 0 !== v) hash.value = v;
                        options._tokenize.call(null, hash);
                    }
                    start = null;
                    return v;
                };
            })();
            function fail(msg) {
                var column = position - linestart;
                if (!msg) {
                    if (position < length) {
                        var token = '\'' + JSON.stringify(input[position]).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                        if (!msg) msg = 'Unexpected token ' + token;
                    } else if (!msg) msg = 'Unexpected end of input';
                }
                var error = SyntaxError(formatError(input, msg, position, lineno, column, json5));
                error.row = lineno + 1;
                error.column = column + 1;
                throw error;
            }
            function newline(chr) {
                if ('\r' === chr && '\n' === input[position]) position++;
                linestart = position;
                lineno++;
            }
            function parseGeneric() {
                while(position < length){
                    tokenStart();
                    var chr = input[position++];
                    if ('"' === chr || '\'' === chr && json5) return tokenEnd(parseString(chr), 'literal');
                    if ('{' === chr) {
                        tokenEnd(void 0, 'separator');
                        return parseObject();
                    }
                    if ('[' === chr) {
                        tokenEnd(void 0, 'separator');
                        return parseArray();
                    } else if ('-' === chr || '.' === chr || isDecDigit(chr) || json5 && ('+' === chr || 'I' === chr || 'N' === chr)) return tokenEnd(parseNumber(), 'literal');
                    else if ('n' === chr) {
                        parseKeyword('null');
                        return tokenEnd(null, 'literal');
                    } else if ('t' === chr) {
                        parseKeyword('true');
                        return tokenEnd(true, 'literal');
                    } else if ('f' === chr) {
                        parseKeyword('false');
                        return tokenEnd(false, 'literal');
                    } else {
                        position--;
                        return tokenEnd(void 0);
                    }
                }
            }
            function parseKey() {
                var result;
                while(position < length){
                    tokenStart();
                    var chr = input[position++];
                    if ('"' === chr || '\'' === chr && json5) return tokenEnd(parseString(chr), 'key');
                    if ('{' === chr) {
                        tokenEnd(void 0, 'separator');
                        return parseObject();
                    }
                    if ('[' === chr) {
                        tokenEnd(void 0, 'separator');
                        return parseArray();
                    } else if ('.' === chr || isDecDigit(chr)) return tokenEnd(parseNumber(true), 'key');
                    else if (json5 && Uni.isIdentifierStart(chr) || '\\' === chr && 'u' === input[position]) {
                        var rollback = position - 1;
                        var result = parseIdentifier();
                        if (void 0 !== result) return tokenEnd(result, 'key');
                        position = rollback;
                        return tokenEnd(void 0);
                    } else {
                        position--;
                        return tokenEnd(void 0);
                    }
                }
            }
            function skipWhiteSpace() {
                tokenStart();
                while(position < length){
                    var chr = input[position++];
                    if (isLineTerminator(chr)) {
                        position--;
                        tokenEnd(void 0, 'whitespace');
                        tokenStart();
                        position++;
                        newline(chr);
                        tokenEnd(void 0, 'newline');
                        tokenStart();
                    } else if (isWhiteSpace(chr)) ;
                    else if ('/' === chr && (json5 || cjson) && ('/' === input[position] || '*' === input[position])) {
                        position--;
                        tokenEnd(void 0, 'whitespace');
                        tokenStart();
                        position++;
                        skipComment('*' === input[position++]);
                        tokenEnd(void 0, 'comment');
                        tokenStart();
                    } else {
                        position--;
                        break;
                    }
                }
                return tokenEnd(void 0, 'whitespace');
            }
            function skipComment(multi) {
                while(position < length){
                    var chr = input[position++];
                    if (isLineTerminator(chr)) {
                        if (!multi) {
                            position--;
                            return;
                        }
                        newline(chr);
                    } else if ('*' === chr && multi) {
                        if ('/' === input[position]) {
                            position++;
                            return;
                        }
                    }
                }
                if (multi) fail('Unclosed multiline comment');
            }
            function parseKeyword(keyword) {
                var _pos = position;
                var len = keyword.length;
                for(var i = 1; i < len; i++){
                    if (position >= length || keyword[i] != input[position]) {
                        position = _pos - 1;
                        fail();
                    }
                    position++;
                }
            }
            function parseObject() {
                var result = options.null_prototype ? Object.create(null) : {}, empty_object = {}, is_non_empty = false;
                while(position < length){
                    skipWhiteSpace();
                    var item1 = parseKey();
                    skipWhiteSpace();
                    tokenStart();
                    var chr = input[position++];
                    tokenEnd(void 0, 'separator');
                    if ('}' === chr && void 0 === item1) {
                        if (!json5 && is_non_empty) {
                            position--;
                            fail('Trailing comma in object');
                        }
                        return result;
                    }
                    if (':' === chr && void 0 !== item1) {
                        skipWhiteSpace();
                        stack.push(item1);
                        var item2 = parseGeneric();
                        stack.pop();
                        if (void 0 === item2) fail('No value found for key ' + item1);
                        if ('string' != typeof item1) {
                            if (!json5 || 'number' != typeof item1) fail('Wrong key type: ' + item1);
                        }
                        if ((item1 in empty_object || null != empty_object[item1]) && 'replace' !== options.reserved_keys) {
                            if ('throw' === options.reserved_keys) fail('Reserved key: ' + item1);
                        } else {
                            if ('function' == typeof options.reviver) item2 = options.reviver.call(null, item1, item2);
                            if (void 0 !== item2) {
                                is_non_empty = true;
                                Object.defineProperty(result, item1, {
                                    value: item2,
                                    enumerable: true,
                                    configurable: true,
                                    writable: true
                                });
                            }
                        }
                        skipWhiteSpace();
                        tokenStart();
                        var chr = input[position++];
                        tokenEnd(void 0, 'separator');
                        if (',' === chr) continue;
                        if ('}' === chr) return result;
                        fail();
                    } else {
                        position--;
                        fail();
                    }
                }
                fail();
            }
            function parseArray() {
                var result = [];
                while(position < length){
                    skipWhiteSpace();
                    stack.push(result.length);
                    var item = parseGeneric();
                    stack.pop();
                    skipWhiteSpace();
                    tokenStart();
                    var chr = input[position++];
                    tokenEnd(void 0, 'separator');
                    if (void 0 !== item) {
                        if ('function' == typeof options.reviver) item = options.reviver.call(null, String(result.length), item);
                        if (void 0 === item) {
                            result.length++;
                            item = true;
                        } else result.push(item);
                    }
                    if (',' === chr) {
                        if (void 0 === item) fail('Elisions are not supported');
                    } else if (']' === chr) {
                        if (!json5 && void 0 === item && result.length) {
                            position--;
                            fail('Trailing comma in array');
                        }
                        return result;
                    } else {
                        position--;
                        fail();
                    }
                }
            }
            function parseNumber() {
                position--;
                var start = position, chr = input[position++];
                var to_num = function(is_octal) {
                    var str = input.substr(start, position - start);
                    if (is_octal) var result = parseInt(str.replace(/^0o?/, ''), 8);
                    else var result = Number(str);
                    if (Number.isNaN(result)) {
                        position--;
                        fail('Bad numeric literal - "' + input.substr(start, position - start + 1) + '"');
                    } else {
                        if (json5 || str.match(/^-?(0|[1-9][0-9]*)(\.[0-9]+)?(e[+-]?[0-9]+)?$/i)) return result;
                        position--;
                        fail('Non-json numeric literal - "' + input.substr(start, position - start + 1) + '"');
                    }
                };
                if ('-' === chr || '+' === chr && json5) chr = input[position++];
                if ('N' === chr && json5) {
                    parseKeyword('NaN');
                    return NaN;
                }
                if ('I' === chr && json5) {
                    parseKeyword('Infinity');
                    return to_num();
                }
                if (chr >= '1' && chr <= '9') {
                    while(position < length && isDecDigit(input[position]))position++;
                    chr = input[position++];
                }
                if ('0' === chr) {
                    chr = input[position++];
                    var is_octal = 'o' === chr || 'O' === chr || isOctDigit(chr);
                    var is_hex = 'x' === chr || 'X' === chr;
                    if (json5 && (is_octal || is_hex)) {
                        while(position < length && (is_hex ? isHexDigit : isOctDigit)(input[position]))position++;
                        var sign = 1;
                        if ('-' === input[start]) {
                            sign = -1;
                            start++;
                        } else if ('+' === input[start]) start++;
                        return sign * to_num(is_octal);
                    }
                }
                if ('.' === chr) {
                    while(position < length && isDecDigit(input[position]))position++;
                    chr = input[position++];
                }
                if ('e' === chr || 'E' === chr) {
                    chr = input[position++];
                    if ('-' === chr || '+' === chr) position++;
                    while(position < length && isDecDigit(input[position]))position++;
                    chr = input[position++];
                }
                position--;
                return to_num();
            }
            function parseIdentifier() {
                position--;
                var result = '';
                while(position < length){
                    var chr = input[position++];
                    if ('\\' === chr && 'u' === input[position] && isHexDigit(input[position + 1]) && isHexDigit(input[position + 2]) && isHexDigit(input[position + 3]) && isHexDigit(input[position + 4])) {
                        chr = String.fromCharCode(parseInt(input.substr(position + 1, 4), 16));
                        position += 5;
                    }
                    if (result.length) {
                        if (Uni.isIdentifierPart(chr)) result += chr;
                        else {
                            position--;
                            return result;
                        }
                    } else {
                        if (!Uni.isIdentifierStart(chr)) return;
                        result += chr;
                    }
                }
                fail();
            }
            function parseString(endChar) {
                var result = '';
                while(position < length){
                    var chr = input[position++];
                    if (chr === endChar) return result;
                    if ('\\' === chr) {
                        if (position >= length) fail();
                        chr = input[position++];
                        if (unescapeMap[chr] && (json5 || 'v' != chr && "'" != chr)) result += unescapeMap[chr];
                        else if (json5 && isLineTerminator(chr)) newline(chr);
                        else if ('u' === chr || 'x' === chr && json5) {
                            var off = 'u' === chr ? 4 : 2;
                            for(var i = 0; i < off; i++){
                                if (position >= length) fail();
                                if (!isHexDigit(input[position])) fail('Bad escape sequence');
                                position++;
                            }
                            result += String.fromCharCode(parseInt(input.substr(position - off, off), 16));
                        } else if (json5 && isOctDigit(chr)) {
                            if (chr < '4' && isOctDigit(input[position]) && isOctDigit(input[position + 1])) var digits = 3;
                            else if (isOctDigit(input[position])) var digits = 2;
                            else var digits = 1;
                            position += digits - 1;
                            result += String.fromCharCode(parseInt(input.substr(position - digits, digits), 8));
                        } else if (json5) result += chr;
                        else {
                            position--;
                            fail();
                        }
                    } else if (isLineTerminator(chr)) fail();
                    else {
                        if (!json5 && chr.charCodeAt(0) < 32) {
                            position--;
                            fail('Unexpected control character');
                        }
                        result += chr;
                    }
                }
                fail();
            }
            skipWhiteSpace();
            var return_value = parseGeneric();
            if (void 0 !== return_value || position < length) {
                skipWhiteSpace();
                if (position >= length) {
                    if ('function' == typeof options.reviver) return_value = options.reviver.call(null, '', return_value);
                    return return_value;
                }
                fail();
            } else position ? fail('No data, only a whitespace') : fail('No data, empty input');
        }
        module.exports.parse = function(input, options) {
            if ('function' == typeof options) options = {
                reviver: options
            };
            if (void 0 === input) return;
            if ('string' != typeof input) input = String(input);
            if (null == options) options = {};
            if (null == options.reserved_keys) options.reserved_keys = 'ignore';
            if ('throw' === options.reserved_keys || 'ignore' === options.reserved_keys) {
                if (null == options.null_prototype) options.null_prototype = true;
            }
            try {
                return parse(input, options);
            } catch (err) {
                if (err instanceof SyntaxError && null != err.row && null != err.column) {
                    var old_err = err;
                    err = SyntaxError(old_err.message);
                    err.column = old_err.column;
                    err.row = old_err.row;
                }
                throw err;
            }
        };
        module.exports.tokenize = function(input, options) {
            if (null == options) options = {};
            options._tokenize = function(smth) {
                if (options._addstack) smth.stack.unshift.apply(smth.stack, options._addstack);
                tokens.push(smth);
            };
            var tokens = [];
            tokens.data = module.exports.parse(input, options);
            return tokens;
        };
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Uni = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js");
        if (!(function() {}).name) Object.defineProperty((function() {}).constructor.prototype, 'name', {
            get: function() {
                var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
                Object.defineProperty(this, 'name', {
                    value: name
                });
                return name;
            }
        });
        var special_chars = {
            0: '\\0',
            8: '\\b',
            9: '\\t',
            10: '\\n',
            11: '\\v',
            12: '\\f',
            13: '\\r',
            92: '\\\\'
        };
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var escapable = /[\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;
        function _stringify(object, options, recursiveLvl, currentKey) {
            var json5 = 'json5' === options.mode || !options.mode;
            function indent(str, add) {
                var prefix = options._prefix ? options._prefix : '';
                if (!options.indent) return prefix + str;
                var result = '';
                var count = recursiveLvl + (add || 0);
                for(var i = 0; i < count; i++)result += options.indent;
                return prefix + result + str + (add ? '\n' : '');
            }
            function _stringify_key(key) {
                if (options.quote_keys) return _stringify_str(key);
                if (String(Number(key)) == key && '-' != key[0]) return key;
                if ('' == key) return _stringify_str(key);
                var result = '';
                for(var i = 0; i < key.length; i++){
                    if (i > 0) {
                        if (!Uni.isIdentifierPart(key[i])) return _stringify_str(key);
                    } else if (!Uni.isIdentifierStart(key[i])) return _stringify_str(key);
                    var chr = key.charCodeAt(i);
                    if (options.ascii) {
                        if (chr < 0x80) result += key[i];
                        else result += '\\u' + ('0000' + chr.toString(16)).slice(-4);
                    } else if (escapable.exec(key[i])) result += '\\u' + ('0000' + chr.toString(16)).slice(-4);
                    else result += key[i];
                }
                return result;
            }
            function _stringify_str(key) {
                var quote = options.quote;
                var quoteChr = quote.charCodeAt(0);
                var result = '';
                for(var i = 0; i < key.length; i++){
                    var chr = key.charCodeAt(i);
                    if (chr < 0x10) {
                        if (0 === chr && json5) result += '\\0';
                        else if (chr >= 8 && chr <= 13 && (json5 || 11 !== chr)) result += special_chars[chr];
                        else if (json5) result += '\\x0' + chr.toString(16);
                        else result += '\\u000' + chr.toString(16);
                    } else if (chr < 0x20) {
                        if (json5) result += '\\x' + chr.toString(16);
                        else result += '\\u00' + chr.toString(16);
                    } else if (chr >= 0x20 && chr < 0x80) {
                        if (47 === chr && i && '<' === key[i - 1]) result += '\\' + key[i];
                        else if (92 === chr) result += '\\\\';
                        else if (chr === quoteChr) result += '\\' + quote;
                        else result += key[i];
                    } else if (options.ascii || Uni.isLineTerminator(key[i]) || escapable.exec(key[i])) {
                        if (chr < 0x100) {
                            if (json5) result += '\\x' + chr.toString(16);
                            else result += '\\u00' + chr.toString(16);
                        } else if (chr < 0x1000) result += '\\u0' + chr.toString(16);
                        else if (chr < 0x10000) result += '\\u' + chr.toString(16);
                        else throw Error('weird codepoint');
                    } else result += key[i];
                }
                return quote + result + quote;
            }
            function _stringify_object() {
                if (null === object) return 'null';
                var result = [], len = 0, braces;
                if (Array.isArray(object)) {
                    braces = '[]';
                    for(var i = 0; i < object.length; i++){
                        var s = _stringify(object[i], options, recursiveLvl + 1, String(i));
                        if (void 0 === s) s = 'null';
                        len += s.length + 2;
                        result.push(s + ',');
                    }
                } else {
                    braces = '{}';
                    var fn = function(key) {
                        var t = _stringify(object[key], options, recursiveLvl + 1, key);
                        if (void 0 !== t) {
                            t = _stringify_key(key) + ':' + (options.indent ? ' ' : '') + t + ',';
                            len += t.length + 1;
                            result.push(t);
                        }
                    };
                    if (Array.isArray(options.replacer)) {
                        for(var i = 0; i < options.replacer.length; i++)if (hasOwnProperty.call(object, options.replacer[i])) fn(options.replacer[i]);
                    } else {
                        var keys = Object.keys(object);
                        if (options.sort_keys) keys = keys.sort('function' == typeof options.sort_keys ? options.sort_keys : void 0);
                        keys.forEach(fn);
                    }
                }
                len -= 2;
                if (options.indent && (len > options._splitMax - recursiveLvl * options.indent.length || len > options._splitMin)) {
                    if (options.no_trailing_comma && result.length) result[result.length - 1] = result[result.length - 1].substring(0, result[result.length - 1].length - 1);
                    var innerStuff = result.map(function(x) {
                        return indent(x, 1);
                    }).join('');
                    return braces[0] + (options.indent ? '\n' : '') + innerStuff + indent(braces[1]);
                }
                if (result.length) result[result.length - 1] = result[result.length - 1].substring(0, result[result.length - 1].length - 1);
                var innerStuff = result.join(options.indent ? ' ' : '');
                return braces[0] + innerStuff + braces[1];
            }
            function _stringify_nonobject(object) {
                if ('function' == typeof options.replacer) object = options.replacer.call(null, currentKey, object);
                switch(typeof object){
                    case 'string':
                        return _stringify_str(object);
                    case 'number':
                        if (0 === object && 1 / object < 0) return '-0';
                        if (!json5 && !Number.isFinite(object)) return 'null';
                        return object.toString();
                    case 'boolean':
                        return object.toString();
                    case 'undefined':
                        return;
                    case 'function':
                    default:
                        return JSON.stringify(object);
                }
            }
            if (options._stringify_key) return _stringify_key(object);
            if ('object' != typeof object) return _stringify_nonobject(object);
            if (null === object) return 'null';
            var str;
            if ('function' == typeof (str = object.toJSON5) && 'json' !== options.mode) object = str.call(object, currentKey);
            else if ('function' == typeof (str = object.toJSON)) object = str.call(object, currentKey);
            if (null === object) return 'null';
            if ('object' != typeof object) return _stringify_nonobject(object);
            if (object.constructor === Number || object.constructor === Boolean || object.constructor === String) {
                object = object.valueOf();
                return _stringify_nonobject(object);
            }
            if (object.constructor === Date) return _stringify_nonobject(object.toISOString());
            if ('function' == typeof options.replacer) {
                object = options.replacer.call(null, currentKey, object);
                if ('object' != typeof object) return _stringify_nonobject(object);
            }
            return _stringify_object(object);
        }
        module.exports.stringify = function(object, options, _space) {
            if ('function' == typeof options || Array.isArray(options)) options = {
                replacer: options
            };
            else 'object' == typeof options && null !== options || (options = {});
            if (null != _space) options.indent = _space;
            if (null == options.indent) options.indent = '\t';
            if (null == options.quote) options.quote = "'";
            if (null == options.ascii) options.ascii = false;
            if (null == options.mode) options.mode = 'json5';
            if ('json' === options.mode || 'cjson' === options.mode) {
                options.quote = '"';
                options.no_trailing_comma = true;
                options.quote_keys = true;
            }
            if ('object' == typeof options.indent) {
                if (options.indent.constructor === Number || options.indent.constructor === Boolean || options.indent.constructor === String) options.indent = options.indent.valueOf();
            }
            if ('number' == typeof options.indent) {
                if (options.indent >= 0) options.indent = Array(Math.min(~~options.indent, 10) + 1).join(' ');
                else options.indent = false;
            } else if ('string' == typeof options.indent) options.indent = options.indent.substr(0, 10);
            if (null == options._splitMin) options._splitMin = 50;
            if (null == options._splitMax) options._splitMax = 70;
            return _stringify(object, options, 0, '');
        };
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js": function(module) {
        var Uni = module.exports;
        module.exports.isWhiteSpace = function(x) {
            return '\u0020' === x || '\u00A0' === x || '\uFEFF' === x || x >= '\u0009' && x <= '\u000D' || '\u1680' === x || x >= '\u2000' && x <= '\u200A' || '\u2028' === x || '\u2029' === x || '\u202F' === x || '\u205F' === x || '\u3000' === x;
        };
        module.exports.isWhiteSpaceJSON = function(x) {
            return '\u0020' === x || '\u0009' === x || '\u000A' === x || '\u000D' === x;
        };
        module.exports.isLineTerminator = function(x) {
            return '\u000A' === x || '\u000D' === x || '\u2028' === x || '\u2029' === x;
        };
        module.exports.isLineTerminatorJSON = function(x) {
            return '\u000A' === x || '\u000D' === x;
        };
        module.exports.isIdentifierStart = function(x) {
            return '$' === x || '_' === x || x >= 'A' && x <= 'Z' || x >= 'a' && x <= 'z' || x >= '\u0080' && Uni.NonAsciiIdentifierStart.test(x);
        };
        module.exports.isIdentifierPart = function(x) {
            return '$' === x || '_' === x || x >= 'A' && x <= 'Z' || x >= 'a' && x <= 'z' || x >= '0' && x <= '9' || x >= '\u0080' && Uni.NonAsciiIdentifierPart.test(x);
        };
        module.exports.NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
        module.exports.NonAsciiIdentifierPart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
    },
    "../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/utils.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var FS = __webpack_require__("fs");
        var jju = __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js");
        module.exports.register = function() {
            var r = void 0, e = 'extensions';
            r[e]['.json5'] = function(m, f) {
                m.exports = jju.parse(FS.readFileSync(f, 'utf8'));
            };
        };
        module.exports.patch_JSON_parse = function() {
            var _parse = JSON.parse;
            JSON.parse = function(text, rev) {
                try {
                    return _parse(text, rev);
                } catch (err) {
                    __webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js").parse(text, {
                        mode: 'json',
                        legacy: true,
                        reviver: rev,
                        reserved_keys: 'replace',
                        null_prototype: false
                    });
                    throw err;
                }
            };
        };
        module.exports.middleware = function() {
            return function(req, res, next) {
                throw Error('this function is removed, use express-json5 instead');
            };
        };
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var loader = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/loader.js");
        var dumper = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/dumper.js");
        function renamed(from, to) {
            return function() {
                throw new Error('Function yaml.' + from + " is removed in js-yaml 4. Use yaml." + to + ' instead, which is now safe by default.');
            };
        }
        module.exports.Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        module.exports.Schema = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js");
        module.exports.FAILSAFE_SCHEMA = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js");
        module.exports.JSON_SCHEMA = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js");
        module.exports.CORE_SCHEMA = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js");
        module.exports.DEFAULT_SCHEMA = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js");
        module.exports.load = loader.load;
        module.exports.loadAll = loader.loadAll;
        module.exports.dump = dumper.dump;
        module.exports.YAMLException = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js");
        module.exports.types = {
            binary: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js"),
            float: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js"),
            map: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js"),
            null: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js"),
            pairs: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js"),
            set: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js"),
            timestamp: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js"),
            bool: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js"),
            int: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js"),
            merge: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js"),
            omap: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js"),
            seq: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js"),
            str: __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js")
        };
        module.exports.safeLoad = renamed('safeLoad', 'load');
        module.exports.safeLoadAll = renamed('safeLoadAll', 'loadAll');
        module.exports.safeDump = renamed('safeDump', 'dump');
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js": function(module) {
        function isNothing(subject) {
            return null == subject;
        }
        function isObject(subject) {
            return 'object' == typeof subject && null !== subject;
        }
        function toArray(sequence) {
            if (Array.isArray(sequence)) return sequence;
            if (isNothing(sequence)) return [];
            return [
                sequence
            ];
        }
        function extend(target, source) {
            var index, length, key, sourceKeys;
            if (source) {
                sourceKeys = Object.keys(source);
                for(index = 0, length = sourceKeys.length; index < length; index += 1){
                    key = sourceKeys[index];
                    target[key] = source[key];
                }
            }
            return target;
        }
        function repeat(string, count) {
            var result = '', cycle;
            for(cycle = 0; cycle < count; cycle += 1)result += string;
            return result;
        }
        function isNegativeZero(number) {
            return 0 === number && Number.NEGATIVE_INFINITY === 1 / number;
        }
        module.exports.isNothing = isNothing;
        module.exports.isObject = isObject;
        module.exports.toArray = toArray;
        module.exports.repeat = repeat;
        module.exports.isNegativeZero = isNegativeZero;
        module.exports.extend = extend;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/dumper.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var common = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js");
        var YAMLException = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js");
        var DEFAULT_SCHEMA = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js");
        var _toString = Object.prototype.toString;
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var CHAR_BOM = 0xFEFF;
        var CHAR_TAB = 0x09;
        var CHAR_LINE_FEED = 0x0A;
        var CHAR_CARRIAGE_RETURN = 0x0D;
        var CHAR_SPACE = 0x20;
        var CHAR_EXCLAMATION = 0x21;
        var CHAR_DOUBLE_QUOTE = 0x22;
        var CHAR_SHARP = 0x23;
        var CHAR_PERCENT = 0x25;
        var CHAR_AMPERSAND = 0x26;
        var CHAR_SINGLE_QUOTE = 0x27;
        var CHAR_ASTERISK = 0x2A;
        var CHAR_COMMA = 0x2C;
        var CHAR_MINUS = 0x2D;
        var CHAR_COLON = 0x3A;
        var CHAR_EQUALS = 0x3D;
        var CHAR_GREATER_THAN = 0x3E;
        var CHAR_QUESTION = 0x3F;
        var CHAR_COMMERCIAL_AT = 0x40;
        var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
        var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
        var CHAR_GRAVE_ACCENT = 0x60;
        var CHAR_LEFT_CURLY_BRACKET = 0x7B;
        var CHAR_VERTICAL_LINE = 0x7C;
        var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
        var ESCAPE_SEQUENCES = {};
        ESCAPE_SEQUENCES[0x00] = '\\0';
        ESCAPE_SEQUENCES[0x07] = '\\a';
        ESCAPE_SEQUENCES[0x08] = '\\b';
        ESCAPE_SEQUENCES[0x09] = '\\t';
        ESCAPE_SEQUENCES[0x0A] = '\\n';
        ESCAPE_SEQUENCES[0x0B] = '\\v';
        ESCAPE_SEQUENCES[0x0C] = '\\f';
        ESCAPE_SEQUENCES[0x0D] = '\\r';
        ESCAPE_SEQUENCES[0x1B] = '\\e';
        ESCAPE_SEQUENCES[0x22] = '\\"';
        ESCAPE_SEQUENCES[0x5C] = '\\\\';
        ESCAPE_SEQUENCES[0x85] = '\\N';
        ESCAPE_SEQUENCES[0xA0] = '\\_';
        ESCAPE_SEQUENCES[0x2028] = '\\L';
        ESCAPE_SEQUENCES[0x2029] = '\\P';
        var DEPRECATED_BOOLEANS_SYNTAX = [
            'y',
            'Y',
            'yes',
            'Yes',
            'YES',
            'on',
            'On',
            'ON',
            'n',
            'N',
            'no',
            'No',
            'NO',
            'off',
            'Off',
            'OFF'
        ];
        var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
        function compileStyleMap(schema, map) {
            var result, keys, index, length, tag, style, type;
            if (null === map) return {};
            result = {};
            keys = Object.keys(map);
            for(index = 0, length = keys.length; index < length; index += 1){
                tag = keys[index];
                style = String(map[tag]);
                if ('!!' === tag.slice(0, 2)) tag = 'tag:yaml.org,2002:' + tag.slice(2);
                type = schema.compiledTypeMap['fallback'][tag];
                if (type && _hasOwnProperty.call(type.styleAliases, style)) style = type.styleAliases[style];
                result[tag] = style;
            }
            return result;
        }
        function encodeHex(character) {
            var string, handle, length;
            string = character.toString(16).toUpperCase();
            if (character <= 0xFF) {
                handle = 'x';
                length = 2;
            } else if (character <= 0xFFFF) {
                handle = 'u';
                length = 4;
            } else if (character <= 0xFFFFFFFF) {
                handle = 'U';
                length = 8;
            } else throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
            return '\\' + handle + common.repeat('0', length - string.length) + string;
        }
        var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
        function State(options) {
            this.schema = options['schema'] || DEFAULT_SCHEMA;
            this.indent = Math.max(1, options['indent'] || 2);
            this.noArrayIndent = options['noArrayIndent'] || false;
            this.skipInvalid = options['skipInvalid'] || false;
            this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
            this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
            this.sortKeys = options['sortKeys'] || false;
            this.lineWidth = options['lineWidth'] || 80;
            this.noRefs = options['noRefs'] || false;
            this.noCompatMode = options['noCompatMode'] || false;
            this.condenseFlow = options['condenseFlow'] || false;
            this.quotingType = '"' === options['quotingType'] ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
            this.forceQuotes = options['forceQuotes'] || false;
            this.replacer = 'function' == typeof options['replacer'] ? options['replacer'] : null;
            this.implicitTypes = this.schema.compiledImplicit;
            this.explicitTypes = this.schema.compiledExplicit;
            this.tag = null;
            this.result = '';
            this.duplicates = [];
            this.usedDuplicates = null;
        }
        function indentString(string, spaces) {
            var ind = common.repeat(' ', spaces), position = 0, next = -1, result = '', line, length = string.length;
            while(position < length){
                next = string.indexOf('\n', position);
                if (-1 === next) {
                    line = string.slice(position);
                    position = length;
                } else {
                    line = string.slice(position, next + 1);
                    position = next + 1;
                }
                if (line.length && '\n' !== line) result += ind;
                result += line;
            }
            return result;
        }
        function generateNextLine(state, level) {
            return '\n' + common.repeat(' ', state.indent * level);
        }
        function testImplicitResolving(state, str) {
            var index, length, type;
            for(index = 0, length = state.implicitTypes.length; index < length; index += 1){
                type = state.implicitTypes[index];
                if (type.resolve(str)) return true;
            }
            return false;
        }
        function isWhitespace(c) {
            return c === CHAR_SPACE || c === CHAR_TAB;
        }
        function isPrintable(c) {
            return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && 0x2028 !== c && 0x2029 !== c || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;
        }
        function isNsCharOrWhitespace(c) {
            return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
        }
        function isPlainSafe(c, prev, inblock) {
            var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
            var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
            return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
        }
        function isPlainSafeFirst(c) {
            return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
        }
        function isPlainSafeLast(c) {
            return !isWhitespace(c) && c !== CHAR_COLON;
        }
        function codePointAt(string, pos) {
            var first = string.charCodeAt(pos), second;
            if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
                second = string.charCodeAt(pos + 1);
                if (second >= 0xDC00 && second <= 0xDFFF) return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
            return first;
        }
        function needIndentIndicator(string) {
            var leadingSpaceRe = /^\n* /;
            return leadingSpaceRe.test(string);
        }
        var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
        function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
            var i;
            var char = 0;
            var prevChar = null;
            var hasLineBreak = false;
            var hasFoldableLine = false;
            var shouldTrackWidth = -1 !== lineWidth;
            var previousLineBreak = -1;
            var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
            if (singleLineOnly || forceQuotes) for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){
                char = codePointAt(string, i);
                if (!isPrintable(char)) return STYLE_DOUBLE;
                plain = plain && isPlainSafe(char, prevChar, inblock);
                prevChar = char;
            }
            else {
                for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){
                    char = codePointAt(string, i);
                    if (char === CHAR_LINE_FEED) {
                        hasLineBreak = true;
                        if (shouldTrackWidth) {
                            hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && ' ' !== string[previousLineBreak + 1];
                            previousLineBreak = i;
                        }
                    } else if (!isPrintable(char)) return STYLE_DOUBLE;
                    plain = plain && isPlainSafe(char, prevChar, inblock);
                    prevChar = char;
                }
                hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && ' ' !== string[previousLineBreak + 1];
            }
            if (!hasLineBreak && !hasFoldableLine) {
                if (plain && !forceQuotes && !testAmbiguousType(string)) return STYLE_PLAIN;
                return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
            }
            if (indentPerLevel > 9 && needIndentIndicator(string)) return STYLE_DOUBLE;
            if (!forceQuotes) return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
            return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
        }
        function writeScalar(state, string, level, iskey, inblock) {
            state.dump = function() {
                if (0 === string.length) return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
                if (!state.noCompatMode) {
                    if (-1 !== DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) || DEPRECATED_BASE60_SYNTAX.test(string)) return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
                }
                var indent = state.indent * Math.max(1, level);
                var lineWidth = -1 === state.lineWidth ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
                var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
                function testAmbiguity(string) {
                    return testImplicitResolving(state, string);
                }
                switch(chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)){
                    case STYLE_PLAIN:
                        return string;
                    case STYLE_SINGLE:
                        return "'" + string.replace(/'/g, "''") + "'";
                    case STYLE_LITERAL:
                        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
                    case STYLE_FOLDED:
                        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
                    case STYLE_DOUBLE:
                        return '"' + escapeString(string, lineWidth) + '"';
                    default:
                        throw new YAMLException('impossible error: invalid scalar style');
                }
            }();
        }
        function blockHeader(string, indentPerLevel) {
            var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';
            var clip = '\n' === string[string.length - 1];
            var keep = clip && ('\n' === string[string.length - 2] || '\n' === string);
            var chomp = keep ? '+' : clip ? '' : '-';
            return indentIndicator + chomp + '\n';
        }
        function dropEndingNewline(string) {
            return '\n' === string[string.length - 1] ? string.slice(0, -1) : string;
        }
        function foldString(string, width) {
            var lineRe = /(\n+)([^\n]*)/g;
            var result = function() {
                var nextLF = string.indexOf('\n');
                nextLF = -1 !== nextLF ? nextLF : string.length;
                lineRe.lastIndex = nextLF;
                return foldLine(string.slice(0, nextLF), width);
            }();
            var prevMoreIndented = '\n' === string[0] || ' ' === string[0];
            var moreIndented;
            var match;
            while(match = lineRe.exec(string)){
                var prefix = match[1], line = match[2];
                moreIndented = ' ' === line[0];
                result += prefix + (prevMoreIndented || moreIndented || '' === line ? '' : '\n') + foldLine(line, width);
                prevMoreIndented = moreIndented;
            }
            return result;
        }
        function foldLine(line, width) {
            if ('' === line || ' ' === line[0]) return line;
            var breakRe = / [^ ]/g;
            var match;
            var start = 0, end, curr = 0, next = 0;
            var result = '';
            while(match = breakRe.exec(line)){
                next = match.index;
                if (next - start > width) {
                    end = curr > start ? curr : next;
                    result += '\n' + line.slice(start, end);
                    start = end + 1;
                }
                curr = next;
            }
            result += '\n';
            if (line.length - start > width && curr > start) result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
            else result += line.slice(start);
            return result.slice(1);
        }
        function escapeString(string) {
            var result = '';
            var char = 0;
            var escapeSeq;
            for(var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){
                char = codePointAt(string, i);
                escapeSeq = ESCAPE_SEQUENCES[char];
                if (!escapeSeq && isPrintable(char)) {
                    result += string[i];
                    if (char >= 0x10000) result += string[i + 1];
                } else result += escapeSeq || encodeHex(char);
            }
            return result;
        }
        function writeFlowSequence(state, level, object) {
            var _result = '', _tag = state.tag, index, length, value1;
            for(index = 0, length = object.length; index < length; index += 1){
                value1 = object[index];
                if (state.replacer) value1 = state.replacer.call(object, String(index), value1);
                if (writeNode(state, level, value1, false, false) || void 0 === value1 && writeNode(state, level, null, false, false)) {
                    if ('' !== _result) _result += ',' + (state.condenseFlow ? '' : ' ');
                    _result += state.dump;
                }
            }
            state.tag = _tag;
            state.dump = '[' + _result + ']';
        }
        function writeBlockSequence(state, level, object, compact) {
            var _result = '', _tag = state.tag, index, length, value1;
            for(index = 0, length = object.length; index < length; index += 1){
                value1 = object[index];
                if (state.replacer) value1 = state.replacer.call(object, String(index), value1);
                if (writeNode(state, level + 1, value1, true, true, false, true) || void 0 === value1 && writeNode(state, level + 1, null, true, true, false, true)) {
                    if (!compact || '' !== _result) _result += generateNextLine(state, level);
                    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) _result += '-';
                    else _result += '- ';
                    _result += state.dump;
                }
            }
            state.tag = _tag;
            state.dump = _result || '[]';
        }
        function writeFlowMapping(state, level, object) {
            var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
            for(index = 0, length = objectKeyList.length; index < length; index += 1){
                pairBuffer = '';
                if ('' !== _result) pairBuffer += ', ';
                if (state.condenseFlow) pairBuffer += '"';
                objectKey = objectKeyList[index];
                objectValue = object[objectKey];
                if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
                if (!!writeNode(state, level, objectKey, false, false)) {
                    if (state.dump.length > 1024) pairBuffer += '? ';
                    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');
                    if (!!writeNode(state, level, objectValue, false, false)) {
                        pairBuffer += state.dump;
                        _result += pairBuffer;
                    }
                }
            }
            state.tag = _tag;
            state.dump = '{' + _result + '}';
        }
        function writeBlockMapping(state, level, object, compact) {
            var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
            if (true === state.sortKeys) objectKeyList.sort();
            else if ('function' == typeof state.sortKeys) objectKeyList.sort(state.sortKeys);
            else if (state.sortKeys) throw new YAMLException('sortKeys must be a boolean or a function');
            for(index = 0, length = objectKeyList.length; index < length; index += 1){
                pairBuffer = '';
                if (!compact || '' !== _result) pairBuffer += generateNextLine(state, level);
                objectKey = objectKeyList[index];
                objectValue = object[objectKey];
                if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
                if (!!writeNode(state, level + 1, objectKey, true, true, true)) {
                    explicitPair = null !== state.tag && '?' !== state.tag || state.dump && state.dump.length > 1024;
                    if (explicitPair) {
                        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += '?';
                        else pairBuffer += '? ';
                    }
                    pairBuffer += state.dump;
                    if (explicitPair) pairBuffer += generateNextLine(state, level);
                    if (!!writeNode(state, level + 1, objectValue, true, explicitPair)) {
                        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += ':';
                        else pairBuffer += ': ';
                        pairBuffer += state.dump;
                        _result += pairBuffer;
                    }
                }
            }
            state.tag = _tag;
            state.dump = _result || '{}';
        }
        function detectType(state, object, explicit) {
            var _result, typeList, index, length, type, style;
            typeList = explicit ? state.explicitTypes : state.implicitTypes;
            for(index = 0, length = typeList.length; index < length; index += 1){
                type = typeList[index];
                if ((type.instanceOf || type.predicate) && (!type.instanceOf || 'object' == typeof object && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
                    if (explicit) {
                        if (type.multi && type.representName) state.tag = type.representName(object);
                        else state.tag = type.tag;
                    } else state.tag = '?';
                    if (type.represent) {
                        style = state.styleMap[type.tag] || type.defaultStyle;
                        if ('[object Function]' === _toString.call(type.represent)) _result = type.represent(object, style);
                        else if (_hasOwnProperty.call(type.represent, style)) _result = type.represent[style](object, style);
                        else throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
                        state.dump = _result;
                    }
                    return true;
                }
            }
            return false;
        }
        function writeNode(state, level, object, block, compact, iskey, isblockseq) {
            state.tag = null;
            state.dump = object;
            if (!detectType(state, object, false)) detectType(state, object, true);
            var type = _toString.call(state.dump);
            var inblock = block;
            var tagStr;
            if (block) block = state.flowLevel < 0 || state.flowLevel > level;
            var objectOrArray = '[object Object]' === type || '[object Array]' === type, duplicateIndex, duplicate;
            if (objectOrArray) {
                duplicateIndex = state.duplicates.indexOf(object);
                duplicate = -1 !== duplicateIndex;
            }
            if (null !== state.tag && '?' !== state.tag || duplicate || 2 !== state.indent && level > 0) compact = false;
            if (duplicate && state.usedDuplicates[duplicateIndex]) state.dump = '*ref_' + duplicateIndex;
            else {
                if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) state.usedDuplicates[duplicateIndex] = true;
                if ('[object Object]' === type) {
                    if (block && 0 !== Object.keys(state.dump).length) {
                        writeBlockMapping(state, level, state.dump, compact);
                        if (duplicate) state.dump = '&ref_' + duplicateIndex + state.dump;
                    } else {
                        writeFlowMapping(state, level, state.dump);
                        if (duplicate) state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
                    }
                } else if ('[object Array]' === type) {
                    if (block && 0 !== state.dump.length) {
                        state.noArrayIndent && !isblockseq && level > 0 ? writeBlockSequence(state, level - 1, state.dump, compact) : writeBlockSequence(state, level, state.dump, compact);
                        if (duplicate) state.dump = '&ref_' + duplicateIndex + state.dump;
                    } else {
                        writeFlowSequence(state, level, state.dump);
                        if (duplicate) state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
                    }
                } else if ('[object String]' === type) {
                    if ('?' !== state.tag) writeScalar(state, state.dump, level, iskey, inblock);
                } else {
                    if ('[object Undefined]' === type) return false;
                    if (state.skipInvalid) return false;
                    throw new YAMLException('unacceptable kind of an object to dump ' + type);
                }
                if (null !== state.tag && '?' !== state.tag) {
                    tagStr = encodeURI('!' === state.tag[0] ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');
                    tagStr = '!' === state.tag[0] ? '!' + tagStr : 'tag:yaml.org,2002:' === tagStr.slice(0, 18) ? '!!' + tagStr.slice(18) : '!<' + tagStr + '>';
                    state.dump = tagStr + ' ' + state.dump;
                }
            }
            return true;
        }
        function getDuplicateReferences(object, state) {
            var objects = [], duplicatesIndexes = [], index, length;
            inspectNode(object, objects, duplicatesIndexes);
            for(index = 0, length = duplicatesIndexes.length; index < length; index += 1)state.duplicates.push(objects[duplicatesIndexes[index]]);
            state.usedDuplicates = new Array(length);
        }
        function inspectNode(object, objects, duplicatesIndexes) {
            var objectKeyList, index, length;
            if (null !== object && 'object' == typeof object) {
                index = objects.indexOf(object);
                if (-1 !== index) {
                    if (-1 === duplicatesIndexes.indexOf(index)) duplicatesIndexes.push(index);
                } else {
                    objects.push(object);
                    if (Array.isArray(object)) for(index = 0, length = object.length; index < length; index += 1)inspectNode(object[index], objects, duplicatesIndexes);
                    else {
                        objectKeyList = Object.keys(object);
                        for(index = 0, length = objectKeyList.length; index < length; index += 1)inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
                    }
                }
            }
        }
        function dump(input, options) {
            options = options || {};
            var state = new State(options);
            if (!state.noRefs) getDuplicateReferences(input, state);
            var value1 = input;
            if (state.replacer) value1 = state.replacer.call({
                '': value1
            }, '', value1);
            if (writeNode(state, 0, value1, true, true)) return state.dump + '\n';
            return '';
        }
        module.exports.dump = dump;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js": function(module) {
        function formatError(exception, compact) {
            var where = '', message = exception.reason || '(unknown reason)';
            if (!exception.mark) return message;
            if (exception.mark.name) where += 'in "' + exception.mark.name + '" ';
            where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';
            if (!compact && exception.mark.snippet) where += '\n\n' + exception.mark.snippet;
            return message + ' ' + where;
        }
        function YAMLException(reason, mark) {
            Error.call(this);
            this.name = 'YAMLException';
            this.reason = reason;
            this.mark = mark;
            this.message = formatError(this, false);
            if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
            else this.stack = new Error().stack || '';
        }
        YAMLException.prototype = Object.create(Error.prototype);
        YAMLException.prototype.constructor = YAMLException;
        YAMLException.prototype.toString = function(compact) {
            return this.name + ': ' + formatError(this, compact);
        };
        module.exports = YAMLException;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/loader.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var common = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js");
        var YAMLException = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js");
        var makeSnippet = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/snippet.js");
        var DEFAULT_SCHEMA = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js");
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var CONTEXT_FLOW_IN = 1;
        var CONTEXT_FLOW_OUT = 2;
        var CONTEXT_BLOCK_IN = 3;
        var CONTEXT_BLOCK_OUT = 4;
        var CHOMPING_CLIP = 1;
        var CHOMPING_STRIP = 2;
        var CHOMPING_KEEP = 3;
        var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
        var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
        var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
        var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
        var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
        function _class(obj) {
            return Object.prototype.toString.call(obj);
        }
        function is_EOL(c) {
            return 0x0A === c || 0x0D === c;
        }
        function is_WHITE_SPACE(c) {
            return 0x09 === c || 0x20 === c;
        }
        function is_WS_OR_EOL(c) {
            return 0x09 === c || 0x20 === c || 0x0A === c || 0x0D === c;
        }
        function is_FLOW_INDICATOR(c) {
            return 0x2C === c || 0x5B === c || 0x5D === c || 0x7B === c || 0x7D === c;
        }
        function fromHexCode(c) {
            var lc;
            if (0x30 <= c && c <= 0x39) return c - 0x30;
            lc = 0x20 | c;
            if (0x61 <= lc && lc <= 0x66) return lc - 0x61 + 10;
            return -1;
        }
        function escapedHexLen(c) {
            if (0x78 === c) return 2;
            if (0x75 === c) return 4;
            if (0x55 === c) return 8;
            return 0;
        }
        function fromDecimalCode(c) {
            if (0x30 <= c && c <= 0x39) return c - 0x30;
            return -1;
        }
        function simpleEscapeSequence(c) {
            return 0x30 === c ? '\x00' : 0x61 === c ? '\x07' : 0x62 === c ? '\x08' : 0x74 === c ? '\x09' : 0x09 === c ? '\x09' : 0x6E === c ? '\x0A' : 0x76 === c ? '\x0B' : 0x66 === c ? '\x0C' : 0x72 === c ? '\x0D' : 0x65 === c ? '\x1B' : 0x20 === c ? ' ' : 0x22 === c ? '\x22' : 0x2F === c ? '/' : 0x5C === c ? '\x5C' : 0x4E === c ? '\x85' : 0x5F === c ? '\xA0' : 0x4C === c ? '\u2028' : 0x50 === c ? '\u2029' : '';
        }
        function charFromCodepoint(c) {
            if (c <= 0xFFFF) return String.fromCharCode(c);
            return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
        }
        var simpleEscapeCheck = new Array(256);
        var simpleEscapeMap = new Array(256);
        for(var i = 0; i < 256; i++){
            simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
            simpleEscapeMap[i] = simpleEscapeSequence(i);
        }
        function State(input, options) {
            this.input = input;
            this.filename = options['filename'] || null;
            this.schema = options['schema'] || DEFAULT_SCHEMA;
            this.onWarning = options['onWarning'] || null;
            this.legacy = options['legacy'] || false;
            this.json = options['json'] || false;
            this.listener = options['listener'] || null;
            this.implicitTypes = this.schema.compiledImplicit;
            this.typeMap = this.schema.compiledTypeMap;
            this.length = input.length;
            this.position = 0;
            this.line = 0;
            this.lineStart = 0;
            this.lineIndent = 0;
            this.firstTabInLine = -1;
            this.documents = [];
        }
        function generateError(state, message) {
            var mark = {
                name: state.filename,
                buffer: state.input.slice(0, -1),
                position: state.position,
                line: state.line,
                column: state.position - state.lineStart
            };
            mark.snippet = makeSnippet(mark);
            return new YAMLException(message, mark);
        }
        function throwError(state, message) {
            throw generateError(state, message);
        }
        function throwWarning(state, message) {
            if (state.onWarning) state.onWarning.call(null, generateError(state, message));
        }
        var directiveHandlers = {
            YAML: function(state, name, args) {
                var match, major, minor;
                if (null !== state.version) throwError(state, 'duplication of %YAML directive');
                if (1 !== args.length) throwError(state, 'YAML directive accepts exactly one argument');
                match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
                if (null === match) throwError(state, 'ill-formed argument of the YAML directive');
                major = parseInt(match[1], 10);
                minor = parseInt(match[2], 10);
                if (1 !== major) throwError(state, 'unacceptable YAML version of the document');
                state.version = args[0];
                state.checkLineBreaks = minor < 2;
                if (1 !== minor && 2 !== minor) throwWarning(state, 'unsupported YAML version of the document');
            },
            TAG: function(state, name, args) {
                var handle, prefix;
                if (2 !== args.length) throwError(state, 'TAG directive accepts exactly two arguments');
                handle = args[0];
                prefix = args[1];
                if (!PATTERN_TAG_HANDLE.test(handle)) throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
                if (_hasOwnProperty.call(state.tagMap, handle)) throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
                if (!PATTERN_TAG_URI.test(prefix)) throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
                try {
                    prefix = decodeURIComponent(prefix);
                } catch (err) {
                    throwError(state, 'tag prefix is malformed: ' + prefix);
                }
                state.tagMap[handle] = prefix;
            }
        };
        function captureSegment(state, start, end, checkJson) {
            var _position, _length, _character, _result;
            if (start < end) {
                _result = state.input.slice(start, end);
                if (checkJson) for(_position = 0, _length = _result.length; _position < _length; _position += 1){
                    _character = _result.charCodeAt(_position);
                    if (!(0x09 === _character || 0x20 <= _character && _character <= 0x10FFFF)) throwError(state, 'expected valid JSON character');
                }
                else if (PATTERN_NON_PRINTABLE.test(_result)) throwError(state, 'the stream contains non-printable characters');
                state.result += _result;
            }
        }
        function mergeMappings(state, destination, source, overridableKeys) {
            var sourceKeys, key, index, quantity;
            if (!common.isObject(source)) throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
            sourceKeys = Object.keys(source);
            for(index = 0, quantity = sourceKeys.length; index < quantity; index += 1){
                key = sourceKeys[index];
                if (!_hasOwnProperty.call(destination, key)) {
                    destination[key] = source[key];
                    overridableKeys[key] = true;
                }
            }
        }
        function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
            var index, quantity;
            if (Array.isArray(keyNode)) {
                keyNode = Array.prototype.slice.call(keyNode);
                for(index = 0, quantity = keyNode.length; index < quantity; index += 1){
                    if (Array.isArray(keyNode[index])) throwError(state, 'nested arrays are not supported inside keys');
                    if ('object' == typeof keyNode && '[object Object]' === _class(keyNode[index])) keyNode[index] = '[object Object]';
                }
            }
            if ('object' == typeof keyNode && '[object Object]' === _class(keyNode)) keyNode = '[object Object]';
            keyNode = String(keyNode);
            if (null === _result) _result = {};
            if ('tag:yaml.org,2002:merge' === keyTag) {
                if (Array.isArray(valueNode)) for(index = 0, quantity = valueNode.length; index < quantity; index += 1)mergeMappings(state, _result, valueNode[index], overridableKeys);
                else mergeMappings(state, _result, valueNode, overridableKeys);
            } else {
                if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
                    state.line = startLine || state.line;
                    state.lineStart = startLineStart || state.lineStart;
                    state.position = startPos || state.position;
                    throwError(state, 'duplicated mapping key');
                }
                if ('__proto__' === keyNode) Object.defineProperty(_result, keyNode, {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: valueNode
                });
                else _result[keyNode] = valueNode;
                delete overridableKeys[keyNode];
            }
            return _result;
        }
        function readLineBreak(state) {
            var ch;
            ch = state.input.charCodeAt(state.position);
            if (0x0A === ch) state.position++;
            else if (0x0D === ch) {
                state.position++;
                if (0x0A === state.input.charCodeAt(state.position)) state.position++;
            } else throwError(state, 'a line break is expected');
            state.line += 1;
            state.lineStart = state.position;
            state.firstTabInLine = -1;
        }
        function skipSeparationSpace(state, allowComments, checkIndent) {
            var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
            while(0 !== ch){
                while(is_WHITE_SPACE(ch)){
                    if (0x09 === ch && -1 === state.firstTabInLine) state.firstTabInLine = state.position;
                    ch = state.input.charCodeAt(++state.position);
                }
                if (allowComments && 0x23 === ch) do ch = state.input.charCodeAt(++state.position);
                while (0x0A !== ch && 0x0D !== ch && 0 !== ch);
                if (is_EOL(ch)) {
                    readLineBreak(state);
                    ch = state.input.charCodeAt(state.position);
                    lineBreaks++;
                    state.lineIndent = 0;
                    while(0x20 === ch){
                        state.lineIndent++;
                        ch = state.input.charCodeAt(++state.position);
                    }
                } else break;
            }
            if (-1 !== checkIndent && 0 !== lineBreaks && state.lineIndent < checkIndent) throwWarning(state, 'deficient indentation');
            return lineBreaks;
        }
        function testDocumentSeparator(state) {
            var _position = state.position, ch;
            ch = state.input.charCodeAt(_position);
            if ((0x2D === ch || 0x2E === ch) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
                _position += 3;
                ch = state.input.charCodeAt(_position);
                if (0 === ch || is_WS_OR_EOL(ch)) return true;
            }
            return false;
        }
        function writeFoldedLines(state, count) {
            if (1 === count) state.result += ' ';
            else if (count > 1) state.result += common.repeat('\n', count - 1);
        }
        function readPlainScalar(state, nodeIndent, withinFlowCollection) {
            var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
            ch = state.input.charCodeAt(state.position);
            if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || 0x23 === ch || 0x26 === ch || 0x2A === ch || 0x21 === ch || 0x7C === ch || 0x3E === ch || 0x27 === ch || 0x22 === ch || 0x25 === ch || 0x40 === ch || 0x60 === ch) return false;
            if (0x3F === ch || 0x2D === ch) {
                following = state.input.charCodeAt(state.position + 1);
                if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) return false;
            }
            state.kind = 'scalar';
            state.result = '';
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
            while(0 !== ch){
                if (0x3A === ch) {
                    following = state.input.charCodeAt(state.position + 1);
                    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) break;
                } else if (0x23 === ch) {
                    preceding = state.input.charCodeAt(state.position - 1);
                    if (is_WS_OR_EOL(preceding)) break;
                } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) break;
                else if (is_EOL(ch)) {
                    _line = state.line;
                    _lineStart = state.lineStart;
                    _lineIndent = state.lineIndent;
                    skipSeparationSpace(state, false, -1);
                    if (state.lineIndent >= nodeIndent) {
                        hasPendingContent = true;
                        ch = state.input.charCodeAt(state.position);
                        continue;
                    }
                    state.position = captureEnd;
                    state.line = _line;
                    state.lineStart = _lineStart;
                    state.lineIndent = _lineIndent;
                    break;
                }
                if (hasPendingContent) {
                    captureSegment(state, captureStart, captureEnd, false);
                    writeFoldedLines(state, state.line - _line);
                    captureStart = captureEnd = state.position;
                    hasPendingContent = false;
                }
                if (!is_WHITE_SPACE(ch)) captureEnd = state.position + 1;
                ch = state.input.charCodeAt(++state.position);
            }
            captureSegment(state, captureStart, captureEnd, false);
            if (state.result) return true;
            state.kind = _kind;
            state.result = _result;
            return false;
        }
        function readSingleQuotedScalar(state, nodeIndent) {
            var ch, captureStart, captureEnd;
            ch = state.input.charCodeAt(state.position);
            if (0x27 !== ch) return false;
            state.kind = 'scalar';
            state.result = '';
            state.position++;
            captureStart = captureEnd = state.position;
            while(0 !== (ch = state.input.charCodeAt(state.position)))if (0x27 === ch) {
                captureSegment(state, captureStart, state.position, true);
                ch = state.input.charCodeAt(++state.position);
                if (0x27 !== ch) return true;
                captureStart = state.position;
                state.position++;
                captureEnd = state.position;
            } else if (is_EOL(ch)) {
                captureSegment(state, captureStart, captureEnd, true);
                writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
                captureStart = captureEnd = state.position;
            } else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, 'unexpected end of the document within a single quoted scalar');
            else {
                state.position++;
                captureEnd = state.position;
            }
            throwError(state, 'unexpected end of the stream within a single quoted scalar');
        }
        function readDoubleQuotedScalar(state, nodeIndent) {
            var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x22 !== ch) return false;
            state.kind = 'scalar';
            state.result = '';
            state.position++;
            captureStart = captureEnd = state.position;
            while(0 !== (ch = state.input.charCodeAt(state.position))){
                if (0x22 === ch) {
                    captureSegment(state, captureStart, state.position, true);
                    state.position++;
                    return true;
                }
                if (0x5C === ch) {
                    captureSegment(state, captureStart, state.position, true);
                    ch = state.input.charCodeAt(++state.position);
                    if (is_EOL(ch)) skipSeparationSpace(state, false, nodeIndent);
                    else if (ch < 256 && simpleEscapeCheck[ch]) {
                        state.result += simpleEscapeMap[ch];
                        state.position++;
                    } else if ((tmp = escapedHexLen(ch)) > 0) {
                        hexLength = tmp;
                        hexResult = 0;
                        for(; hexLength > 0; hexLength--){
                            ch = state.input.charCodeAt(++state.position);
                            if ((tmp = fromHexCode(ch)) >= 0) hexResult = (hexResult << 4) + tmp;
                            else throwError(state, 'expected hexadecimal character');
                        }
                        state.result += charFromCodepoint(hexResult);
                        state.position++;
                    } else throwError(state, 'unknown escape sequence');
                    captureStart = captureEnd = state.position;
                } else if (is_EOL(ch)) {
                    captureSegment(state, captureStart, captureEnd, true);
                    writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
                    captureStart = captureEnd = state.position;
                } else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, 'unexpected end of the document within a double quoted scalar');
                else {
                    state.position++;
                    captureEnd = state.position;
                }
            }
            throwError(state, 'unexpected end of the stream within a double quoted scalar');
        }
        function readFlowCollection(state, nodeIndent) {
            var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x5B === ch) {
                terminator = 0x5D;
                isMapping = false;
                _result = [];
            } else {
                if (0x7B !== ch) return false;
                terminator = 0x7D;
                isMapping = true;
                _result = {};
            }
            if (null !== state.anchor) state.anchorMap[state.anchor] = _result;
            ch = state.input.charCodeAt(++state.position);
            while(0 !== ch){
                skipSeparationSpace(state, true, nodeIndent);
                ch = state.input.charCodeAt(state.position);
                if (ch === terminator) {
                    state.position++;
                    state.tag = _tag;
                    state.anchor = _anchor;
                    state.kind = isMapping ? 'mapping' : 'sequence';
                    state.result = _result;
                    return true;
                }
                if (readNext) {
                    if (0x2C === ch) throwError(state, "expected the node content, but found ','");
                } else throwError(state, 'missed comma between flow collection entries');
                keyTag = keyNode = valueNode = null;
                isPair = isExplicitPair = false;
                if (0x3F === ch) {
                    following = state.input.charCodeAt(state.position + 1);
                    if (is_WS_OR_EOL(following)) {
                        isPair = isExplicitPair = true;
                        state.position++;
                        skipSeparationSpace(state, true, nodeIndent);
                    }
                }
                _line = state.line;
                _lineStart = state.lineStart;
                _pos = state.position;
                composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
                keyTag = state.tag;
                keyNode = state.result;
                skipSeparationSpace(state, true, nodeIndent);
                ch = state.input.charCodeAt(state.position);
                if ((isExplicitPair || state.line === _line) && 0x3A === ch) {
                    isPair = true;
                    ch = state.input.charCodeAt(++state.position);
                    skipSeparationSpace(state, true, nodeIndent);
                    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
                    valueNode = state.result;
                }
                if (isMapping) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
                else if (isPair) _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
                else _result.push(keyNode);
                skipSeparationSpace(state, true, nodeIndent);
                ch = state.input.charCodeAt(state.position);
                if (0x2C === ch) {
                    readNext = true;
                    ch = state.input.charCodeAt(++state.position);
                } else readNext = false;
            }
            throwError(state, 'unexpected end of the stream within a flow collection');
        }
        function readBlockScalar(state, nodeIndent) {
            var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x7C === ch) folding = false;
            else {
                if (0x3E !== ch) return false;
                folding = true;
            }
            state.kind = 'scalar';
            state.result = '';
            while(0 !== ch){
                ch = state.input.charCodeAt(++state.position);
                if (0x2B === ch || 0x2D === ch) {
                    if (CHOMPING_CLIP === chomping) chomping = 0x2B === ch ? CHOMPING_KEEP : CHOMPING_STRIP;
                    else throwError(state, 'repeat of a chomping mode identifier');
                } else if ((tmp = fromDecimalCode(ch)) >= 0) {
                    if (0 === tmp) throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
                    else if (detectedIndent) throwError(state, 'repeat of an indentation width identifier');
                    else {
                        textIndent = nodeIndent + tmp - 1;
                        detectedIndent = true;
                    }
                } else break;
            }
            if (is_WHITE_SPACE(ch)) {
                do ch = state.input.charCodeAt(++state.position);
                while (is_WHITE_SPACE(ch));
                if (0x23 === ch) do ch = state.input.charCodeAt(++state.position);
                while (!is_EOL(ch) && 0 !== ch);
            }
            while(0 !== ch){
                readLineBreak(state);
                state.lineIndent = 0;
                ch = state.input.charCodeAt(state.position);
                while((!detectedIndent || state.lineIndent < textIndent) && 0x20 === ch){
                    state.lineIndent++;
                    ch = state.input.charCodeAt(++state.position);
                }
                if (!detectedIndent && state.lineIndent > textIndent) textIndent = state.lineIndent;
                if (is_EOL(ch)) {
                    emptyLines++;
                    continue;
                }
                if (state.lineIndent < textIndent) {
                    if (chomping === CHOMPING_KEEP) state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
                    else if (chomping === CHOMPING_CLIP) {
                        if (didReadContent) state.result += '\n';
                    }
                    break;
                }
                if (folding) {
                    if (is_WHITE_SPACE(ch)) {
                        atMoreIndented = true;
                        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
                    } else if (atMoreIndented) {
                        atMoreIndented = false;
                        state.result += common.repeat('\n', emptyLines + 1);
                    } else if (0 === emptyLines) {
                        if (didReadContent) state.result += ' ';
                    } else state.result += common.repeat('\n', emptyLines);
                } else state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
                didReadContent = true;
                detectedIndent = true;
                emptyLines = 0;
                captureStart = state.position;
                while(!is_EOL(ch) && 0 !== ch)ch = state.input.charCodeAt(++state.position);
                captureSegment(state, captureStart, state.position, false);
            }
            return true;
        }
        function readBlockSequence(state, nodeIndent) {
            var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
            if (-1 !== state.firstTabInLine) return false;
            if (null !== state.anchor) state.anchorMap[state.anchor] = _result;
            ch = state.input.charCodeAt(state.position);
            while(0 !== ch){
                if (-1 !== state.firstTabInLine) {
                    state.position = state.firstTabInLine;
                    throwError(state, 'tab characters must not be used in indentation');
                }
                if (0x2D !== ch) break;
                following = state.input.charCodeAt(state.position + 1);
                if (!is_WS_OR_EOL(following)) break;
                detected = true;
                state.position++;
                if (skipSeparationSpace(state, true, -1)) {
                    if (state.lineIndent <= nodeIndent) {
                        _result.push(null);
                        ch = state.input.charCodeAt(state.position);
                        continue;
                    }
                }
                _line = state.line;
                composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
                _result.push(state.result);
                skipSeparationSpace(state, true, -1);
                ch = state.input.charCodeAt(state.position);
                if ((state.line === _line || state.lineIndent > nodeIndent) && 0 !== ch) throwError(state, 'bad indentation of a sequence entry');
                else if (state.lineIndent < nodeIndent) break;
            }
            if (detected) {
                state.tag = _tag;
                state.anchor = _anchor;
                state.kind = 'sequence';
                state.result = _result;
                return true;
            }
            return false;
        }
        function readBlockMapping(state, nodeIndent, flowIndent) {
            var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
            if (-1 !== state.firstTabInLine) return false;
            if (null !== state.anchor) state.anchorMap[state.anchor] = _result;
            ch = state.input.charCodeAt(state.position);
            while(0 !== ch){
                if (!atExplicitKey && -1 !== state.firstTabInLine) {
                    state.position = state.firstTabInLine;
                    throwError(state, 'tab characters must not be used in indentation');
                }
                following = state.input.charCodeAt(state.position + 1);
                _line = state.line;
                if ((0x3F === ch || 0x3A === ch) && is_WS_OR_EOL(following)) {
                    if (0x3F === ch) {
                        if (atExplicitKey) {
                            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                            keyTag = keyNode = valueNode = null;
                        }
                        detected = true;
                        atExplicitKey = true;
                        allowCompact = true;
                    } else if (atExplicitKey) {
                        atExplicitKey = false;
                        allowCompact = true;
                    } else throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
                    state.position += 1;
                    ch = following;
                } else {
                    _keyLine = state.line;
                    _keyLineStart = state.lineStart;
                    _keyPos = state.position;
                    if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) break;
                    if (state.line === _line) {
                        ch = state.input.charCodeAt(state.position);
                        while(is_WHITE_SPACE(ch))ch = state.input.charCodeAt(++state.position);
                        if (0x3A === ch) {
                            ch = state.input.charCodeAt(++state.position);
                            if (!is_WS_OR_EOL(ch)) throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
                            if (atExplicitKey) {
                                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                                keyTag = keyNode = valueNode = null;
                            }
                            detected = true;
                            atExplicitKey = false;
                            allowCompact = false;
                            keyTag = state.tag;
                            keyNode = state.result;
                        } else if (detected) throwError(state, 'can not read an implicit mapping pair; a colon is missed');
                        else {
                            state.tag = _tag;
                            state.anchor = _anchor;
                            return true;
                        }
                    } else if (detected) throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
                    else {
                        state.tag = _tag;
                        state.anchor = _anchor;
                        return true;
                    }
                }
                if (state.line === _line || state.lineIndent > nodeIndent) {
                    if (atExplicitKey) {
                        _keyLine = state.line;
                        _keyLineStart = state.lineStart;
                        _keyPos = state.position;
                    }
                    if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
                        if (atExplicitKey) keyNode = state.result;
                        else valueNode = state.result;
                    }
                    if (!atExplicitKey) {
                        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
                        keyTag = keyNode = valueNode = null;
                    }
                    skipSeparationSpace(state, true, -1);
                    ch = state.input.charCodeAt(state.position);
                }
                if ((state.line === _line || state.lineIndent > nodeIndent) && 0 !== ch) throwError(state, 'bad indentation of a mapping entry');
                else if (state.lineIndent < nodeIndent) break;
            }
            if (atExplicitKey) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            if (detected) {
                state.tag = _tag;
                state.anchor = _anchor;
                state.kind = 'mapping';
                state.result = _result;
            }
            return detected;
        }
        function readTagProperty(state) {
            var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x21 !== ch) return false;
            if (null !== state.tag) throwError(state, 'duplication of a tag property');
            ch = state.input.charCodeAt(++state.position);
            if (0x3C === ch) {
                isVerbatim = true;
                ch = state.input.charCodeAt(++state.position);
            } else if (0x21 === ch) {
                isNamed = true;
                tagHandle = '!!';
                ch = state.input.charCodeAt(++state.position);
            } else tagHandle = '!';
            _position = state.position;
            if (isVerbatim) {
                do ch = state.input.charCodeAt(++state.position);
                while (0 !== ch && 0x3E !== ch);
                if (state.position < state.length) {
                    tagName = state.input.slice(_position, state.position);
                    ch = state.input.charCodeAt(++state.position);
                } else throwError(state, 'unexpected end of the stream within a verbatim tag');
            } else {
                while(0 !== ch && !is_WS_OR_EOL(ch)){
                    if (0x21 === ch) {
                        if (isNamed) throwError(state, 'tag suffix cannot contain exclamation marks');
                        else {
                            tagHandle = state.input.slice(_position - 1, state.position + 1);
                            if (!PATTERN_TAG_HANDLE.test(tagHandle)) throwError(state, 'named tag handle cannot contain such characters');
                            isNamed = true;
                            _position = state.position + 1;
                        }
                    }
                    ch = state.input.charCodeAt(++state.position);
                }
                tagName = state.input.slice(_position, state.position);
                if (PATTERN_FLOW_INDICATORS.test(tagName)) throwError(state, 'tag suffix cannot contain flow indicator characters');
            }
            if (tagName && !PATTERN_TAG_URI.test(tagName)) throwError(state, 'tag name cannot contain such characters: ' + tagName);
            try {
                tagName = decodeURIComponent(tagName);
            } catch (err) {
                throwError(state, 'tag name is malformed: ' + tagName);
            }
            if (isVerbatim) state.tag = tagName;
            else if (_hasOwnProperty.call(state.tagMap, tagHandle)) state.tag = state.tagMap[tagHandle] + tagName;
            else if ('!' === tagHandle) state.tag = '!' + tagName;
            else if ('!!' === tagHandle) state.tag = 'tag:yaml.org,2002:' + tagName;
            else throwError(state, 'undeclared tag handle "' + tagHandle + '"');
            return true;
        }
        function readAnchorProperty(state) {
            var _position, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x26 !== ch) return false;
            if (null !== state.anchor) throwError(state, 'duplication of an anchor property');
            ch = state.input.charCodeAt(++state.position);
            _position = state.position;
            while(0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch))ch = state.input.charCodeAt(++state.position);
            if (state.position === _position) throwError(state, 'name of an anchor node must contain at least one character');
            state.anchor = state.input.slice(_position, state.position);
            return true;
        }
        function readAlias(state) {
            var _position, alias, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x2A !== ch) return false;
            ch = state.input.charCodeAt(++state.position);
            _position = state.position;
            while(0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch))ch = state.input.charCodeAt(++state.position);
            if (state.position === _position) throwError(state, 'name of an alias node must contain at least one character');
            alias = state.input.slice(_position, state.position);
            if (!_hasOwnProperty.call(state.anchorMap, alias)) throwError(state, 'unidentified alias "' + alias + '"');
            state.result = state.anchorMap[alias];
            skipSeparationSpace(state, true, -1);
            return true;
        }
        function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
            var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
            if (null !== state.listener) state.listener('open', state);
            state.tag = null;
            state.anchor = null;
            state.kind = null;
            state.result = null;
            allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
            if (allowToSeek) {
                if (skipSeparationSpace(state, true, -1)) {
                    atNewLine = true;
                    if (state.lineIndent > parentIndent) indentStatus = 1;
                    else if (state.lineIndent === parentIndent) indentStatus = 0;
                    else if (state.lineIndent < parentIndent) indentStatus = -1;
                }
            }
            if (1 === indentStatus) while(readTagProperty(state) || readAnchorProperty(state))if (skipSeparationSpace(state, true, -1)) {
                atNewLine = true;
                allowBlockCollections = allowBlockStyles;
                if (state.lineIndent > parentIndent) indentStatus = 1;
                else if (state.lineIndent === parentIndent) indentStatus = 0;
                else if (state.lineIndent < parentIndent) indentStatus = -1;
            } else allowBlockCollections = false;
            if (allowBlockCollections) allowBlockCollections = atNewLine || allowCompact;
            if (1 === indentStatus || CONTEXT_BLOCK_OUT === nodeContext) {
                flowIndent = CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext ? parentIndent : parentIndent + 1;
                blockIndent = state.position - state.lineStart;
                if (1 === indentStatus) {
                    if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) hasContent = true;
                    else {
                        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) hasContent = true;
                        else if (readAlias(state)) {
                            hasContent = true;
                            if (null !== state.tag || null !== state.anchor) throwError(state, 'alias node should not have any properties');
                        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                            hasContent = true;
                            if (null === state.tag) state.tag = '?';
                        }
                        if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
                    }
                } else if (0 === indentStatus) hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
            }
            if (null === state.tag) {
                if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
            } else if ('?' === state.tag) {
                if (null !== state.result && 'scalar' !== state.kind) throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
                for(typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1){
                    type = state.implicitTypes[typeIndex];
                    if (type.resolve(state.result)) {
                        state.result = type.construct(state.result);
                        state.tag = type.tag;
                        if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
                        break;
                    }
                }
            } else if ('!' !== state.tag) {
                if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) type = state.typeMap[state.kind || 'fallback'][state.tag];
                else {
                    type = null;
                    typeList = state.typeMap.multi[state.kind || 'fallback'];
                    for(typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1)if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
                        type = typeList[typeIndex];
                        break;
                    }
                }
                if (!type) throwError(state, 'unknown tag !<' + state.tag + '>');
                if (null !== state.result && type.kind !== state.kind) throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
                if (type.resolve(state.result, state.tag)) {
                    state.result = type.construct(state.result, state.tag);
                    if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
                } else throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
            }
            if (null !== state.listener) state.listener('close', state);
            return null !== state.tag || null !== state.anchor || hasContent;
        }
        function readDocument(state) {
            var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
            state.version = null;
            state.checkLineBreaks = state.legacy;
            state.tagMap = Object.create(null);
            state.anchorMap = Object.create(null);
            while(0 !== (ch = state.input.charCodeAt(state.position))){
                skipSeparationSpace(state, true, -1);
                ch = state.input.charCodeAt(state.position);
                if (state.lineIndent > 0 || 0x25 !== ch) break;
                hasDirectives = true;
                ch = state.input.charCodeAt(++state.position);
                _position = state.position;
                while(0 !== ch && !is_WS_OR_EOL(ch))ch = state.input.charCodeAt(++state.position);
                directiveName = state.input.slice(_position, state.position);
                directiveArgs = [];
                if (directiveName.length < 1) throwError(state, 'directive name must not be less than one character in length');
                while(0 !== ch){
                    while(is_WHITE_SPACE(ch))ch = state.input.charCodeAt(++state.position);
                    if (0x23 === ch) {
                        do ch = state.input.charCodeAt(++state.position);
                        while (0 !== ch && !is_EOL(ch));
                        break;
                    }
                    if (is_EOL(ch)) break;
                    _position = state.position;
                    while(0 !== ch && !is_WS_OR_EOL(ch))ch = state.input.charCodeAt(++state.position);
                    directiveArgs.push(state.input.slice(_position, state.position));
                }
                if (0 !== ch) readLineBreak(state);
                if (_hasOwnProperty.call(directiveHandlers, directiveName)) directiveHandlers[directiveName](state, directiveName, directiveArgs);
                else throwWarning(state, 'unknown document directive "' + directiveName + '"');
            }
            skipSeparationSpace(state, true, -1);
            if (0 === state.lineIndent && 0x2D === state.input.charCodeAt(state.position) && 0x2D === state.input.charCodeAt(state.position + 1) && 0x2D === state.input.charCodeAt(state.position + 2)) {
                state.position += 3;
                skipSeparationSpace(state, true, -1);
            } else if (hasDirectives) throwError(state, 'directives end mark is expected');
            composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
            skipSeparationSpace(state, true, -1);
            if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) throwWarning(state, 'non-ASCII line breaks are interpreted as content');
            state.documents.push(state.result);
            if (state.position === state.lineStart && testDocumentSeparator(state)) {
                if (0x2E === state.input.charCodeAt(state.position)) {
                    state.position += 3;
                    skipSeparationSpace(state, true, -1);
                }
                return;
            }
            if (!(state.position < state.length - 1)) return;
            throwError(state, 'end of the stream or a document separator is expected');
        }
        function loadDocuments(input, options) {
            input = String(input);
            options = options || {};
            if (0 !== input.length) {
                if (0x0A !== input.charCodeAt(input.length - 1) && 0x0D !== input.charCodeAt(input.length - 1)) input += '\n';
                if (0xFEFF === input.charCodeAt(0)) input = input.slice(1);
            }
            var state = new State(input, options);
            var nullpos = input.indexOf('\0');
            if (-1 !== nullpos) {
                state.position = nullpos;
                throwError(state, 'null byte is not allowed in input');
            }
            state.input += '\0';
            while(0x20 === state.input.charCodeAt(state.position)){
                state.lineIndent += 1;
                state.position += 1;
            }
            while(state.position < state.length - 1)readDocument(state);
            return state.documents;
        }
        function loadAll(input, iterator, options) {
            if (null !== iterator && 'object' == typeof iterator && void 0 === options) {
                options = iterator;
                iterator = null;
            }
            var documents = loadDocuments(input, options);
            if ('function' != typeof iterator) return documents;
            for(var index = 0, length = documents.length; index < length; index += 1)iterator(documents[index]);
        }
        function load(input, options) {
            var documents = loadDocuments(input, options);
            if (0 === documents.length) return;
            if (1 === documents.length) return documents[0];
            throw new YAMLException('expected a single document in the stream, but found more');
        }
        module.exports.loadAll = loadAll;
        module.exports.load = load;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var YAMLException = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js");
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        function compileList(schema, name) {
            var result = [];
            schema[name].forEach(function(currentType) {
                var newIndex = result.length;
                result.forEach(function(previousType, previousIndex) {
                    if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) newIndex = previousIndex;
                });
                result[newIndex] = currentType;
            });
            return result;
        }
        function compileMap() {
            var result = {
                scalar: {},
                sequence: {},
                mapping: {},
                fallback: {},
                multi: {
                    scalar: [],
                    sequence: [],
                    mapping: [],
                    fallback: []
                }
            }, index, length;
            function collectType(type) {
                if (type.multi) {
                    result.multi[type.kind].push(type);
                    result.multi['fallback'].push(type);
                } else result[type.kind][type.tag] = result['fallback'][type.tag] = type;
            }
            for(index = 0, length = arguments.length; index < length; index += 1)arguments[index].forEach(collectType);
            return result;
        }
        function Schema(definition) {
            return this.extend(definition);
        }
        Schema.prototype.extend = function(definition) {
            var implicit = [];
            var explicit = [];
            if (definition instanceof Type) explicit.push(definition);
            else if (Array.isArray(definition)) explicit = explicit.concat(definition);
            else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
                if (definition.implicit) implicit = implicit.concat(definition.implicit);
                if (definition.explicit) explicit = explicit.concat(definition.explicit);
            } else throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
            implicit.forEach(function(type) {
                if (!(type instanceof Type)) throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
                if (type.loadKind && 'scalar' !== type.loadKind) throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
                if (type.multi) throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
            });
            explicit.forEach(function(type) {
                if (!(type instanceof Type)) throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
            });
            var result = Object.create(Schema.prototype);
            result.implicit = (this.implicit || []).concat(implicit);
            result.explicit = (this.explicit || []).concat(explicit);
            result.compiledImplicit = compileList(result, 'implicit');
            result.compiledExplicit = compileList(result, 'explicit');
            result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
            return result;
        };
        module.exports = Schema;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js");
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js").extend({
            implicit: [
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js")
            ],
            explicit: [
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js")
            ]
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Schema = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js");
        module.exports = new Schema({
            explicit: [
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js")
            ]
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js").extend({
            implicit: [
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js"),
                __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js")
            ]
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/snippet.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var common = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js");
        function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
            var head = '';
            var tail = '';
            var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
            if (position - lineStart > maxHalfLength) {
                head = ' ... ';
                lineStart = position - maxHalfLength + head.length;
            }
            if (lineEnd - position > maxHalfLength) {
                tail = ' ...';
                lineEnd = position + maxHalfLength - tail.length;
            }
            return {
                str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
                pos: position - lineStart + head.length
            };
        }
        function padStart(string, max) {
            return common.repeat(' ', max - string.length) + string;
        }
        function makeSnippet(mark, options) {
            options = Object.create(options || null);
            if (!mark.buffer) return null;
            if (!options.maxLength) options.maxLength = 79;
            if ('number' != typeof options.indent) options.indent = 1;
            if ('number' != typeof options.linesBefore) options.linesBefore = 3;
            if ('number' != typeof options.linesAfter) options.linesAfter = 2;
            var re = /\r?\n|\r|\0/g;
            var lineStarts = [
                0
            ];
            var lineEnds = [];
            var match;
            var foundLineNo = -1;
            while(match = re.exec(mark.buffer)){
                lineEnds.push(match.index);
                lineStarts.push(match.index + match[0].length);
                if (mark.position <= match.index && foundLineNo < 0) foundLineNo = lineStarts.length - 2;
            }
            if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
            var result = '', i, line;
            var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
            var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
            for(i = 1; i <= options.linesBefore; i++){
                if (foundLineNo - i < 0) break;
                line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
                result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n' + result;
            }
            line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
            result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
            result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + "^\n";
            for(i = 1; i <= options.linesAfter; i++){
                if (foundLineNo + i >= lineEnds.length) break;
                line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
                result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
            }
            return result.replace(/\n$/, '');
        }
        module.exports = makeSnippet;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var YAMLException = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js");
        var TYPE_CONSTRUCTOR_OPTIONS = [
            'kind',
            'multi',
            'resolve',
            'construct',
            'instanceOf',
            'predicate',
            'represent',
            'representName',
            'defaultStyle',
            'styleAliases'
        ];
        var YAML_NODE_KINDS = [
            'scalar',
            'sequence',
            'mapping'
        ];
        function compileStyleAliases(map) {
            var result = {};
            if (null !== map) Object.keys(map).forEach(function(style) {
                map[style].forEach(function(alias) {
                    result[String(alias)] = style;
                });
            });
            return result;
        }
        function Type(tag, options) {
            options = options || {};
            Object.keys(options).forEach(function(name) {
                if (-1 === TYPE_CONSTRUCTOR_OPTIONS.indexOf(name)) throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
            });
            this.options = options;
            this.tag = tag;
            this.kind = options['kind'] || null;
            this.resolve = options['resolve'] || function() {
                return true;
            };
            this.construct = options['construct'] || function(data) {
                return data;
            };
            this.instanceOf = options['instanceOf'] || null;
            this.predicate = options['predicate'] || null;
            this.represent = options['represent'] || null;
            this.representName = options['representName'] || null;
            this.defaultStyle = options['defaultStyle'] || null;
            this.multi = options['multi'] || false;
            this.styleAliases = compileStyleAliases(options['styleAliases'] || null);
            if (-1 === YAML_NODE_KINDS.indexOf(this.kind)) throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
        }
        module.exports = Type;
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';
        function resolveYamlBinary(data) {
            if (null === data) return false;
            var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
            for(idx = 0; idx < max; idx++){
                code = map.indexOf(data.charAt(idx));
                if (!(code > 64)) {
                    if (code < 0) return false;
                    bitlen += 6;
                }
            }
            return bitlen % 8 === 0;
        }
        function constructYamlBinary(data) {
            var idx, tailbits, input = data.replace(/[\r\n=]/g, ''), max = input.length, map = BASE64_MAP, bits = 0, result = [];
            for(idx = 0; idx < max; idx++){
                if (idx % 4 === 0 && idx) {
                    result.push(bits >> 16 & 0xFF);
                    result.push(bits >> 8 & 0xFF);
                    result.push(0xFF & bits);
                }
                bits = bits << 6 | map.indexOf(input.charAt(idx));
            }
            tailbits = max % 4 * 6;
            if (0 === tailbits) {
                result.push(bits >> 16 & 0xFF);
                result.push(bits >> 8 & 0xFF);
                result.push(0xFF & bits);
            } else if (18 === tailbits) {
                result.push(bits >> 10 & 0xFF);
                result.push(bits >> 2 & 0xFF);
            } else if (12 === tailbits) result.push(bits >> 4 & 0xFF);
            return new Uint8Array(result);
        }
        function representYamlBinary(object) {
            var result = '', bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
            for(idx = 0; idx < max; idx++){
                if (idx % 3 === 0 && idx) {
                    result += map[bits >> 18 & 0x3F];
                    result += map[bits >> 12 & 0x3F];
                    result += map[bits >> 6 & 0x3F];
                    result += map[0x3F & bits];
                }
                bits = (bits << 8) + object[idx];
            }
            tail = max % 3;
            if (0 === tail) {
                result += map[bits >> 18 & 0x3F];
                result += map[bits >> 12 & 0x3F];
                result += map[bits >> 6 & 0x3F];
                result += map[0x3F & bits];
            } else if (2 === tail) {
                result += map[bits >> 10 & 0x3F];
                result += map[bits >> 4 & 0x3F];
                result += map[bits << 2 & 0x3F];
                result += map[64];
            } else if (1 === tail) {
                result += map[bits >> 2 & 0x3F];
                result += map[bits << 4 & 0x3F];
                result += map[64];
                result += map[64];
            }
            return result;
        }
        function isBinary(obj) {
            return '[object Uint8Array]' === Object.prototype.toString.call(obj);
        }
        module.exports = new Type('tag:yaml.org,2002:binary', {
            kind: 'scalar',
            resolve: resolveYamlBinary,
            construct: constructYamlBinary,
            predicate: isBinary,
            represent: representYamlBinary
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        function resolveYamlBoolean(data) {
            if (null === data) return false;
            var max = data.length;
            return 4 === max && ('true' === data || 'True' === data || 'TRUE' === data) || 5 === max && ('false' === data || 'False' === data || 'FALSE' === data);
        }
        function constructYamlBoolean(data) {
            return 'true' === data || 'True' === data || 'TRUE' === data;
        }
        function isBoolean(object) {
            return '[object Boolean]' === Object.prototype.toString.call(object);
        }
        module.exports = new Type('tag:yaml.org,2002:bool', {
            kind: 'scalar',
            resolve: resolveYamlBoolean,
            construct: constructYamlBoolean,
            predicate: isBoolean,
            represent: {
                lowercase: function(object) {
                    return object ? 'true' : 'false';
                },
                uppercase: function(object) {
                    return object ? 'TRUE' : 'FALSE';
                },
                camelcase: function(object) {
                    return object ? 'True' : 'False';
                }
            },
            defaultStyle: 'lowercase'
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var common = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js");
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
        function resolveYamlFloat(data) {
            if (null === data) return false;
            if (!YAML_FLOAT_PATTERN.test(data) || '_' === data[data.length - 1]) return false;
            return true;
        }
        function constructYamlFloat(data) {
            var value1, sign;
            value1 = data.replace(/_/g, '').toLowerCase();
            sign = '-' === value1[0] ? -1 : 1;
            if ('+-'.indexOf(value1[0]) >= 0) value1 = value1.slice(1);
            if ('.inf' === value1) return 1 === sign ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
            if ('.nan' === value1) return NaN;
            return sign * parseFloat(value1, 10);
        }
        var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
        function representYamlFloat(object, style) {
            var res;
            if (isNaN(object)) switch(style){
                case 'lowercase':
                    return '.nan';
                case 'uppercase':
                    return '.NAN';
                case 'camelcase':
                    return '.NaN';
            }
            else if (Number.POSITIVE_INFINITY === object) switch(style){
                case 'lowercase':
                    return '.inf';
                case 'uppercase':
                    return '.INF';
                case 'camelcase':
                    return '.Inf';
            }
            else if (Number.NEGATIVE_INFINITY === object) switch(style){
                case 'lowercase':
                    return '-.inf';
                case 'uppercase':
                    return '-.INF';
                case 'camelcase':
                    return '-.Inf';
            }
            else if (common.isNegativeZero(object)) return '-0.0';
            res = object.toString(10);
            return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
        }
        function isFloat(object) {
            return '[object Number]' === Object.prototype.toString.call(object) && (object % 1 !== 0 || common.isNegativeZero(object));
        }
        module.exports = new Type('tag:yaml.org,2002:float', {
            kind: 'scalar',
            resolve: resolveYamlFloat,
            construct: constructYamlFloat,
            predicate: isFloat,
            represent: representYamlFloat,
            defaultStyle: 'lowercase'
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var common = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js");
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        function isHexCode(c) {
            return 0x30 <= c && c <= 0x39 || 0x41 <= c && c <= 0x46 || 0x61 <= c && c <= 0x66;
        }
        function isOctCode(c) {
            return 0x30 <= c && c <= 0x37;
        }
        function isDecCode(c) {
            return 0x30 <= c && c <= 0x39;
        }
        function resolveYamlInteger(data) {
            if (null === data) return false;
            var max = data.length, index = 0, hasDigits = false, ch;
            if (!max) return false;
            ch = data[index];
            if ('-' === ch || '+' === ch) ch = data[++index];
            if ('0' === ch) {
                if (index + 1 === max) return true;
                ch = data[++index];
                if ('b' === ch) {
                    index++;
                    for(; index < max; index++){
                        ch = data[index];
                        if ('_' !== ch) {
                            if ('0' !== ch && '1' !== ch) return false;
                            hasDigits = true;
                        }
                    }
                    return hasDigits && '_' !== ch;
                }
                if ('x' === ch) {
                    index++;
                    for(; index < max; index++){
                        ch = data[index];
                        if ('_' !== ch) {
                            if (!isHexCode(data.charCodeAt(index))) return false;
                            hasDigits = true;
                        }
                    }
                    return hasDigits && '_' !== ch;
                }
                if ('o' === ch) {
                    index++;
                    for(; index < max; index++){
                        ch = data[index];
                        if ('_' !== ch) {
                            if (!isOctCode(data.charCodeAt(index))) return false;
                            hasDigits = true;
                        }
                    }
                    return hasDigits && '_' !== ch;
                }
            }
            if ('_' === ch) return false;
            for(; index < max; index++){
                ch = data[index];
                if ('_' !== ch) {
                    if (!isDecCode(data.charCodeAt(index))) return false;
                    hasDigits = true;
                }
            }
            if (!hasDigits || '_' === ch) return false;
            return true;
        }
        function constructYamlInteger(data) {
            var value1 = data, sign = 1, ch;
            if (-1 !== value1.indexOf('_')) value1 = value1.replace(/_/g, '');
            ch = value1[0];
            if ('-' === ch || '+' === ch) {
                if ('-' === ch) sign = -1;
                value1 = value1.slice(1);
                ch = value1[0];
            }
            if ('0' === value1) return 0;
            if ('0' === ch) {
                if ('b' === value1[1]) return sign * parseInt(value1.slice(2), 2);
                if ('x' === value1[1]) return sign * parseInt(value1.slice(2), 16);
                if ('o' === value1[1]) return sign * parseInt(value1.slice(2), 8);
            }
            return sign * parseInt(value1, 10);
        }
        function isInteger(object) {
            return '[object Number]' === Object.prototype.toString.call(object) && object % 1 === 0 && !common.isNegativeZero(object);
        }
        module.exports = new Type('tag:yaml.org,2002:int', {
            kind: 'scalar',
            resolve: resolveYamlInteger,
            construct: constructYamlInteger,
            predicate: isInteger,
            represent: {
                binary: function(obj) {
                    return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
                },
                octal: function(obj) {
                    return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);
                },
                decimal: function(obj) {
                    return obj.toString(10);
                },
                hexadecimal: function(obj) {
                    return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
                }
            },
            defaultStyle: 'decimal',
            styleAliases: {
                binary: [
                    2,
                    'bin'
                ],
                octal: [
                    8,
                    'oct'
                ],
                decimal: [
                    10,
                    'dec'
                ],
                hexadecimal: [
                    16,
                    'hex'
                ]
            }
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        module.exports = new Type('tag:yaml.org,2002:map', {
            kind: 'mapping',
            construct: function(data) {
                return null !== data ? data : {};
            }
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        function resolveYamlMerge(data) {
            return '<<' === data || null === data;
        }
        module.exports = new Type('tag:yaml.org,2002:merge', {
            kind: 'scalar',
            resolve: resolveYamlMerge
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        function resolveYamlNull(data) {
            if (null === data) return true;
            var max = data.length;
            return 1 === max && '~' === data || 4 === max && ('null' === data || 'Null' === data || 'NULL' === data);
        }
        function constructYamlNull() {
            return null;
        }
        function isNull(object) {
            return null === object;
        }
        module.exports = new Type('tag:yaml.org,2002:null', {
            kind: 'scalar',
            resolve: resolveYamlNull,
            construct: constructYamlNull,
            predicate: isNull,
            represent: {
                canonical: function() {
                    return '~';
                },
                lowercase: function() {
                    return 'null';
                },
                uppercase: function() {
                    return 'NULL';
                },
                camelcase: function() {
                    return 'Null';
                },
                empty: function() {
                    return '';
                }
            },
            defaultStyle: 'lowercase'
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var _toString = Object.prototype.toString;
        function resolveYamlOmap(data) {
            if (null === data) return true;
            var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
            for(index = 0, length = object.length; index < length; index += 1){
                pair = object[index];
                pairHasKey = false;
                if ('[object Object]' !== _toString.call(pair)) return false;
                for(pairKey in pair)if (_hasOwnProperty.call(pair, pairKey)) {
                    if (pairHasKey) return false;
                    pairHasKey = true;
                }
                if (!pairHasKey) return false;
                if (-1 !== objectKeys.indexOf(pairKey)) return false;
                objectKeys.push(pairKey);
            }
            return true;
        }
        function constructYamlOmap(data) {
            return null !== data ? data : [];
        }
        module.exports = new Type('tag:yaml.org,2002:omap', {
            kind: 'sequence',
            resolve: resolveYamlOmap,
            construct: constructYamlOmap
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        var _toString = Object.prototype.toString;
        function resolveYamlPairs(data) {
            if (null === data) return true;
            var index, length, pair, keys, result, object = data;
            result = new Array(object.length);
            for(index = 0, length = object.length; index < length; index += 1){
                pair = object[index];
                if ('[object Object]' !== _toString.call(pair)) return false;
                keys = Object.keys(pair);
                if (1 !== keys.length) return false;
                result[index] = [
                    keys[0],
                    pair[keys[0]]
                ];
            }
            return true;
        }
        function constructYamlPairs(data) {
            if (null === data) return [];
            var index, length, pair, keys, result, object = data;
            result = new Array(object.length);
            for(index = 0, length = object.length; index < length; index += 1){
                pair = object[index];
                keys = Object.keys(pair);
                result[index] = [
                    keys[0],
                    pair[keys[0]]
                ];
            }
            return result;
        }
        module.exports = new Type('tag:yaml.org,2002:pairs', {
            kind: 'sequence',
            resolve: resolveYamlPairs,
            construct: constructYamlPairs
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        module.exports = new Type('tag:yaml.org,2002:seq', {
            kind: 'sequence',
            construct: function(data) {
                return null !== data ? data : [];
            }
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        function resolveYamlSet(data) {
            if (null === data) return true;
            var key, object = data;
            for(key in object)if (_hasOwnProperty.call(object, key)) {
                if (null !== object[key]) return false;
            }
            return true;
        }
        function constructYamlSet(data) {
            return null !== data ? data : {};
        }
        module.exports = new Type('tag:yaml.org,2002:set', {
            kind: 'mapping',
            resolve: resolveYamlSet,
            construct: constructYamlSet
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        module.exports = new Type('tag:yaml.org,2002:str', {
            kind: 'scalar',
            construct: function(data) {
                return null !== data ? data : '';
            }
        });
    },
    "../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var Type = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js");
        var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
        var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
        function resolveYamlTimestamp(data) {
            if (null === data) return false;
            if (null !== YAML_DATE_REGEXP.exec(data)) return true;
            if (null !== YAML_TIMESTAMP_REGEXP.exec(data)) return true;
            return false;
        }
        function constructYamlTimestamp(data) {
            var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
            match = YAML_DATE_REGEXP.exec(data);
            if (null === match) match = YAML_TIMESTAMP_REGEXP.exec(data);
            if (null === match) throw new Error('Date resolve error');
            year = +match[1];
            month = +match[2] - 1;
            day = +match[3];
            if (!match[4]) return new Date(Date.UTC(year, month, day));
            hour = +match[4];
            minute = +match[5];
            second = +match[6];
            if (match[7]) {
                fraction = match[7].slice(0, 3);
                while(fraction.length < 3)fraction += '0';
                fraction *= 1;
            }
            if (match[9]) {
                tz_hour = +match[10];
                tz_minute = +(match[11] || 0);
                delta = (60 * tz_hour + tz_minute) * 60000;
                if ('-' === match[9]) delta = -delta;
            }
            date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
            if (delta) date.setTime(date.getTime() - delta);
            return date;
        }
        function representYamlTimestamp(object) {
            return object.toISOString();
        }
        module.exports = new Type('tag:yaml.org,2002:timestamp', {
            kind: 'scalar',
            resolve: resolveYamlTimestamp,
            construct: constructYamlTimestamp,
            instanceOf: Date,
            represent: representYamlTimestamp
        });
    },
    "../../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const Stream = __webpack_require__("stream");
        const PassThrough = Stream.PassThrough;
        const slice = Array.prototype.slice;
        module.exports = merge2;
        function merge2() {
            const streamsQueue = [];
            const args = slice.call(arguments);
            let merging = false;
            let options = args[args.length - 1];
            if (options && !Array.isArray(options) && null == options.pipe) args.pop();
            else options = {};
            const doEnd = false !== options.end;
            const doPipeError = true === options.pipeError;
            if (null == options.objectMode) options.objectMode = true;
            if (null == options.highWaterMark) options.highWaterMark = 65536;
            const mergedStream = PassThrough(options);
            function addStream() {
                for(let i = 0, len = arguments.length; i < len; i++)streamsQueue.push(pauseStreams(arguments[i], options));
                mergeStream();
                return this;
            }
            function mergeStream() {
                if (merging) return;
                merging = true;
                let streams = streamsQueue.shift();
                if (!streams) {
                    process.nextTick(endStream);
                    return;
                }
                if (!Array.isArray(streams)) streams = [
                    streams
                ];
                let pipesCount = streams.length + 1;
                function next() {
                    if (--pipesCount > 0) return;
                    merging = false;
                    mergeStream();
                }
                function pipe(stream) {
                    function onend() {
                        stream.removeListener('merge2UnpipeEnd', onend);
                        stream.removeListener('end', onend);
                        if (doPipeError) stream.removeListener('error', onerror);
                        next();
                    }
                    function onerror(err) {
                        mergedStream.emit('error', err);
                    }
                    if (stream._readableState.endEmitted) return next();
                    stream.on('merge2UnpipeEnd', onend);
                    stream.on('end', onend);
                    if (doPipeError) stream.on('error', onerror);
                    stream.pipe(mergedStream, {
                        end: false
                    });
                    stream.resume();
                }
                for(let i = 0; i < streams.length; i++)pipe(streams[i]);
                next();
            }
            function endStream() {
                merging = false;
                mergedStream.emit('queueDrain');
                if (doEnd) mergedStream.end();
            }
            mergedStream.setMaxListeners(0);
            mergedStream.add = addStream;
            mergedStream.on('unpipe', function(stream) {
                stream.emit('merge2UnpipeEnd');
            });
            if (args.length) addStream.apply(null, args);
            return mergedStream;
        }
        function pauseStreams(streams, options) {
            if (Array.isArray(streams)) for(let i = 0, len = streams.length; i < len; i++)streams[i] = pauseStreams(streams[i], options);
            else {
                if (!streams._readableState && streams.pipe) streams = streams.pipe(PassThrough(options));
                if (!streams._readableState || !streams.pause || !streams.pipe) throw new Error('Only readable stream can be merged.');
                streams.pause();
            }
            return streams;
        }
    },
    "../../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const util = __webpack_require__("util");
        const braces = __webpack_require__("../../node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js");
        const picomatch = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js");
        const isEmptyString = (v)=>'' === v || './' === v;
        const hasBraces = (v)=>{
            const index = v.indexOf('{');
            return index > -1 && v.indexOf('}', index) > -1;
        };
        const micromatch = (list, patterns, options)=>{
            patterns = [].concat(patterns);
            list = [].concat(list);
            let omit = new Set();
            let keep = new Set();
            let items = new Set();
            let negatives = 0;
            let onResult = (state)=>{
                items.add(state.output);
                if (options && options.onResult) options.onResult(state);
            };
            for(let i = 0; i < patterns.length; i++){
                let isMatch = picomatch(String(patterns[i]), {
                    ...options,
                    onResult
                }, true);
                let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
                if (negated) negatives++;
                for (let item of list){
                    let matched = isMatch(item, true);
                    let match = negated ? !matched.isMatch : matched.isMatch;
                    if (!!match) {
                        if (negated) omit.add(matched.output);
                        else {
                            omit.delete(matched.output);
                            keep.add(matched.output);
                        }
                    }
                }
            }
            let result = negatives === patterns.length ? [
                ...items
            ] : [
                ...keep
            ];
            let matches = result.filter((item)=>!omit.has(item));
            if (options && 0 === matches.length) {
                if (true === options.failglob) throw new Error(`No matches found for "${patterns.join(', ')}"`);
                if (true === options.nonull || true === options.nullglob) return options.unescape ? patterns.map((p)=>p.replace(/\\/g, '')) : patterns;
            }
            return matches;
        };
        micromatch.match = micromatch;
        micromatch.matcher = (pattern, options)=>picomatch(pattern, options);
        micromatch.isMatch = (str, patterns, options)=>picomatch(patterns, options)(str);
        micromatch.any = micromatch.isMatch;
        micromatch.not = (list, patterns, options = {})=>{
            patterns = [].concat(patterns).map(String);
            let result = new Set();
            let items = [];
            let onResult = (state)=>{
                if (options.onResult) options.onResult(state);
                items.push(state.output);
            };
            let matches = new Set(micromatch(list, patterns, {
                ...options,
                onResult
            }));
            for (let item of items)if (!matches.has(item)) result.add(item);
            return [
                ...result
            ];
        };
        micromatch.contains = (str, pattern, options)=>{
            if ('string' != typeof str) throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
            if (Array.isArray(pattern)) return pattern.some((p)=>micromatch.contains(str, p, options));
            if ('string' == typeof pattern) {
                if (isEmptyString(str) || isEmptyString(pattern)) return false;
                if (str.includes(pattern) || str.startsWith('./') && str.slice(2).includes(pattern)) return true;
            }
            return micromatch.isMatch(str, pattern, {
                ...options,
                contains: true
            });
        };
        micromatch.matchKeys = (obj, patterns, options)=>{
            if (!utils.isObject(obj)) throw new TypeError('Expected the first argument to be an object');
            let keys = micromatch(Object.keys(obj), patterns, options);
            let res = {};
            for (let key of keys)res[key] = obj[key];
            return res;
        };
        micromatch.some = (list, patterns, options)=>{
            let items = [].concat(list);
            for (let pattern of [].concat(patterns)){
                let isMatch = picomatch(String(pattern), options);
                if (items.some((item)=>isMatch(item))) return true;
            }
            return false;
        };
        micromatch.every = (list, patterns, options)=>{
            let items = [].concat(list);
            for (let pattern of [].concat(patterns)){
                let isMatch = picomatch(String(pattern), options);
                if (!items.every((item)=>isMatch(item))) return false;
            }
            return true;
        };
        micromatch.all = (str, patterns, options)=>{
            if ('string' != typeof str) throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
            return [].concat(patterns).every((p)=>picomatch(p, options)(str));
        };
        micromatch.capture = (glob, input, options)=>{
            let posix = utils.isWindows(options);
            let regex = picomatch.makeRe(String(glob), {
                ...options,
                capture: true
            });
            let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
            if (match) return match.slice(1).map((v)=>void 0 === v ? '' : v);
        };
        micromatch.makeRe = (...args)=>picomatch.makeRe(...args);
        micromatch.scan = (...args)=>picomatch.scan(...args);
        micromatch.parse = (patterns, options)=>{
            let res = [];
            for (let pattern of [].concat(patterns || []))for (let str of braces(String(pattern), options))res.push(picomatch.parse(str, options));
            return res;
        };
        micromatch.braces = (pattern, options)=>{
            if ('string' != typeof pattern) throw new TypeError('Expected a string');
            if (options && true === options.nobrace || !hasBraces(pattern)) return [
                pattern
            ];
            return braces(pattern, options);
        };
        micromatch.braceExpand = (pattern, options)=>{
            if ('string' != typeof pattern) throw new TypeError('Expected a string');
            return micromatch.braces(pattern, {
                ...options,
                expand: true
            });
        };
        micromatch.hasBraces = hasBraces;
        module.exports = micromatch;
    },
    "../../node_modules/.pnpm/parse-path@7.0.1/node_modules/parse-path/lib/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var protocols = __webpack_require__("../../node_modules/.pnpm/protocols@2.0.2/node_modules/protocols/lib/index.js");
        function parsePath(url) {
            var output = {
                protocols: [],
                protocol: null,
                port: null,
                resource: "",
                host: "",
                user: "",
                password: "",
                pathname: "",
                hash: "",
                search: "",
                href: url,
                query: {},
                parse_failed: false
            };
            try {
                var parsed = new URL(url);
                output.protocols = protocols(parsed);
                output.protocol = output.protocols[0];
                output.port = parsed.port;
                output.resource = parsed.hostname;
                output.host = parsed.host;
                output.user = parsed.username || "";
                output.password = parsed.password || "";
                output.pathname = parsed.pathname;
                output.hash = parsed.hash.slice(1);
                output.search = parsed.search.slice(1);
                output.href = parsed.href;
                output.query = Object.fromEntries(parsed.searchParams);
            } catch (e) {
                output.protocols = [
                    "file"
                ];
                output.protocol = output.protocols[0];
                output.port = "";
                output.resource = "";
                output.user = "";
                output.pathname = "";
                output.hash = "";
                output.search = "";
                output.href = url;
                output.query = {};
                output.parse_failed = true;
            }
            return output;
        }
        module.exports = parsePath;
    },
    "../../node_modules/.pnpm/parse-url@8.1.0/node_modules/parse-url/dist/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var parsePath = __webpack_require__("../../node_modules/.pnpm/parse-path@7.0.1/node_modules/parse-path/lib/index.js");
        function _interopDefaultLegacy(e) {
            return e && 'object' == typeof e && 'default' in e ? e : {
                default: e
            };
        }
        var parsePath__default = /*#__PURE__*/ _interopDefaultLegacy(parsePath);
        const DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';
        const DATA_URL_DEFAULT_CHARSET = 'us-ascii';
        const testParameter = (name, filters)=>filters.some((filter)=>filter instanceof RegExp ? filter.test(name) : filter === name);
        const normalizeDataURL = (urlString, { stripHash })=>{
            const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);
            if (!match) throw new Error(`Invalid URL: ${urlString}`);
            let { type, data, hash } = match.groups;
            const mediaType = type.split(';');
            hash = stripHash ? '' : hash;
            let isBase64 = false;
            if ('base64' === mediaType[mediaType.length - 1]) {
                mediaType.pop();
                isBase64 = true;
            }
            const mimeType = (mediaType.shift() || '').toLowerCase();
            const attributes = mediaType.map((attribute)=>{
                let [key, value1 = ''] = attribute.split('=').map((string)=>string.trim());
                if ('charset' === key) {
                    value1 = value1.toLowerCase();
                    if (value1 === DATA_URL_DEFAULT_CHARSET) return '';
                }
                return `${key}${value1 ? `=${value1}` : ''}`;
            }).filter(Boolean);
            const normalizedMediaType = [
                ...attributes
            ];
            if (isBase64) normalizedMediaType.push('base64');
            if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) normalizedMediaType.unshift(mimeType);
            return `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;
        };
        function normalizeUrl(urlString, options) {
            options = {
                defaultProtocol: 'http:',
                normalizeProtocol: true,
                forceHttp: false,
                forceHttps: false,
                stripAuthentication: true,
                stripHash: false,
                stripTextFragment: true,
                stripWWW: true,
                removeQueryParameters: [
                    /^utm_\w+/i
                ],
                removeTrailingSlash: true,
                removeSingleSlash: true,
                removeDirectoryIndex: false,
                sortQueryParameters: true,
                ...options
            };
            urlString = urlString.trim();
            if (/^data:/i.test(urlString)) return normalizeDataURL(urlString, options);
            if (/^view-source:/i.test(urlString)) throw new Error('`view-source:` is not supported as it is a non-standard protocol');
            const hasRelativeProtocol = urlString.startsWith('//');
            const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);
            if (!isRelativeUrl) urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
            const urlObject = new URL(urlString);
            if (options.forceHttp && options.forceHttps) throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');
            if (options.forceHttp && 'https:' === urlObject.protocol) urlObject.protocol = 'http:';
            if (options.forceHttps && 'http:' === urlObject.protocol) urlObject.protocol = 'https:';
            if (options.stripAuthentication) {
                urlObject.username = '';
                urlObject.password = '';
            }
            if (options.stripHash) urlObject.hash = '';
            else if (options.stripTextFragment) urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');
            if (urlObject.pathname) {
                const protocolRegex = /\b[a-z][a-z\d+\-.]{1,50}:\/\//g;
                let lastIndex = 0;
                let result = '';
                for(;;){
                    const match = protocolRegex.exec(urlObject.pathname);
                    if (!match) break;
                    const protocol = match[0];
                    const protocolAtIndex = match.index;
                    const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);
                    result += intermediate.replace(/\/{2,}/g, '/');
                    result += protocol;
                    lastIndex = protocolAtIndex + protocol.length;
                }
                const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);
                result += remnant.replace(/\/{2,}/g, '/');
                urlObject.pathname = result;
            }
            if (urlObject.pathname) try {
                urlObject.pathname = decodeURI(urlObject.pathname);
            } catch  {}
            if (true === options.removeDirectoryIndex) options.removeDirectoryIndex = [
                /^index\.[a-z]+$/
            ];
            if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {
                let pathComponents = urlObject.pathname.split('/');
                const lastComponent = pathComponents[pathComponents.length - 1];
                if (testParameter(lastComponent, options.removeDirectoryIndex)) {
                    pathComponents = pathComponents.slice(0, -1);
                    urlObject.pathname = pathComponents.slice(1).join('/') + '/';
                }
            }
            if (urlObject.hostname) {
                urlObject.hostname = urlObject.hostname.replace(/\.$/, '');
                if (options.stripWWW && /^www\.(?!www\.)[a-z\-\d]{1,63}\.[a-z.\-\d]{2,63}$/.test(urlObject.hostname)) urlObject.hostname = urlObject.hostname.replace(/^www\./, '');
            }
            if (Array.isArray(options.removeQueryParameters)) {
                for (const key of [
                    ...urlObject.searchParams.keys()
                ])if (testParameter(key, options.removeQueryParameters)) urlObject.searchParams.delete(key);
            }
            if (true === options.removeQueryParameters) urlObject.search = '';
            if (options.sortQueryParameters) {
                urlObject.searchParams.sort();
                try {
                    urlObject.search = decodeURIComponent(urlObject.search);
                } catch  {}
            }
            if (options.removeTrailingSlash) urlObject.pathname = urlObject.pathname.replace(/\/$/, '');
            const oldUrlString = urlString;
            urlString = urlObject.toString();
            if (!options.removeSingleSlash && '/' === urlObject.pathname && !oldUrlString.endsWith('/') && '' === urlObject.hash) urlString = urlString.replace(/\/$/, '');
            if ((options.removeTrailingSlash || '/' === urlObject.pathname) && '' === urlObject.hash && options.removeSingleSlash) urlString = urlString.replace(/\/$/, '');
            if (hasRelativeProtocol && !options.normalizeProtocol) urlString = urlString.replace(/^http:\/\//, '//');
            if (options.stripProtocol) urlString = urlString.replace(/^(?:https?:)?\/\//, '');
            return urlString;
        }
        const parseUrl = (url, normalize = false)=>{
            const GIT_RE = /^(?:([a-z_][a-z0-9_-]{0,31})@|https?:\/\/)([\w\.\-@]+)[\/:]([\~,\.\w,\-,\_,\/]+?(?:\.git|\/)?)$/;
            const throwErr = (msg)=>{
                const err = new Error(msg);
                err.subject_url = url;
                throw err;
            };
            if ("string" != typeof url || !url.trim()) throwErr("Invalid url.");
            if (url.length > parseUrl.MAX_INPUT_LENGTH) throwErr("Input exceeds maximum length. If needed, change the value of parseUrl.MAX_INPUT_LENGTH.");
            if (normalize) {
                if ("object" != typeof normalize) normalize = {
                    stripHash: false
                };
                url = normalizeUrl(url, normalize);
            }
            const parsed = parsePath__default["default"](url);
            if (parsed.parse_failed) {
                const matched = parsed.href.match(GIT_RE);
                if (matched) {
                    parsed.protocols = [
                        "ssh"
                    ];
                    parsed.protocol = "ssh";
                    parsed.resource = matched[2];
                    parsed.host = matched[2];
                    parsed.user = matched[1];
                    parsed.pathname = `/${matched[3]}`;
                    parsed.parse_failed = false;
                } else throwErr("URL parsing failed.");
            }
            return parsed;
        };
        parseUrl.MAX_INPUT_LENGTH = 2048;
        module.exports = parseUrl;
    },
    "../../node_modules/.pnpm/picocolors@1.1.1/node_modules/picocolors/picocolors.js": function(module) {
        let p = process || {}, argv = p.argv || [], env = p.env || {};
        let isColorSupported = !(!!env.NO_COLOR || argv.includes("--no-color")) && (!!env.FORCE_COLOR || argv.includes("--color") || "win32" === p.platform || (p.stdout || {}).isTTY && "dumb" !== env.TERM || !!env.CI);
        let formatter = (open, close, replace = open)=>(input)=>{
                let string = "" + input, index = string.indexOf(close, open.length);
                return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
            };
        let replaceClose = (string, close, replace, index)=>{
            let result = "", cursor = 0;
            do {
                result += string.substring(cursor, index) + replace;
                cursor = index + close.length;
                index = string.indexOf(close, cursor);
            }while (~index);
            return result + string.substring(cursor);
        };
        let createColors = (enabled = isColorSupported)=>{
            let f = enabled ? formatter : ()=>String;
            return {
                isColorSupported: enabled,
                reset: f("\x1b[0m", "\x1b[0m"),
                bold: f("\x1b[1m", "\x1b[22m", "\x1b[22m\x1b[1m"),
                dim: f("\x1b[2m", "\x1b[22m", "\x1b[22m\x1b[2m"),
                italic: f("\x1b[3m", "\x1b[23m"),
                underline: f("\x1b[4m", "\x1b[24m"),
                inverse: f("\x1b[7m", "\x1b[27m"),
                hidden: f("\x1b[8m", "\x1b[28m"),
                strikethrough: f("\x1b[9m", "\x1b[29m"),
                black: f("\x1b[30m", "\x1b[39m"),
                red: f("\x1b[31m", "\x1b[39m"),
                green: f("\x1b[32m", "\x1b[39m"),
                yellow: f("\x1b[33m", "\x1b[39m"),
                blue: f("\x1b[34m", "\x1b[39m"),
                magenta: f("\x1b[35m", "\x1b[39m"),
                cyan: f("\x1b[36m", "\x1b[39m"),
                white: f("\x1b[37m", "\x1b[39m"),
                gray: f("\x1b[90m", "\x1b[39m"),
                bgBlack: f("\x1b[40m", "\x1b[49m"),
                bgRed: f("\x1b[41m", "\x1b[49m"),
                bgGreen: f("\x1b[42m", "\x1b[49m"),
                bgYellow: f("\x1b[43m", "\x1b[49m"),
                bgBlue: f("\x1b[44m", "\x1b[49m"),
                bgMagenta: f("\x1b[45m", "\x1b[49m"),
                bgCyan: f("\x1b[46m", "\x1b[49m"),
                bgWhite: f("\x1b[47m", "\x1b[49m"),
                blackBright: f("\x1b[90m", "\x1b[39m"),
                redBright: f("\x1b[91m", "\x1b[39m"),
                greenBright: f("\x1b[92m", "\x1b[39m"),
                yellowBright: f("\x1b[93m", "\x1b[39m"),
                blueBright: f("\x1b[94m", "\x1b[39m"),
                magentaBright: f("\x1b[95m", "\x1b[39m"),
                cyanBright: f("\x1b[96m", "\x1b[39m"),
                whiteBright: f("\x1b[97m", "\x1b[39m"),
                bgBlackBright: f("\x1b[100m", "\x1b[49m"),
                bgRedBright: f("\x1b[101m", "\x1b[49m"),
                bgGreenBright: f("\x1b[102m", "\x1b[49m"),
                bgYellowBright: f("\x1b[103m", "\x1b[49m"),
                bgBlueBright: f("\x1b[104m", "\x1b[49m"),
                bgMagentaBright: f("\x1b[105m", "\x1b[49m"),
                bgCyanBright: f("\x1b[106m", "\x1b[49m"),
                bgWhiteBright: f("\x1b[107m", "\x1b[49m")
            };
        };
        module.exports = createColors();
        module.exports.createColors = createColors;
    },
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js");
    },
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const path = __webpack_require__("path");
        const WIN_SLASH = '\\\\/';
        const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
        const DOT_LITERAL = '\\.';
        const PLUS_LITERAL = '\\+';
        const QMARK_LITERAL = '\\?';
        const SLASH_LITERAL = '\\/';
        const ONE_CHAR = '(?=.)';
        const QMARK = '[^/]';
        const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
        const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
        const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
        const NO_DOT = `(?!${DOT_LITERAL})`;
        const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
        const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
        const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
        const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
        const STAR = `${QMARK}*?`;
        const POSIX_CHARS = {
            DOT_LITERAL,
            PLUS_LITERAL,
            QMARK_LITERAL,
            SLASH_LITERAL,
            ONE_CHAR,
            QMARK,
            END_ANCHOR,
            DOTS_SLASH,
            NO_DOT,
            NO_DOTS,
            NO_DOT_SLASH,
            NO_DOTS_SLASH,
            QMARK_NO_DOT,
            STAR,
            START_ANCHOR
        };
        const WINDOWS_CHARS = {
            ...POSIX_CHARS,
            SLASH_LITERAL: `[${WIN_SLASH}]`,
            QMARK: WIN_NO_SLASH,
            STAR: `${WIN_NO_SLASH}*?`,
            DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
            NO_DOT: `(?!${DOT_LITERAL})`,
            NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
            NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
            NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
            QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
            START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
            END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
        };
        const POSIX_REGEX_SOURCE = {
            alnum: 'a-zA-Z0-9',
            alpha: 'a-zA-Z',
            ascii: '\\x00-\\x7F',
            blank: ' \\t',
            cntrl: '\\x00-\\x1F\\x7F',
            digit: '0-9',
            graph: '\\x21-\\x7E',
            lower: 'a-z',
            print: '\\x20-\\x7E ',
            punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
            space: ' \\t\\r\\n\\v\\f',
            upper: 'A-Z',
            word: 'A-Za-z0-9_',
            xdigit: 'A-Fa-f0-9'
        };
        module.exports = {
            MAX_LENGTH: 65536,
            POSIX_REGEX_SOURCE,
            REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
            REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
            REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
            REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
            REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
            REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
            REPLACEMENTS: {
                '***': '*',
                '**/**': '**',
                '**/**/**': '**'
            },
            CHAR_0: 48,
            CHAR_9: 57,
            CHAR_UPPERCASE_A: 65,
            CHAR_LOWERCASE_A: 97,
            CHAR_UPPERCASE_Z: 90,
            CHAR_LOWERCASE_Z: 122,
            CHAR_LEFT_PARENTHESES: 40,
            CHAR_RIGHT_PARENTHESES: 41,
            CHAR_ASTERISK: 42,
            CHAR_AMPERSAND: 38,
            CHAR_AT: 64,
            CHAR_BACKWARD_SLASH: 92,
            CHAR_CARRIAGE_RETURN: 13,
            CHAR_CIRCUMFLEX_ACCENT: 94,
            CHAR_COLON: 58,
            CHAR_COMMA: 44,
            CHAR_DOT: 46,
            CHAR_DOUBLE_QUOTE: 34,
            CHAR_EQUAL: 61,
            CHAR_EXCLAMATION_MARK: 33,
            CHAR_FORM_FEED: 12,
            CHAR_FORWARD_SLASH: 47,
            CHAR_GRAVE_ACCENT: 96,
            CHAR_HASH: 35,
            CHAR_HYPHEN_MINUS: 45,
            CHAR_LEFT_ANGLE_BRACKET: 60,
            CHAR_LEFT_CURLY_BRACE: 123,
            CHAR_LEFT_SQUARE_BRACKET: 91,
            CHAR_LINE_FEED: 10,
            CHAR_NO_BREAK_SPACE: 160,
            CHAR_PERCENT: 37,
            CHAR_PLUS: 43,
            CHAR_QUESTION_MARK: 63,
            CHAR_RIGHT_ANGLE_BRACKET: 62,
            CHAR_RIGHT_CURLY_BRACE: 125,
            CHAR_RIGHT_SQUARE_BRACKET: 93,
            CHAR_SEMICOLON: 59,
            CHAR_SINGLE_QUOTE: 39,
            CHAR_SPACE: 32,
            CHAR_TAB: 9,
            CHAR_UNDERSCORE: 95,
            CHAR_VERTICAL_LINE: 124,
            CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
            SEP: path.sep,
            extglobChars (chars) {
                return {
                    '!': {
                        type: 'negate',
                        open: '(?:(?!(?:',
                        close: `))${chars.STAR})`
                    },
                    '?': {
                        type: 'qmark',
                        open: '(?:',
                        close: ')?'
                    },
                    '+': {
                        type: 'plus',
                        open: '(?:',
                        close: ')+'
                    },
                    '*': {
                        type: 'star',
                        open: '(?:',
                        close: ')*'
                    },
                    '@': {
                        type: 'at',
                        open: '(?:',
                        close: ')'
                    }
                };
            },
            globChars (win32) {
                return true === win32 ? WINDOWS_CHARS : POSIX_CHARS;
            }
        };
    },
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const constants = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js");
        const { MAX_LENGTH, POSIX_REGEX_SOURCE, REGEX_NON_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_BACKREF, REPLACEMENTS } = constants;
        const expandRange = (args, options)=>{
            if ('function' == typeof options.expandRange) return options.expandRange(...args, options);
            args.sort();
            const value1 = `[${args.join('-')}]`;
            try {
                new RegExp(value1);
            } catch (ex) {
                return args.map((v)=>utils.escapeRegex(v)).join('..');
            }
            return value1;
        };
        const syntaxError = (type, char)=>`Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
        const parse = (input, options)=>{
            if ('string' != typeof input) throw new TypeError('Expected a string');
            input = REPLACEMENTS[input] || input;
            const opts = {
                ...options
            };
            const max = 'number' == typeof opts.maxLength ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
            let len = input.length;
            if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
            const bos = {
                type: 'bos',
                value: '',
                output: opts.prepend || ''
            };
            const tokens = [
                bos
            ];
            const capture = opts.capture ? '' : '?:';
            const win32 = utils.isWindows(options);
            const PLATFORM_CHARS = constants.globChars(win32);
            const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
            const { DOT_LITERAL, PLUS_LITERAL, SLASH_LITERAL, ONE_CHAR, DOTS_SLASH, NO_DOT, NO_DOT_SLASH, NO_DOTS_SLASH, QMARK, QMARK_NO_DOT, STAR, START_ANCHOR } = PLATFORM_CHARS;
            const globstar = (opts)=>`(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
            const nodot = opts.dot ? '' : NO_DOT;
            const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
            let star = true === opts.bash ? globstar(opts) : STAR;
            if (opts.capture) star = `(${star})`;
            if ('boolean' == typeof opts.noext) opts.noextglob = opts.noext;
            const state = {
                input,
                index: -1,
                start: 0,
                dot: true === opts.dot,
                consumed: '',
                output: '',
                prefix: '',
                backtrack: false,
                negated: false,
                brackets: 0,
                braces: 0,
                parens: 0,
                quotes: 0,
                globstar: false,
                tokens
            };
            input = utils.removePrefix(input, state);
            len = input.length;
            const extglobs = [];
            const braces = [];
            const stack = [];
            let prev = bos;
            let value1;
            const eos = ()=>state.index === len - 1;
            const peek = state.peek = (n = 1)=>input[state.index + n];
            const advance = state.advance = ()=>input[++state.index] || '';
            const remaining = ()=>input.slice(state.index + 1);
            const consume = (value1 = '', num = 0)=>{
                state.consumed += value1;
                state.index += num;
            };
            const append = (token)=>{
                state.output += null != token.output ? token.output : token.value;
                consume(token.value);
            };
            const negate = ()=>{
                let count = 1;
                while('!' === peek() && ('(' !== peek(2) || '?' === peek(3))){
                    advance();
                    state.start++;
                    count++;
                }
                if (count % 2 === 0) return false;
                state.negated = true;
                state.start++;
                return true;
            };
            const increment = (type)=>{
                state[type]++;
                stack.push(type);
            };
            const decrement = (type)=>{
                state[type]--;
                stack.pop();
            };
            const push = (tok)=>{
                if ('globstar' === prev.type) {
                    const isBrace = state.braces > 0 && ('comma' === tok.type || 'brace' === tok.type);
                    const isExtglob = true === tok.extglob || extglobs.length && ('pipe' === tok.type || 'paren' === tok.type);
                    if ('slash' !== tok.type && 'paren' !== tok.type && !isBrace && !isExtglob) {
                        state.output = state.output.slice(0, -prev.output.length);
                        prev.type = 'star';
                        prev.value = '*';
                        prev.output = star;
                        state.output += prev.output;
                    }
                }
                if (extglobs.length && 'paren' !== tok.type) extglobs[extglobs.length - 1].inner += tok.value;
                if (tok.value || tok.output) append(tok);
                if (prev && 'text' === prev.type && 'text' === tok.type) {
                    prev.value += tok.value;
                    prev.output = (prev.output || '') + tok.value;
                    return;
                }
                tok.prev = prev;
                tokens.push(tok);
                prev = tok;
            };
            const extglobOpen = (type, value1)=>{
                const token = {
                    ...EXTGLOB_CHARS[value1],
                    conditions: 1,
                    inner: ''
                };
                token.prev = prev;
                token.parens = state.parens;
                token.output = state.output;
                const output = (opts.capture ? '(' : '') + token.open;
                increment('parens');
                push({
                    type,
                    value: value1,
                    output: state.output ? '' : ONE_CHAR
                });
                push({
                    type: 'paren',
                    extglob: true,
                    value: advance(),
                    output
                });
                extglobs.push(token);
            };
            const extglobClose = (token)=>{
                let output = token.close + (opts.capture ? ')' : '');
                let rest;
                if ('negate' === token.type) {
                    let extglobStar = star;
                    if (token.inner && token.inner.length > 1 && token.inner.includes('/')) extglobStar = globstar(opts);
                    if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) output = token.close = `)$))${extglobStar}`;
                    if (token.inner.includes('*') && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
                        const expression = parse(rest, {
                            ...options,
                            fastpaths: false
                        }).output;
                        output = token.close = `)${expression})${extglobStar})`;
                    }
                    if ('bos' === token.prev.type) state.negatedExtglob = true;
                }
                push({
                    type: 'paren',
                    extglob: true,
                    value: value1,
                    output
                });
                decrement('parens');
            };
            if (false !== opts.fastpaths && !/(^[*!]|[/()[\]{}"])/.test(input)) {
                let backslashes = false;
                let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index)=>{
                    if ('\\' === first) {
                        backslashes = true;
                        return m;
                    }
                    if ('?' === first) {
                        if (esc) return esc + first + (rest ? QMARK.repeat(rest.length) : '');
                        if (0 === index) return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
                        return QMARK.repeat(chars.length);
                    }
                    if ('.' === first) return DOT_LITERAL.repeat(chars.length);
                    if ('*' === first) {
                        if (esc) return esc + first + (rest ? star : '');
                        return star;
                    }
                    return esc ? m : `\\${m}`;
                });
                if (true === backslashes) output = true === opts.unescape ? output.replace(/\\/g, '') : output.replace(/\\+/g, (m)=>m.length % 2 === 0 ? '\\\\' : m ? '\\' : '');
                if (output === input && true === opts.contains) {
                    state.output = input;
                    return state;
                }
                state.output = utils.wrapOutput(output, state, options);
                return state;
            }
            while(!eos()){
                value1 = advance();
                if ('\u0000' === value1) continue;
                if ('\\' === value1) {
                    const next = peek();
                    if ('/' === next && true !== opts.bash) continue;
                    if ('.' === next || ';' === next) continue;
                    if (!next) {
                        value1 += '\\';
                        push({
                            type: 'text',
                            value: value1
                        });
                        continue;
                    }
                    const match = /^\\+/.exec(remaining());
                    let slashes = 0;
                    if (match && match[0].length > 2) {
                        slashes = match[0].length;
                        state.index += slashes;
                        if (slashes % 2 !== 0) value1 += '\\';
                    }
                    if (true === opts.unescape) value1 = advance();
                    else value1 += advance();
                    if (0 === state.brackets) {
                        push({
                            type: 'text',
                            value: value1
                        });
                        continue;
                    }
                }
                if (state.brackets > 0 && (']' !== value1 || '[' === prev.value || '[^' === prev.value)) {
                    if (false !== opts.posix && ':' === value1) {
                        const inner = prev.value.slice(1);
                        if (inner.includes('[')) {
                            prev.posix = true;
                            if (inner.includes(':')) {
                                const idx = prev.value.lastIndexOf('[');
                                const pre = prev.value.slice(0, idx);
                                const rest = prev.value.slice(idx + 2);
                                const posix = POSIX_REGEX_SOURCE[rest];
                                if (posix) {
                                    prev.value = pre + posix;
                                    state.backtrack = true;
                                    advance();
                                    if (!bos.output && 1 === tokens.indexOf(prev)) bos.output = ONE_CHAR;
                                    continue;
                                }
                            }
                        }
                    }
                    if ('[' === value1 && ':' !== peek() || '-' === value1 && ']' === peek()) value1 = `\\${value1}`;
                    if (']' === value1 && ('[' === prev.value || '[^' === prev.value)) value1 = `\\${value1}`;
                    if (true === opts.posix && '!' === value1 && '[' === prev.value) value1 = '^';
                    prev.value += value1;
                    append({
                        value: value1
                    });
                    continue;
                }
                if (1 === state.quotes && '"' !== value1) {
                    value1 = utils.escapeRegex(value1);
                    prev.value += value1;
                    append({
                        value: value1
                    });
                    continue;
                }
                if ('"' === value1) {
                    state.quotes = 1 === state.quotes ? 0 : 1;
                    if (true === opts.keepQuotes) push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if ('(' === value1) {
                    increment('parens');
                    push({
                        type: 'paren',
                        value: value1
                    });
                    continue;
                }
                if (')' === value1) {
                    if (0 === state.parens && true === opts.strictBrackets) throw new SyntaxError(syntaxError('opening', '('));
                    const extglob = extglobs[extglobs.length - 1];
                    if (extglob && state.parens === extglob.parens + 1) {
                        extglobClose(extglobs.pop());
                        continue;
                    }
                    push({
                        type: 'paren',
                        value: value1,
                        output: state.parens ? ')' : '\\)'
                    });
                    decrement('parens');
                    continue;
                }
                if ('[' === value1) {
                    if (true !== opts.nobracket && remaining().includes(']')) increment('brackets');
                    else {
                        if (true !== opts.nobracket && true === opts.strictBrackets) throw new SyntaxError(syntaxError('closing', ']'));
                        value1 = `\\${value1}`;
                    }
                    push({
                        type: 'bracket',
                        value: value1
                    });
                    continue;
                }
                if (']' === value1) {
                    if (true === opts.nobracket || prev && 'bracket' === prev.type && 1 === prev.value.length) {
                        push({
                            type: 'text',
                            value: value1,
                            output: `\\${value1}`
                        });
                        continue;
                    }
                    if (0 === state.brackets) {
                        if (true === opts.strictBrackets) throw new SyntaxError(syntaxError('opening', '['));
                        push({
                            type: 'text',
                            value: value1,
                            output: `\\${value1}`
                        });
                        continue;
                    }
                    decrement('brackets');
                    const prevValue = prev.value.slice(1);
                    if (true !== prev.posix && '^' === prevValue[0] && !prevValue.includes('/')) value1 = `/${value1}`;
                    prev.value += value1;
                    append({
                        value: value1
                    });
                    if (false === opts.literalBrackets || utils.hasRegexChars(prevValue)) continue;
                    const escaped = utils.escapeRegex(prev.value);
                    state.output = state.output.slice(0, -prev.value.length);
                    if (true === opts.literalBrackets) {
                        state.output += escaped;
                        prev.value = escaped;
                        continue;
                    }
                    prev.value = `(${capture}${escaped}|${prev.value})`;
                    state.output += prev.value;
                    continue;
                }
                if ('{' === value1 && true !== opts.nobrace) {
                    increment('braces');
                    const open = {
                        type: 'brace',
                        value: value1,
                        output: '(',
                        outputIndex: state.output.length,
                        tokensIndex: state.tokens.length
                    };
                    braces.push(open);
                    push(open);
                    continue;
                }
                if ('}' === value1) {
                    const brace = braces[braces.length - 1];
                    if (true === opts.nobrace || !brace) {
                        push({
                            type: 'text',
                            value: value1,
                            output: value1
                        });
                        continue;
                    }
                    let output = ')';
                    if (true === brace.dots) {
                        const arr = tokens.slice();
                        const range = [];
                        for(let i = arr.length - 1; i >= 0; i--){
                            tokens.pop();
                            if ('brace' === arr[i].type) break;
                            if ('dots' !== arr[i].type) range.unshift(arr[i].value);
                        }
                        output = expandRange(range, opts);
                        state.backtrack = true;
                    }
                    if (true !== brace.comma && true !== brace.dots) {
                        const out = state.output.slice(0, brace.outputIndex);
                        const toks = state.tokens.slice(brace.tokensIndex);
                        brace.value = brace.output = '\\{';
                        value1 = output = '\\}';
                        state.output = out;
                        for (const t of toks)state.output += t.output || t.value;
                    }
                    push({
                        type: 'brace',
                        value: value1,
                        output
                    });
                    decrement('braces');
                    braces.pop();
                    continue;
                }
                if ('|' === value1) {
                    if (extglobs.length > 0) extglobs[extglobs.length - 1].conditions++;
                    push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if (',' === value1) {
                    let output = value1;
                    const brace = braces[braces.length - 1];
                    if (brace && 'braces' === stack[stack.length - 1]) {
                        brace.comma = true;
                        output = '|';
                    }
                    push({
                        type: 'comma',
                        value: value1,
                        output
                    });
                    continue;
                }
                if ('/' === value1) {
                    if ('dot' === prev.type && state.index === state.start + 1) {
                        state.start = state.index + 1;
                        state.consumed = '';
                        state.output = '';
                        tokens.pop();
                        prev = bos;
                        continue;
                    }
                    push({
                        type: 'slash',
                        value: value1,
                        output: SLASH_LITERAL
                    });
                    continue;
                }
                if ('.' === value1) {
                    if (state.braces > 0 && 'dot' === prev.type) {
                        if ('.' === prev.value) prev.output = DOT_LITERAL;
                        const brace = braces[braces.length - 1];
                        prev.type = 'dots';
                        prev.output += value1;
                        prev.value += value1;
                        brace.dots = true;
                        continue;
                    }
                    if (state.braces + state.parens === 0 && 'bos' !== prev.type && 'slash' !== prev.type) {
                        push({
                            type: 'text',
                            value: value1,
                            output: DOT_LITERAL
                        });
                        continue;
                    }
                    push({
                        type: 'dot',
                        value: value1,
                        output: DOT_LITERAL
                    });
                    continue;
                }
                if ('?' === value1) {
                    const isGroup = prev && '(' === prev.value;
                    if (!isGroup && true !== opts.noextglob && '(' === peek() && '?' !== peek(2)) {
                        extglobOpen('qmark', value1);
                        continue;
                    }
                    if (prev && 'paren' === prev.type) {
                        const next = peek();
                        let output = value1;
                        if ('<' === next && !utils.supportsLookbehinds()) throw new Error('Node.js v10 or higher is required for regex lookbehinds');
                        if ('(' === prev.value && !/[!=<:]/.test(next) || '<' === next && !/<([!=]|\w+>)/.test(remaining())) output = `\\${value1}`;
                        push({
                            type: 'text',
                            value: value1,
                            output
                        });
                        continue;
                    }
                    if (true !== opts.dot && ('slash' === prev.type || 'bos' === prev.type)) {
                        push({
                            type: 'qmark',
                            value: value1,
                            output: QMARK_NO_DOT
                        });
                        continue;
                    }
                    push({
                        type: 'qmark',
                        value: value1,
                        output: QMARK
                    });
                    continue;
                }
                if ('!' === value1) {
                    if (true !== opts.noextglob && '(' === peek()) {
                        if ('?' !== peek(2) || !/[!=<:]/.test(peek(3))) {
                            extglobOpen('negate', value1);
                            continue;
                        }
                    }
                    if (true !== opts.nonegate && 0 === state.index) {
                        negate();
                        continue;
                    }
                }
                if ('+' === value1) {
                    if (true !== opts.noextglob && '(' === peek() && '?' !== peek(2)) {
                        extglobOpen('plus', value1);
                        continue;
                    }
                    if (prev && '(' === prev.value || false === opts.regex) {
                        push({
                            type: 'plus',
                            value: value1,
                            output: PLUS_LITERAL
                        });
                        continue;
                    }
                    if (prev && ('bracket' === prev.type || 'paren' === prev.type || 'brace' === prev.type) || state.parens > 0) {
                        push({
                            type: 'plus',
                            value: value1
                        });
                        continue;
                    }
                    push({
                        type: 'plus',
                        value: PLUS_LITERAL
                    });
                    continue;
                }
                if ('@' === value1) {
                    if (true !== opts.noextglob && '(' === peek() && '?' !== peek(2)) {
                        push({
                            type: 'at',
                            extglob: true,
                            value: value1,
                            output: ''
                        });
                        continue;
                    }
                    push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if ('*' !== value1) {
                    if ('$' === value1 || '^' === value1) value1 = `\\${value1}`;
                    const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
                    if (match) {
                        value1 += match[0];
                        state.index += match[0].length;
                    }
                    push({
                        type: 'text',
                        value: value1
                    });
                    continue;
                }
                if (prev && ('globstar' === prev.type || true === prev.star)) {
                    prev.type = 'star';
                    prev.star = true;
                    prev.value += value1;
                    prev.output = star;
                    state.backtrack = true;
                    state.globstar = true;
                    consume(value1);
                    continue;
                }
                let rest = remaining();
                if (true !== opts.noextglob && /^\([^?]/.test(rest)) {
                    extglobOpen('star', value1);
                    continue;
                }
                if ('star' === prev.type) {
                    if (true === opts.noglobstar) {
                        consume(value1);
                        continue;
                    }
                    const prior = prev.prev;
                    const before = prior.prev;
                    const isStart = 'slash' === prior.type || 'bos' === prior.type;
                    const afterStar = before && ('star' === before.type || 'globstar' === before.type);
                    if (true === opts.bash && (!isStart || rest[0] && '/' !== rest[0])) {
                        push({
                            type: 'star',
                            value: value1,
                            output: ''
                        });
                        continue;
                    }
                    const isBrace = state.braces > 0 && ('comma' === prior.type || 'brace' === prior.type);
                    const isExtglob = extglobs.length && ('pipe' === prior.type || 'paren' === prior.type);
                    if (!isStart && 'paren' !== prior.type && !isBrace && !isExtglob) {
                        push({
                            type: 'star',
                            value: value1,
                            output: ''
                        });
                        continue;
                    }
                    while('/**' === rest.slice(0, 3)){
                        const after = input[state.index + 4];
                        if (after && '/' !== after) break;
                        rest = rest.slice(3);
                        consume('/**', 3);
                    }
                    if ('bos' === prior.type && eos()) {
                        prev.type = 'globstar';
                        prev.value += value1;
                        prev.output = globstar(opts);
                        state.output = prev.output;
                        state.globstar = true;
                        consume(value1);
                        continue;
                    }
                    if ('slash' === prior.type && 'bos' !== prior.prev.type && !afterStar && eos()) {
                        state.output = state.output.slice(0, -(prior.output + prev.output).length);
                        prior.output = `(?:${prior.output}`;
                        prev.type = 'globstar';
                        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');
                        prev.value += value1;
                        state.globstar = true;
                        state.output += prior.output + prev.output;
                        consume(value1);
                        continue;
                    }
                    if ('slash' === prior.type && 'bos' !== prior.prev.type && '/' === rest[0]) {
                        const end = void 0 !== rest[1] ? '|$' : '';
                        state.output = state.output.slice(0, -(prior.output + prev.output).length);
                        prior.output = `(?:${prior.output}`;
                        prev.type = 'globstar';
                        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
                        prev.value += value1;
                        state.output += prior.output + prev.output;
                        state.globstar = true;
                        consume(value1 + advance());
                        push({
                            type: 'slash',
                            value: '/',
                            output: ''
                        });
                        continue;
                    }
                    if ('bos' === prior.type && '/' === rest[0]) {
                        prev.type = 'globstar';
                        prev.value += value1;
                        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
                        state.output = prev.output;
                        state.globstar = true;
                        consume(value1 + advance());
                        push({
                            type: 'slash',
                            value: '/',
                            output: ''
                        });
                        continue;
                    }
                    state.output = state.output.slice(0, -prev.output.length);
                    prev.type = 'globstar';
                    prev.output = globstar(opts);
                    prev.value += value1;
                    state.output += prev.output;
                    state.globstar = true;
                    consume(value1);
                    continue;
                }
                const token = {
                    type: 'star',
                    value: value1,
                    output: star
                };
                if (true === opts.bash) {
                    token.output = '.*?';
                    if ('bos' === prev.type || 'slash' === prev.type) token.output = nodot + token.output;
                    push(token);
                    continue;
                }
                if (prev && ('bracket' === prev.type || 'paren' === prev.type) && true === opts.regex) {
                    token.output = value1;
                    push(token);
                    continue;
                }
                if (state.index === state.start || 'slash' === prev.type || 'dot' === prev.type) {
                    if ('dot' === prev.type) {
                        state.output += NO_DOT_SLASH;
                        prev.output += NO_DOT_SLASH;
                    } else if (true === opts.dot) {
                        state.output += NO_DOTS_SLASH;
                        prev.output += NO_DOTS_SLASH;
                    } else {
                        state.output += nodot;
                        prev.output += nodot;
                    }
                    if ('*' !== peek()) {
                        state.output += ONE_CHAR;
                        prev.output += ONE_CHAR;
                    }
                }
                push(token);
            }
            while(state.brackets > 0){
                if (true === opts.strictBrackets) throw new SyntaxError(syntaxError('closing', ']'));
                state.output = utils.escapeLast(state.output, '[');
                decrement('brackets');
            }
            while(state.parens > 0){
                if (true === opts.strictBrackets) throw new SyntaxError(syntaxError('closing', ')'));
                state.output = utils.escapeLast(state.output, '(');
                decrement('parens');
            }
            while(state.braces > 0){
                if (true === opts.strictBrackets) throw new SyntaxError(syntaxError('closing', '}'));
                state.output = utils.escapeLast(state.output, '{');
                decrement('braces');
            }
            if (true !== opts.strictSlashes && ('star' === prev.type || 'bracket' === prev.type)) push({
                type: 'maybe_slash',
                value: '',
                output: `${SLASH_LITERAL}?`
            });
            if (true === state.backtrack) {
                state.output = '';
                for (const token of state.tokens){
                    state.output += null != token.output ? token.output : token.value;
                    if (token.suffix) state.output += token.suffix;
                }
            }
            return state;
        };
        parse.fastpaths = (input, options)=>{
            const opts = {
                ...options
            };
            const max = 'number' == typeof opts.maxLength ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
            const len = input.length;
            if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
            input = REPLACEMENTS[input] || input;
            const win32 = utils.isWindows(options);
            const { DOT_LITERAL, SLASH_LITERAL, ONE_CHAR, DOTS_SLASH, NO_DOT, NO_DOTS, NO_DOTS_SLASH, STAR, START_ANCHOR } = constants.globChars(win32);
            const nodot = opts.dot ? NO_DOTS : NO_DOT;
            const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
            const capture = opts.capture ? '' : '?:';
            const state = {
                negated: false,
                prefix: ''
            };
            let star = true === opts.bash ? '.*?' : STAR;
            if (opts.capture) star = `(${star})`;
            const globstar = (opts)=>{
                if (true === opts.noglobstar) return star;
                return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
            };
            const create = (str)=>{
                switch(str){
                    case '*':
                        return `${nodot}${ONE_CHAR}${star}`;
                    case '.*':
                        return `${DOT_LITERAL}${ONE_CHAR}${star}`;
                    case '*.*':
                        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
                    case '*/*':
                        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
                    case '**':
                        return nodot + globstar(opts);
                    case '**/*':
                        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
                    case '**/*.*':
                        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
                    case '**/.*':
                        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
                    default:
                        {
                            const match = /^(.*?)\.(\w+)$/.exec(str);
                            if (!match) return;
                            const source = create(match[1]);
                            if (!source) return;
                            return source + DOT_LITERAL + match[2];
                        }
                }
            };
            const output = utils.removePrefix(input, state);
            let source = create(output);
            if (source && true !== opts.strictSlashes) source += `${SLASH_LITERAL}?`;
            return source;
        };
        module.exports = parse;
    },
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const path = __webpack_require__("path");
        const scan = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js");
        const parse = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js");
        const utils = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js");
        const constants = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js");
        const isObject = (val)=>val && 'object' == typeof val && !Array.isArray(val);
        const picomatch = (glob, options, returnState = false)=>{
            if (Array.isArray(glob)) {
                const fns = glob.map((input)=>picomatch(input, options, returnState));
                const arrayMatcher = (str)=>{
                    for (const isMatch of fns){
                        const state = isMatch(str);
                        if (state) return state;
                    }
                    return false;
                };
                return arrayMatcher;
            }
            const isState = isObject(glob) && glob.tokens && glob.input;
            if ('' === glob || 'string' != typeof glob && !isState) throw new TypeError('Expected pattern to be a non-empty string');
            const opts = options || {};
            const posix = utils.isWindows(options);
            const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
            const state = regex.state;
            delete regex.state;
            let isIgnored = ()=>false;
            if (opts.ignore) {
                const ignoreOpts = {
                    ...options,
                    ignore: null,
                    onMatch: null,
                    onResult: null
                };
                isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
            }
            const matcher = (input, returnObject = false)=>{
                const { isMatch, match, output } = picomatch.test(input, regex, options, {
                    glob,
                    posix
                });
                const result = {
                    glob,
                    state,
                    regex,
                    posix,
                    input,
                    output,
                    match,
                    isMatch
                };
                if ('function' == typeof opts.onResult) opts.onResult(result);
                if (false === isMatch) {
                    result.isMatch = false;
                    return returnObject ? result : false;
                }
                if (isIgnored(input)) {
                    if ('function' == typeof opts.onIgnore) opts.onIgnore(result);
                    result.isMatch = false;
                    return returnObject ? result : false;
                }
                if ('function' == typeof opts.onMatch) opts.onMatch(result);
                return returnObject ? result : true;
            };
            if (returnState) matcher.state = state;
            return matcher;
        };
        picomatch.test = (input, regex, options, { glob, posix } = {})=>{
            if ('string' != typeof input) throw new TypeError('Expected input to be a string');
            if ('' === input) return {
                isMatch: false,
                output: ''
            };
            const opts = options || {};
            const format = opts.format || (posix ? utils.toPosixSlashes : null);
            let match = input === glob;
            let output = match && format ? format(input) : input;
            if (false === match) {
                output = format ? format(input) : input;
                match = output === glob;
            }
            if (false === match || true === opts.capture) match = true === opts.matchBase || true === opts.basename ? picomatch.matchBase(input, regex, options, posix) : regex.exec(output);
            return {
                isMatch: Boolean(match),
                match,
                output
            };
        };
        picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options))=>{
            const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
            return regex.test(path.basename(input));
        };
        picomatch.isMatch = (str, patterns, options)=>picomatch(patterns, options)(str);
        picomatch.parse = (pattern, options)=>{
            if (Array.isArray(pattern)) return pattern.map((p)=>picomatch.parse(p, options));
            return parse(pattern, {
                ...options,
                fastpaths: false
            });
        };
        picomatch.scan = (input, options)=>scan(input, options);
        picomatch.compileRe = (state, options, returnOutput = false, returnState = false)=>{
            if (true === returnOutput) return state.output;
            const opts = options || {};
            const prepend = opts.contains ? '' : '^';
            const append = opts.contains ? '' : '$';
            let source = `${prepend}(?:${state.output})${append}`;
            if (state && true === state.negated) source = `^(?!${source}).*$`;
            const regex = picomatch.toRegex(source, options);
            if (true === returnState) regex.state = state;
            return regex;
        };
        picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false)=>{
            if (!input || 'string' != typeof input) throw new TypeError('Expected a non-empty string');
            let parsed = {
                negated: false,
                fastpaths: true
            };
            if (false !== options.fastpaths && ('.' === input[0] || '*' === input[0])) parsed.output = parse.fastpaths(input, options);
            if (!parsed.output) parsed = parse(input, options);
            return picomatch.compileRe(parsed, options, returnOutput, returnState);
        };
        picomatch.toRegex = (source, options)=>{
            try {
                const opts = options || {};
                return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
            } catch (err) {
                if (options && true === options.debug) throw err;
                return /$^/;
            }
        };
        picomatch.constants = constants;
        module.exports = picomatch;
    },
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const utils = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js");
        const { CHAR_ASTERISK, CHAR_AT, CHAR_BACKWARD_SLASH, CHAR_COMMA, CHAR_DOT, CHAR_EXCLAMATION_MARK, CHAR_FORWARD_SLASH, CHAR_LEFT_CURLY_BRACE, CHAR_LEFT_PARENTHESES, CHAR_LEFT_SQUARE_BRACKET, CHAR_PLUS, CHAR_QUESTION_MARK, CHAR_RIGHT_CURLY_BRACE, CHAR_RIGHT_PARENTHESES, CHAR_RIGHT_SQUARE_BRACKET } = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js");
        const isPathSeparator = (code)=>code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
        const depth = (token)=>{
            if (true !== token.isPrefix) token.depth = token.isGlobstar ? 1 / 0 : 1;
        };
        const scan = (input, options)=>{
            const opts = options || {};
            const length = input.length - 1;
            const scanToEnd = true === opts.parts || true === opts.scanToEnd;
            const slashes = [];
            const tokens = [];
            const parts = [];
            let str = input;
            let index = -1;
            let start = 0;
            let lastIndex = 0;
            let isBrace = false;
            let isBracket = false;
            let isGlob = false;
            let isExtglob = false;
            let isGlobstar = false;
            let braceEscaped = false;
            let backslashes = false;
            let negated = false;
            let negatedExtglob = false;
            let finished = false;
            let braces = 0;
            let prev;
            let code;
            let token = {
                value: '',
                depth: 0,
                isGlob: false
            };
            const eos = ()=>index >= length;
            const peek = ()=>str.charCodeAt(index + 1);
            const advance = ()=>{
                prev = code;
                return str.charCodeAt(++index);
            };
            while(index < length){
                code = advance();
                let next;
                if (code === CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true;
                    code = advance();
                    if (code === CHAR_LEFT_CURLY_BRACE) braceEscaped = true;
                    continue;
                }
                if (true === braceEscaped || code === CHAR_LEFT_CURLY_BRACE) {
                    braces++;
                    while(true !== eos() && (code = advance())){
                        if (code === CHAR_BACKWARD_SLASH) {
                            backslashes = token.backslashes = true;
                            advance();
                            continue;
                        }
                        if (code === CHAR_LEFT_CURLY_BRACE) {
                            braces++;
                            continue;
                        }
                        if (true !== braceEscaped && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
                            isBrace = token.isBrace = true;
                            isGlob = token.isGlob = true;
                            finished = true;
                            if (true === scanToEnd) continue;
                            break;
                        }
                        if (true !== braceEscaped && code === CHAR_COMMA) {
                            isBrace = token.isBrace = true;
                            isGlob = token.isGlob = true;
                            finished = true;
                            if (true === scanToEnd) continue;
                            break;
                        }
                        if (code === CHAR_RIGHT_CURLY_BRACE) {
                            braces--;
                            if (0 === braces) {
                                braceEscaped = false;
                                isBrace = token.isBrace = true;
                                finished = true;
                                break;
                            }
                        }
                    }
                    if (true === scanToEnd) continue;
                    break;
                }
                if (code === CHAR_FORWARD_SLASH) {
                    slashes.push(index);
                    tokens.push(token);
                    token = {
                        value: '',
                        depth: 0,
                        isGlob: false
                    };
                    if (true === finished) continue;
                    if (prev === CHAR_DOT && index === start + 1) {
                        start += 2;
                        continue;
                    }
                    lastIndex = index + 1;
                    continue;
                }
                if (true !== opts.noext) {
                    const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
                    if (true === isExtglobChar && peek() === CHAR_LEFT_PARENTHESES) {
                        isGlob = token.isGlob = true;
                        isExtglob = token.isExtglob = true;
                        finished = true;
                        if (code === CHAR_EXCLAMATION_MARK && index === start) negatedExtglob = true;
                        if (true === scanToEnd) {
                            while(true !== eos() && (code = advance())){
                                if (code === CHAR_BACKWARD_SLASH) {
                                    backslashes = token.backslashes = true;
                                    code = advance();
                                    continue;
                                }
                                if (code === CHAR_RIGHT_PARENTHESES) {
                                    isGlob = token.isGlob = true;
                                    finished = true;
                                    break;
                                }
                            }
                            continue;
                        }
                        break;
                    }
                }
                if (code === CHAR_ASTERISK) {
                    if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
                    isGlob = token.isGlob = true;
                    finished = true;
                    if (true === scanToEnd) continue;
                    break;
                }
                if (code === CHAR_QUESTION_MARK) {
                    isGlob = token.isGlob = true;
                    finished = true;
                    if (true === scanToEnd) continue;
                    break;
                }
                if (code === CHAR_LEFT_SQUARE_BRACKET) {
                    while(true !== eos() && (next = advance())){
                        if (next === CHAR_BACKWARD_SLASH) {
                            backslashes = token.backslashes = true;
                            advance();
                            continue;
                        }
                        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                            isBracket = token.isBracket = true;
                            isGlob = token.isGlob = true;
                            finished = true;
                            break;
                        }
                    }
                    if (true === scanToEnd) continue;
                    break;
                }
                if (true !== opts.nonegate && code === CHAR_EXCLAMATION_MARK && index === start) {
                    negated = token.negated = true;
                    start++;
                    continue;
                }
                if (true !== opts.noparen && code === CHAR_LEFT_PARENTHESES) {
                    isGlob = token.isGlob = true;
                    if (true === scanToEnd) {
                        while(true !== eos() && (code = advance())){
                            if (code === CHAR_LEFT_PARENTHESES) {
                                backslashes = token.backslashes = true;
                                code = advance();
                                continue;
                            }
                            if (code === CHAR_RIGHT_PARENTHESES) {
                                finished = true;
                                break;
                            }
                        }
                        continue;
                    }
                    break;
                }
                if (true === isGlob) {
                    finished = true;
                    if (true === scanToEnd) continue;
                    break;
                }
            }
            if (true === opts.noext) {
                isExtglob = false;
                isGlob = false;
            }
            let base = str;
            let prefix = '';
            let glob = '';
            if (start > 0) {
                prefix = str.slice(0, start);
                str = str.slice(start);
                lastIndex -= start;
            }
            if (base && true === isGlob && lastIndex > 0) {
                base = str.slice(0, lastIndex);
                glob = str.slice(lastIndex);
            } else if (true === isGlob) {
                base = '';
                glob = str;
            } else base = str;
            if (base && '' !== base && '/' !== base && base !== str) {
                if (isPathSeparator(base.charCodeAt(base.length - 1))) base = base.slice(0, -1);
            }
            if (true === opts.unescape) {
                if (glob) glob = utils.removeBackslashes(glob);
                if (base && true === backslashes) base = utils.removeBackslashes(base);
            }
            const state = {
                prefix,
                input,
                start,
                base,
                glob,
                isBrace,
                isBracket,
                isGlob,
                isExtglob,
                isGlobstar,
                negated,
                negatedExtglob
            };
            if (true === opts.tokens) {
                state.maxDepth = 0;
                if (!isPathSeparator(code)) tokens.push(token);
                state.tokens = tokens;
            }
            if (true === opts.parts || true === opts.tokens) {
                let prevIndex;
                for(let idx = 0; idx < slashes.length; idx++){
                    const n = prevIndex ? prevIndex + 1 : start;
                    const i = slashes[idx];
                    const value1 = input.slice(n, i);
                    if (opts.tokens) {
                        if (0 === idx && 0 !== start) {
                            tokens[idx].isPrefix = true;
                            tokens[idx].value = prefix;
                        } else tokens[idx].value = value1;
                        depth(tokens[idx]);
                        state.maxDepth += tokens[idx].depth;
                    }
                    if (0 !== idx || '' !== value1) parts.push(value1);
                    prevIndex = i;
                }
                if (prevIndex && prevIndex + 1 < input.length) {
                    const value1 = input.slice(prevIndex + 1);
                    parts.push(value1);
                    if (opts.tokens) {
                        tokens[tokens.length - 1].value = value1;
                        depth(tokens[tokens.length - 1]);
                        state.maxDepth += tokens[tokens.length - 1].depth;
                    }
                }
                state.slashes = slashes;
                state.parts = parts;
            }
            return state;
        };
        module.exports = scan;
    },
    "../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js": function(__unused_webpack_module, exports, __webpack_require__) {
        const path = __webpack_require__("path");
        const win32 = 'win32' === process.platform;
        const { REGEX_BACKSLASH, REGEX_REMOVE_BACKSLASH, REGEX_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_GLOBAL } = __webpack_require__("../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js");
        exports.isObject = (val)=>null !== val && 'object' == typeof val && !Array.isArray(val);
        exports.hasRegexChars = (str)=>REGEX_SPECIAL_CHARS.test(str);
        exports.isRegexChar = (str)=>1 === str.length && exports.hasRegexChars(str);
        exports.escapeRegex = (str)=>str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
        exports.toPosixSlashes = (str)=>str.replace(REGEX_BACKSLASH, '/');
        exports.removeBackslashes = (str)=>str.replace(REGEX_REMOVE_BACKSLASH, (match)=>'\\' === match ? '' : match);
        exports.supportsLookbehinds = ()=>{
            const segs = process.version.slice(1).split('.').map(Number);
            if (3 === segs.length && segs[0] >= 9 || 8 === segs[0] && segs[1] >= 10) return true;
            return false;
        };
        exports.isWindows = (options)=>{
            if (options && 'boolean' == typeof options.windows) return options.windows;
            return true === win32 || '\\' === path.sep;
        };
        exports.escapeLast = (input, char, lastIdx)=>{
            const idx = input.lastIndexOf(char, lastIdx);
            if (-1 === idx) return input;
            if ('\\' === input[idx - 1]) return exports.escapeLast(input, char, idx - 1);
            return `${input.slice(0, idx)}\\${input.slice(idx)}`;
        };
        exports.removePrefix = (input, state = {})=>{
            let output = input;
            if (output.startsWith('./')) {
                output = output.slice(2);
                state.prefix = './';
            }
            return output;
        };
        exports.wrapOutput = (input, state = {}, options = {})=>{
            const prepend = options.contains ? '' : '^';
            const append = options.contains ? '' : '$';
            let output = `${prepend}(?:${input})${append}`;
            if (true === state.negated) output = `(?:^(?!${output}).*$)`;
            return output;
        };
    },
    "../../node_modules/.pnpm/protocols@2.0.2/node_modules/protocols/lib/index.js": function(module) {
        module.exports = function(input, first) {
            if (true === first) first = 0;
            var prots = "";
            if ("string" == typeof input) try {
                prots = new URL(input).protocol;
            } catch (e) {}
            else if (input && input.constructor === URL) prots = input.protocol;
            var splits = prots.split(/\:|\+/).filter(Boolean);
            if ("number" == typeof first) return splits[first];
            return splits;
        };
    },
    "../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js": function(module) {
        /*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ let promise;
        module.exports = 'function' == typeof queueMicrotask ? queueMicrotask.bind('undefined' != typeof window ? window : global) : (cb)=>(promise || (promise = Promise.resolve())).then(cb).catch((err)=>setTimeout(()=>{
                    throw err;
                }, 0));
    },
    "../../node_modules/.pnpm/reusify@1.1.0/node_modules/reusify/reusify.js": function(module) {
        function reusify(Constructor) {
            var head = new Constructor();
            var tail = head;
            function get() {
                var current = head;
                if (current.next) head = current.next;
                else {
                    head = new Constructor();
                    tail = head;
                }
                current.next = null;
                return current;
            }
            function release(obj) {
                tail.next = obj;
                tail = obj;
            }
            return {
                get: get,
                release: release
            };
        }
        module.exports = reusify;
    },
    "../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        /*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ module.exports = runParallel;
        const queueMicrotask1 = __webpack_require__("../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js");
        function runParallel(tasks, cb) {
            let results, pending, keys;
            let isSync = true;
            if (Array.isArray(tasks)) {
                results = [];
                pending = tasks.length;
            } else {
                keys = Object.keys(tasks);
                results = {};
                pending = keys.length;
            }
            function done(err) {
                function end() {
                    if (cb) cb(err, results);
                    cb = null;
                }
                if (isSync) queueMicrotask1(end);
                else end();
            }
            function each(i, err, result) {
                results[i] = result;
                if (0 === --pending || err) done(err);
            }
            if (pending) {
                if (keys) keys.forEach(function(key) {
                    tasks[key](function(err, result) {
                        each(key, err, result);
                    });
                });
                else tasks.forEach(function(task, i) {
                    task(function(err, result) {
                        each(i, err, result);
                    });
                });
            } else done(null);
            isSync = false;
        }
    },
    "../../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        /*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */ const isNumber = __webpack_require__("../../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js");
        const toRegexRange = (min, max, options)=>{
            if (false === isNumber(min)) throw new TypeError('toRegexRange: expected the first argument to be a number');
            if (void 0 === max || min === max) return String(min);
            if (false === isNumber(max)) throw new TypeError('toRegexRange: expected the second argument to be a number.');
            let opts = {
                relaxZeros: true,
                ...options
            };
            if ('boolean' == typeof opts.strictZeros) opts.relaxZeros = false === opts.strictZeros;
            let relax = String(opts.relaxZeros);
            let shorthand = String(opts.shorthand);
            let capture = String(opts.capture);
            let wrap = String(opts.wrap);
            let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;
            if (toRegexRange.cache.hasOwnProperty(cacheKey)) return toRegexRange.cache[cacheKey].result;
            let a = Math.min(min, max);
            let b = Math.max(min, max);
            if (1 === Math.abs(a - b)) {
                let result = min + '|' + max;
                if (opts.capture) return `(${result})`;
                if (false === opts.wrap) return result;
                return `(?:${result})`;
            }
            let isPadded = hasPadding(min) || hasPadding(max);
            let state = {
                min,
                max,
                a,
                b
            };
            let positives = [];
            let negatives = [];
            if (isPadded) {
                state.isPadded = isPadded;
                state.maxLen = String(state.max).length;
            }
            if (a < 0) {
                let newMin = b < 0 ? Math.abs(b) : 1;
                negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
                a = state.a = 0;
            }
            if (b >= 0) positives = splitToPatterns(a, b, state, opts);
            state.negatives = negatives;
            state.positives = positives;
            state.result = collatePatterns(negatives, positives, opts);
            if (true === opts.capture) state.result = `(${state.result})`;
            else if (false !== opts.wrap && positives.length + negatives.length > 1) state.result = `(?:${state.result})`;
            toRegexRange.cache[cacheKey] = state;
            return state.result;
        };
        function collatePatterns(neg, pos, options) {
            let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];
            let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];
            let intersected = filterPatterns(neg, pos, '-?', true, options) || [];
            let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
            return subpatterns.join('|');
        }
        function splitToRanges(min, max) {
            let nines = 1;
            let zeros = 1;
            let stop = countNines(min, nines);
            let stops = new Set([
                max
            ]);
            while(min <= stop && stop <= max){
                stops.add(stop);
                nines += 1;
                stop = countNines(min, nines);
            }
            stop = countZeros(max + 1, zeros) - 1;
            while(min < stop && stop <= max){
                stops.add(stop);
                zeros += 1;
                stop = countZeros(max + 1, zeros) - 1;
            }
            stops = [
                ...stops
            ];
            stops.sort(compare);
            return stops;
        }
        function rangeToPattern(start, stop, options) {
            if (start === stop) return {
                pattern: start,
                count: [],
                digits: 0
            };
            let zipped = zip(start, stop);
            let digits = zipped.length;
            let pattern = '';
            let count = 0;
            for(let i = 0; i < digits; i++){
                let [startDigit, stopDigit] = zipped[i];
                if (startDigit === stopDigit) pattern += startDigit;
                else if ('0' !== startDigit || '9' !== stopDigit) pattern += toCharacterClass(startDigit, stopDigit, options);
                else count++;
            }
            if (count) pattern += true === options.shorthand ? '\\d' : '[0-9]';
            return {
                pattern,
                count: [
                    count
                ],
                digits
            };
        }
        function splitToPatterns(min, max, tok, options) {
            let ranges = splitToRanges(min, max);
            let tokens = [];
            let start = min;
            let prev;
            for(let i = 0; i < ranges.length; i++){
                let max = ranges[i];
                let obj = rangeToPattern(String(start), String(max), options);
                let zeros = '';
                if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
                    if (prev.count.length > 1) prev.count.pop();
                    prev.count.push(obj.count[0]);
                    prev.string = prev.pattern + toQuantifier(prev.count);
                    start = max + 1;
                    continue;
                }
                if (tok.isPadded) zeros = padZeros(max, tok, options);
                obj.string = zeros + obj.pattern + toQuantifier(obj.count);
                tokens.push(obj);
                start = max + 1;
                prev = obj;
            }
            return tokens;
        }
        function filterPatterns(arr, comparison, prefix, intersection, options) {
            let result = [];
            for (let ele of arr){
                let { string } = ele;
                if (!intersection && !contains(comparison, 'string', string)) result.push(prefix + string);
                if (intersection && contains(comparison, 'string', string)) result.push(prefix + string);
            }
            return result;
        }
        function zip(a, b) {
            let arr = [];
            for(let i = 0; i < a.length; i++)arr.push([
                a[i],
                b[i]
            ]);
            return arr;
        }
        function compare(a, b) {
            return a > b ? 1 : b > a ? -1 : 0;
        }
        function contains(arr, key, val) {
            return arr.some((ele)=>ele[key] === val);
        }
        function countNines(min, len) {
            return Number(String(min).slice(0, -len) + '9'.repeat(len));
        }
        function countZeros(integer, zeros) {
            return integer - integer % Math.pow(10, zeros);
        }
        function toQuantifier(digits) {
            let [start = 0, stop = ''] = digits;
            if (stop || start > 1) return `{${start + (stop ? ',' + stop : '')}}`;
            return '';
        }
        function toCharacterClass(a, b, options) {
            return `[${a}${b - a === 1 ? '' : '-'}${b}]`;
        }
        function hasPadding(str) {
            return /^-?(0+)\d/.test(str);
        }
        function padZeros(value1, tok, options) {
            if (!tok.isPadded) return value1;
            let diff = Math.abs(tok.maxLen - String(value1).length);
            let relax = false !== options.relaxZeros;
            switch(diff){
                case 0:
                    return '';
                case 1:
                    return relax ? '0?' : '0';
                case 2:
                    return relax ? '0{0,2}' : '00';
                default:
                    return relax ? `0{0,${diff}}` : `0{${diff}}`;
            }
        }
        toRegexRange.cache = {};
        toRegexRange.clearCache = ()=>toRegexRange.cache = {};
        module.exports = toRegexRange;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/dependencies/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getInternalDeps = exports.getTransitiveConsumers = exports.getTransitiveDependents = exports.getTransitiveProviders = exports.getTransitiveDependencies = void 0;
        const transitiveDeps_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/dependencies/transitiveDeps.js");
        Object.defineProperty(exports, "getTransitiveConsumers", {
            enumerable: true,
            get: function() {
                return transitiveDeps_1.getTransitiveConsumers;
            }
        });
        Object.defineProperty(exports, "getTransitiveProviders", {
            enumerable: true,
            get: function() {
                return transitiveDeps_1.getTransitiveProviders;
            }
        });
        const getPackageDependencies_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/getPackageDependencies.js");
        exports.getTransitiveDependencies = transitiveDeps_1.getTransitiveProviders;
        exports.getTransitiveDependents = transitiveDeps_1.getTransitiveConsumers;
        exports.getInternalDeps = getPackageDependencies_1.getPackageDependencies;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/dependencies/transitiveDeps.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getTransitiveProviders = exports.getTransitiveConsumers = exports.getDependentMap = void 0;
        const getPackageDependencies_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/getPackageDependencies.js");
        const isCachingEnabled_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/isCachingEnabled.js");
        const graphCache = new Map();
        function memoizedKey(packages, scope = []) {
            return JSON.stringify({
                packages,
                scope
            });
        }
        function getPackageGraph(packages, scope = []) {
            const internalPackages = new Set(Object.keys(packages));
            const key = memoizedKey(packages, scope);
            if ((0, isCachingEnabled_1.isCachingEnabled)() && graphCache.has(key)) return graphCache.get(key);
            const edges = [];
            const visited = new Set();
            const stack = scope.length > 0 ? [
                ...scope
            ] : Object.keys(packages);
            while(stack.length > 0){
                const pkg = stack.pop();
                if (visited.has(pkg)) continue;
                visited.add(pkg);
                const info = packages[pkg];
                const deps = (0, getPackageDependencies_1.getPackageDependencies)(info, internalPackages);
                if (deps.length > 0) for (const dep of deps){
                    stack.push(dep);
                    edges.push([
                        dep,
                        pkg
                    ]);
                }
                else edges.push([
                    null,
                    pkg
                ]);
            }
            graphCache.set(key, edges);
            return edges;
        }
        function getDependentMap(packages) {
            const graph = getPackageGraph(packages);
            const map = new Map();
            for (const [from, to] of graph){
                if (!map.has(to)) map.set(to, new Set());
                if (from) map.get(to).add(from);
            }
            return map;
        }
        exports.getDependentMap = getDependentMap;
        function getTransitiveConsumers(targets, packages, scope = []) {
            const graph = getPackageGraph(packages, scope);
            const pkgQueue = [
                ...targets
            ];
            const visited = new Set();
            while(pkgQueue.length > 0){
                const pkg = pkgQueue.shift();
                if (!visited.has(pkg)) {
                    visited.add(pkg);
                    for (const [from, to] of graph)if (from === pkg) pkgQueue.push(to);
                }
            }
            return [
                ...visited
            ].filter((pkg)=>!targets.includes(pkg));
        }
        exports.getTransitiveConsumers = getTransitiveConsumers;
        function getTransitiveProviders(targets, packages) {
            const graph = getPackageGraph(packages);
            const pkgQueue = [
                ...targets
            ];
            const visited = new Set();
            while(pkgQueue.length > 0){
                const pkg = pkgQueue.shift();
                if (!visited.has(pkg)) {
                    visited.add(pkg);
                    for (const [from, to] of graph)if (to === pkg && from) pkgQueue.push(from);
                }
            }
            return [
                ...visited
            ].filter((pkg)=>!targets.includes(pkg));
        }
        exports.getTransitiveProviders = getTransitiveProviders;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/getPackageInfos.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getPackageInfosAsync = exports.getPackageInfos = void 0;
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const path_1 = __importDefault(__webpack_require__("path"));
        const infoFromPackageJson_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/infoFromPackageJson.js");
        const getWorkspaces_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaces.js");
        function getPackageInfos(cwd) {
            const packageInfos = {};
            const workspacePackages = (0, getWorkspaces_1.getWorkspaces)(cwd);
            if (workspacePackages.length) for (const pkg of workspacePackages)packageInfos[pkg.name] = pkg.packageJson;
            else {
                const rootInfo = tryReadRootPackageJson(cwd);
                if (rootInfo) packageInfos[rootInfo.name] = rootInfo;
            }
            return packageInfos;
        }
        exports.getPackageInfos = getPackageInfos;
        async function getPackageInfosAsync(cwd) {
            const packageInfos = {};
            const workspacePackages = await (0, getWorkspaces_1.getWorkspacesAsync)(cwd);
            if (workspacePackages.length) for (const pkg of workspacePackages)packageInfos[pkg.name] = pkg.packageJson;
            else {
                const rootInfo = tryReadRootPackageJson(cwd);
                if (rootInfo) packageInfos[rootInfo.name] = rootInfo;
            }
            return packageInfos;
        }
        exports.getPackageInfosAsync = getPackageInfosAsync;
        function tryReadRootPackageJson(cwd) {
            const packageJsonPath = path_1.default.join(cwd, "package.json");
            if (fs_1.default.existsSync(packageJsonPath)) try {
                const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, "utf-8"));
                return (0, infoFromPackageJson_1.infoFromPackageJson)(packageJson, packageJsonPath);
            } catch (e) {
                throw new Error(`Invalid package.json file detected ${packageJsonPath}: ${e?.message || e}`);
            }
        }
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/getPackagePaths.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getPackagePathsAsync = exports.getPackagePaths = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const fast_glob_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/index.js"));
        const isCachingEnabled_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/isCachingEnabled.js");
        const packagePathsCache = {};
        const globOptions = {
            absolute: true,
            ignore: [
                "**/node_modules/**",
                "**/__fixtures__/**"
            ],
            stats: false
        };
        function getPackagePaths(root, packageGlobs) {
            if ((0, isCachingEnabled_1.isCachingEnabled)() && packagePathsCache[root]) return packagePathsCache[root];
            packagePathsCache[root] = fast_glob_1.default.sync(getPackageJsonGlobs(packageGlobs), {
                cwd: root,
                ...globOptions
            }).map(getResultPackagePath);
            return packagePathsCache[root];
        }
        exports.getPackagePaths = getPackagePaths;
        async function getPackagePathsAsync(root, packageGlobs) {
            if ((0, isCachingEnabled_1.isCachingEnabled)() && packagePathsCache[root]) return packagePathsCache[root];
            packagePathsCache[root] = (await (0, fast_glob_1.default)(getPackageJsonGlobs(packageGlobs), {
                cwd: root,
                ...globOptions
            })).map(getResultPackagePath);
            return packagePathsCache[root];
        }
        exports.getPackagePathsAsync = getPackagePathsAsync;
        function getPackageJsonGlobs(packageGlobs) {
            return packageGlobs.map((glob)=>path_1.default.join(glob, "package.json").replace(/\\/g, "/"));
        }
        function getResultPackagePath(packageJsonPath) {
            const packagePath = path_1.default.dirname(packageJsonPath);
            return "/" === path_1.default.sep ? packagePath : packagePath.replace(/\//g, path_1.default.sep);
        }
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getDefaultRemote.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getDefaultRemote = void 0;
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const path_1 = __importDefault(__webpack_require__("path"));
        const paths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/paths.js");
        const getRepositoryName_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getRepositoryName.js");
        const git_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/git.js");
        function getDefaultRemote(cwdOrOptions) {
            const options = "string" == typeof cwdOrOptions ? {
                cwd: cwdOrOptions
            } : cwdOrOptions;
            const { cwd, strict, verbose } = options;
            const log = (message)=>verbose && console.log(message);
            const logOrThrow = (message)=>{
                if (strict) throw new Error(message);
                log(message);
            };
            const gitRoot = (0, paths_1.findGitRoot)(cwd);
            let packageJson = {};
            const packageJsonPath = path_1.default.join(gitRoot, "package.json");
            try {
                packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, "utf8").trim());
            } catch (e) {
                logOrThrow(`Could not read "${packageJsonPath}"`);
            }
            const { repository } = packageJson;
            const repositoryUrl = "string" == typeof repository ? repository : repository && repository.url || "";
            if (!repositoryUrl) console.log(`Valid "repository" key not found in "${packageJsonPath}". Consider adding this info for more accurate git remote detection.`);
            const repositoryName = (0, getRepositoryName_1.getRepositoryName)(repositoryUrl);
            const remotesResult = (0, git_1.git)([
                "remote",
                "-v"
            ], {
                cwd
            });
            if (!remotesResult.success) logOrThrow(`Could not determine available git remotes under "${cwd}"`);
            const remotes = {};
            remotesResult.stdout.split("\n").forEach((line)=>{
                const [remoteName, remoteUrl] = line.split(/\s+/);
                const remoteRepoName = (0, getRepositoryName_1.getRepositoryName)(remoteUrl);
                if (remoteRepoName) remotes[remoteRepoName] = remoteName;
            });
            if (repositoryName) {
                if (remotes[repositoryName]) return remotes[repositoryName];
                logOrThrow(`Could not find remote pointing to repository "${repositoryName}".`);
            }
            const allRemoteNames = Object.values(remotes);
            const fallbacks = [
                "upstream",
                "origin",
                ...allRemoteNames
            ];
            for (const fallback of fallbacks)if (allRemoteNames.includes(fallback)) {
                log(`Default to remote "${fallback}"`);
                return fallback;
            }
            logOrThrow(`Could not find any remotes in git repo at "${gitRoot}".`);
            log('Assuming default remote "origin".');
            return "origin";
        }
        exports.getDefaultRemote = getDefaultRemote;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getDefaultRemoteBranch.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getDefaultRemoteBranch = void 0;
        const getDefaultRemote_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getDefaultRemote.js");
        const git_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/git.js");
        const gitUtilities_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/gitUtilities.js");
        function getDefaultRemoteBranch(...args) {
            const [branchOrOptions, argsCwd] = args;
            const options = "string" == typeof branchOrOptions ? {
                branch: branchOrOptions,
                cwd: argsCwd
            } : branchOrOptions;
            const { cwd, branch } = options;
            const defaultRemote = (0, getDefaultRemote_1.getDefaultRemote)(options);
            if (branch) return `${defaultRemote}/${branch}`;
            const showRemote = (0, git_1.git)([
                "remote",
                "show",
                defaultRemote
            ], {
                cwd
            });
            let remoteDefaultBranch;
            if (showRemote.success) remoteDefaultBranch = showRemote.stdout.split(/\n/).find((line)=>line.includes("HEAD branch"))?.replace(/^\s*HEAD branch:\s+/, "");
            return `${defaultRemote}/${remoteDefaultBranch || (0, gitUtilities_1.getDefaultBranch)(cwd)}`;
        }
        exports.getDefaultRemoteBranch = getDefaultRemoteBranch;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getRepositoryName.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getRepositoryName = void 0;
        const git_url_parse_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/git-url-parse@13.1.1/node_modules/git-url-parse/lib/index.js"));
        function getRepositoryName(url) {
            try {
                let fixedUrl = url.replace("/_optimized/", "/").replace("/DefaultCollection/", "/");
                const parsedUrl = (0, git_url_parse_1.default)(fixedUrl);
                const isVSO = fixedUrl.includes(".visualstudio.com");
                const isADO = fixedUrl.includes("dev.azure.com");
                if (!isVSO && !isADO) return parsedUrl.full_name;
                const sshMatch = parsedUrl.full_name.match(/(vs-ssh\.visualstudio\.com|ssh\.dev\.azure\.com):v\d+\/([^/]+)\/([^/]+)/);
                if (sshMatch) return `${sshMatch[2]}/${sshMatch[3]}/${parsedUrl.name}`;
                let organization = parsedUrl.organization;
                if (!organization && isVSO) organization = parsedUrl.resource.match(/([^.@]+)\.visualstudio\.com/)?.[1];
                return `${organization}/${parsedUrl.owner}/${parsedUrl.name}`;
            } catch (err) {
                return "";
            }
        }
        exports.getRepositoryName = getRepositoryName;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/git.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.gitFailFast = exports.git = exports.clearGitObservers = exports.addGitObserver = exports.GitError = void 0;
        const child_process_1 = __webpack_require__("child_process");
        class GitError extends Error {
            constructor(message, originalError){
                if (originalError instanceof Error) super(`${message}: ${originalError.message}`);
                else super(message);
                this.originalError = originalError;
            }
        }
        exports.GitError = GitError;
        const defaultMaxBuffer = process.env.GIT_MAX_BUFFER ? parseInt(process.env.GIT_MAX_BUFFER) : 524288000;
        const isDebug = !!process.env.GIT_DEBUG;
        const observers = [];
        let observing;
        function addGitObserver(observer) {
            observers.push(observer);
            return ()=>removeGitObserver(observer);
        }
        exports.addGitObserver = addGitObserver;
        function clearGitObservers() {
            observers.splice(0, observers.length);
        }
        exports.clearGitObservers = clearGitObservers;
        function removeGitObserver(observer) {
            const index = observers.indexOf(observer);
            if (index > -1) observers.splice(index, 1);
        }
        function git(args, options) {
            isDebug && console.log(`git ${args.join(" ")}`);
            const results = (0, child_process_1.spawnSync)("git", args, {
                maxBuffer: defaultMaxBuffer,
                ...options
            });
            const output = {
                ...results,
                stderr: (results.stderr || "").toString().trimEnd(),
                stdout: (results.stdout || "").toString().trimEnd(),
                success: 0 === results.status
            };
            if (isDebug) {
                console.log("exited with code " + results.status);
                output.stdout && console.log("git stdout:\n", output.stdout);
                output.stderr && console.warn("git stderr:\n", output.stderr);
            }
            if (!observing) {
                observing = true;
                for (const observer of observers)observer(args, output);
                observing = false;
            }
            return output;
        }
        exports.git = git;
        function gitFailFast(args, options) {
            const gitResult = git(args, options);
            if (!gitResult.success) {
                if (!options?.noExitCode) process.exitCode = 1;
                throw new GitError(`CRITICAL ERROR: running git command: git ${args.join(" ")}!
    ${gitResult.stdout?.toString().trimEnd()}
    ${gitResult.stderr?.toString().trimEnd()}`);
            }
        }
        exports.gitFailFast = gitFailFast;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/gitUtilities.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.listAllTrackedFiles = exports.getDefaultBranch = exports.parseRemoteBranch = exports.getRemoteBranch = exports.getParentBranch = exports.revertLocalChanges = exports.stageAndCommit = exports.commit = exports.stage = exports.init = exports.getFileAddedHash = exports.getCurrentHash = exports.getShortBranchName = exports.getFullBranchRef = exports.getBranchName = exports.getUserEmail = exports.getRecentCommitMessages = exports.getStagedChanges = exports.getChangesBetweenRefs = exports.getBranchChanges = exports.getChanges = exports.getUnstagedChanges = exports.fetchRemoteBranch = exports.fetchRemote = exports.getUntrackedChanges = void 0;
        const git_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/git.js");
        function getUntrackedChanges(cwd) {
            try {
                return processGitOutput((0, git_1.git)([
                    "ls-files",
                    "--others",
                    "--exclude-standard"
                ], {
                    cwd
                }));
            } catch (e) {
                throw new git_1.GitError("Cannot gather information about untracked changes", e);
            }
        }
        exports.getUntrackedChanges = getUntrackedChanges;
        function fetchRemote(remote, cwd) {
            const results = (0, git_1.git)([
                "fetch",
                "--",
                remote
            ], {
                cwd
            });
            if (!results.success) throw new git_1.GitError(`Cannot fetch remote "${remote}"`);
        }
        exports.fetchRemote = fetchRemote;
        function fetchRemoteBranch(remote, remoteBranch, cwd) {
            const results = (0, git_1.git)([
                "fetch",
                "--",
                remote,
                remoteBranch
            ], {
                cwd
            });
            if (!results.success) throw new git_1.GitError(`Cannot fetch branch "${remoteBranch}" from remote "${remote}"`);
        }
        exports.fetchRemoteBranch = fetchRemoteBranch;
        function getUnstagedChanges(cwd) {
            try {
                return processGitOutput((0, git_1.git)([
                    "--no-pager",
                    "diff",
                    "--name-only",
                    "--relative"
                ], {
                    cwd
                }));
            } catch (e) {
                throw new git_1.GitError("Cannot gather information about unstaged changes", e);
            }
        }
        exports.getUnstagedChanges = getUnstagedChanges;
        function getChanges(branch, cwd) {
            try {
                return processGitOutput((0, git_1.git)([
                    "--no-pager",
                    "diff",
                    "--relative",
                    "--name-only",
                    branch + "..."
                ], {
                    cwd
                }));
            } catch (e) {
                throw new git_1.GitError("Cannot gather information about changes", e);
            }
        }
        exports.getChanges = getChanges;
        function getBranchChanges(branch, cwd) {
            return getChangesBetweenRefs(branch, "", [], "", cwd);
        }
        exports.getBranchChanges = getBranchChanges;
        function getChangesBetweenRefs(fromRef, toRef, options, pattern, cwd) {
            try {
                return processGitOutput((0, git_1.git)([
                    "--no-pager",
                    "diff",
                    "--name-only",
                    "--relative",
                    ...options,
                    `${fromRef}...${toRef}`,
                    ...pattern ? [
                        "--",
                        pattern
                    ] : []
                ], {
                    cwd
                }));
            } catch (e) {
                throw new git_1.GitError(`Cannot gather information about change between refs changes (${fromRef} to ${toRef})`, e);
            }
        }
        exports.getChangesBetweenRefs = getChangesBetweenRefs;
        function getStagedChanges(cwd) {
            try {
                return processGitOutput((0, git_1.git)([
                    "--no-pager",
                    "diff",
                    "--relative",
                    "--staged",
                    "--name-only"
                ], {
                    cwd
                }));
            } catch (e) {
                throw new git_1.GitError("Cannot gather information about staged changes", e);
            }
        }
        exports.getStagedChanges = getStagedChanges;
        function getRecentCommitMessages(branch, cwd) {
            try {
                const results = (0, git_1.git)([
                    "log",
                    "--decorate",
                    "--pretty=format:%s",
                    `${branch}..HEAD`
                ], {
                    cwd
                });
                if (!results.success) return [];
                return results.stdout.split(/\n/).map((line)=>line.trim()).filter((line)=>!!line);
            } catch (e) {
                throw new git_1.GitError("Cannot gather information about recent commits", e);
            }
        }
        exports.getRecentCommitMessages = getRecentCommitMessages;
        function getUserEmail(cwd) {
            try {
                const results = (0, git_1.git)([
                    "config",
                    "user.email"
                ], {
                    cwd
                });
                return results.success ? results.stdout : null;
            } catch (e) {
                throw new git_1.GitError("Cannot gather information about user.email", e);
            }
        }
        exports.getUserEmail = getUserEmail;
        function getBranchName(cwd) {
            try {
                const results = (0, git_1.git)([
                    "rev-parse",
                    "--abbrev-ref",
                    "HEAD"
                ], {
                    cwd
                });
                return results.success ? results.stdout : null;
            } catch (e) {
                throw new git_1.GitError("Cannot get branch name", e);
            }
        }
        exports.getBranchName = getBranchName;
        function getFullBranchRef(branch, cwd) {
            const showRefResults = (0, git_1.git)([
                "show-ref",
                "--heads",
                branch
            ], {
                cwd
            });
            return showRefResults.success ? showRefResults.stdout.split(" ")[1] : null;
        }
        exports.getFullBranchRef = getFullBranchRef;
        function getShortBranchName(fullBranchRef, cwd) {
            const showRefResults = (0, git_1.git)([
                "name-rev",
                "--name-only",
                fullBranchRef
            ], {
                cwd
            });
            return showRefResults.success ? showRefResults.stdout : null;
        }
        exports.getShortBranchName = getShortBranchName;
        function getCurrentHash(cwd) {
            try {
                const results = (0, git_1.git)([
                    "rev-parse",
                    "HEAD"
                ], {
                    cwd
                });
                return results.success ? results.stdout : null;
            } catch (e) {
                throw new git_1.GitError("Cannot get current git hash", e);
            }
        }
        exports.getCurrentHash = getCurrentHash;
        function getFileAddedHash(filename, cwd) {
            const results = (0, git_1.git)([
                "rev-list",
                "HEAD",
                filename
            ], {
                cwd
            });
            if (results.success) return results.stdout.trim().split("\n").slice(-1)[0];
        }
        exports.getFileAddedHash = getFileAddedHash;
        function init(cwd, email, username) {
            (0, git_1.git)([
                "init"
            ], {
                cwd
            });
            const configLines = (0, git_1.git)([
                "config",
                "--list"
            ], {
                cwd
            }).stdout.split("\n");
            if (!configLines.find((line)=>line.includes("user.name"))) {
                if (!username) throw new git_1.GitError("must include a username when initializing git repo");
                (0, git_1.git)([
                    "config",
                    "user.name",
                    username
                ], {
                    cwd
                });
            }
            if (!configLines.find((line)=>line.includes("user.email"))) {
                if (!email) throw new Error("must include a email when initializing git repo");
                (0, git_1.git)([
                    "config",
                    "user.email",
                    email
                ], {
                    cwd
                });
            }
        }
        exports.init = init;
        function stage(patterns, cwd) {
            try {
                patterns.forEach((pattern)=>{
                    (0, git_1.git)([
                        "add",
                        pattern
                    ], {
                        cwd
                    });
                });
            } catch (e) {
                throw new git_1.GitError("Cannot stage changes", e);
            }
        }
        exports.stage = stage;
        function commit(message, cwd, options = []) {
            try {
                const commitResults = (0, git_1.git)([
                    "commit",
                    "-m",
                    message,
                    ...options
                ], {
                    cwd
                });
                if (!commitResults.success) throw new Error(`Cannot commit changes: ${commitResults.stdout} ${commitResults.stderr}`);
            } catch (e) {
                throw new git_1.GitError("Cannot commit changes", e);
            }
        }
        exports.commit = commit;
        function stageAndCommit(patterns, message, cwd, commitOptions = []) {
            stage(patterns, cwd);
            commit(message, cwd, commitOptions);
        }
        exports.stageAndCommit = stageAndCommit;
        function revertLocalChanges(cwd) {
            const stash = `workspace-tools_${new Date().getTime()}`;
            (0, git_1.git)([
                "stash",
                "push",
                "-u",
                "-m",
                stash
            ], {
                cwd
            });
            const results = (0, git_1.git)([
                "stash",
                "list"
            ]);
            if (results.success) {
                const lines = results.stdout.split(/\n/);
                const foundLine = lines.find((line)=>line.includes(stash));
                if (foundLine) {
                    const matched = foundLine.match(/^[^:]+/);
                    if (matched) {
                        (0, git_1.git)([
                            "stash",
                            "drop",
                            matched[0]
                        ]);
                        return true;
                    }
                }
            }
            return false;
        }
        exports.revertLocalChanges = revertLocalChanges;
        function getParentBranch(cwd) {
            const branchName = getBranchName(cwd);
            if (!branchName || "HEAD" === branchName) return null;
            const showBranchResult = (0, git_1.git)([
                "show-branch",
                "-a"
            ], {
                cwd
            });
            if (showBranchResult.success) {
                const showBranchLines = showBranchResult.stdout.split(/\n/);
                const parentLine = showBranchLines.find((line)=>line.includes("*") && !line.includes(branchName) && !line.includes("publish_"));
                const matched = parentLine?.match(/\[(.*)\]/);
                return matched ? matched[1] : null;
            }
            return null;
        }
        exports.getParentBranch = getParentBranch;
        function getRemoteBranch(branch, cwd) {
            const results = (0, git_1.git)([
                "rev-parse",
                "--abbrev-ref",
                "--symbolic-full-name",
                `${branch}@\{u\}`
            ], {
                cwd
            });
            if (results.success) return results.stdout.trim();
            return null;
        }
        exports.getRemoteBranch = getRemoteBranch;
        function parseRemoteBranch(branch) {
            const firstSlashPos = branch.indexOf("/", 0);
            const remote = branch.substring(0, firstSlashPos);
            const remoteBranch = branch.substring(firstSlashPos + 1);
            return {
                remote,
                remoteBranch
            };
        }
        exports.parseRemoteBranch = parseRemoteBranch;
        function getDefaultBranch(cwd) {
            const result = (0, git_1.git)([
                "config",
                "init.defaultBranch"
            ], {
                cwd
            });
            return result.success ? result.stdout.trim() : "master";
        }
        exports.getDefaultBranch = getDefaultBranch;
        function listAllTrackedFiles(patterns, cwd) {
            const results = (0, git_1.git)([
                "ls-files",
                ...patterns
            ], {
                cwd
            });
            return results.success && results.stdout.trim() ? results.stdout.trim().split(/\n/) : [];
        }
        exports.listAllTrackedFiles = listAllTrackedFiles;
        function processGitOutput(output) {
            if (!output.success) {
                if (output.stderr) throw new Error(output.stderr);
                return [];
            }
            return output.stdout.split(/\n/).map((line)=>line.trim()).filter((line)=>!!line && !line.includes("node_modules"));
        }
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            };
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = this && this.__exportStar || function(m, exports) {
            for(var p in m)if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/git.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getDefaultRemote.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/getDefaultRemoteBranch.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/gitUtilities.js"), exports);
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/createDependencyMap.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createDependencyMap = void 0;
        const getPackageDependencies_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/getPackageDependencies.js");
        function createDependencyMap(packages, options = {
            withDevDependencies: true,
            withPeerDependencies: false
        }) {
            const map = {
                dependencies: new Map(),
                dependents: new Map()
            };
            const internalPackages = new Set(Object.keys(packages));
            for (const [pkg, info] of Object.entries(packages)){
                const deps = (0, getPackageDependencies_1.getPackageDependencies)(info, internalPackages, options);
                for (const dep of deps){
                    if (!map.dependencies.has(pkg)) map.dependencies.set(pkg, new Set());
                    map.dependencies.get(pkg).add(dep);
                    if (!map.dependents.has(dep)) map.dependents.set(dep, new Set());
                    map.dependents.get(dep).add(pkg);
                }
            }
            return map;
        }
        exports.createDependencyMap = createDependencyMap;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/createPackageGraph.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createPackageGraph = void 0;
        const createDependencyMap_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/createDependencyMap.js");
        const micromatch_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js"));
        function createPackageGraph(packages, filters) {
            const packageSet = new Set();
            const edges = [];
            const edgeKeys = new Set();
            const dependencyMapCache = new Map();
            function visitorForFilter(filter, pkg, dependencies, dependents) {
                packageSet.add(pkg);
                if (!filter || filter.includeDependencies && dependencies) for (const dep of dependencies){
                    const key = edgeKey(pkg, dep);
                    if (!edgeKeys.has(key)) {
                        edgeKeys.add(key);
                        edges.push({
                            name: pkg,
                            dependency: dep
                        });
                    }
                    packageSet.add(dep);
                }
                if (!filter || filter.includeDependents && dependents) for (const dep of dependents){
                    const key = edgeKey(dep, pkg);
                    if (!edgeKeys.has(key)) {
                        edgeKeys.add(key);
                        edges.push({
                            name: dep,
                            dependency: pkg
                        });
                    }
                    packageSet.add(dep);
                }
            }
            if (filters) {
                filters = Array.isArray(filters) ? filters : [
                    filters
                ];
                for (const filter of filters){
                    const visitor = visitorForFilter.bind(void 0, filter);
                    const dependencyMap = getDependencyMapForFilter(packages, filter);
                    visitPackageGraph(packages, dependencyMap, visitor, filter);
                }
            } else {
                const visitor = visitorForFilter.bind(void 0, void 0);
                const dependencyMap = getDependencyMapForFilter(packages);
                visitPackageGraph(packages, dependencyMap, visitor);
            }
            return {
                packages: [
                    ...packageSet
                ],
                dependencies: edges
            };
            function edgeKey(name, dependency) {
                return `${name}->${dependency}`;
            }
            function getDependencyMapForFilter(packages, filter) {
                const cacheKey = getCacheKeyForFilter(filter);
                if (!dependencyMapCache.has(cacheKey)) {
                    const dependencyMap = (0, createDependencyMap_1.createDependencyMap)(packages, filter);
                    dependencyMapCache.set(cacheKey, dependencyMap);
                }
                return dependencyMapCache.get(cacheKey);
            }
            function getCacheKeyForFilter(filter) {
                if (!filter) return "default";
                const options = [
                    filter.withDevDependencies ? "dev" : "",
                    filter.withPeerDependencies ? "peer" : "",
                    filter.withOptionalDependencies ? "optional" : ""
                ].filter(Boolean).join("_");
                return options || "prod";
            }
        }
        exports.createPackageGraph = createPackageGraph;
        function visitPackageGraph(packages, dependencyMap, visitor, filter) {
            const visited = new Set();
            const packageNames = Object.keys(packages);
            const stack = filter ? (0, micromatch_1.default)(packageNames, filter.namePatterns) : packageNames;
            while(stack.length > 0){
                const pkg = stack.pop();
                if (visited.has(pkg)) continue;
                const nextPkgs = new Set();
                let dependencies = [];
                let dependents = [];
                if (!filter || filter.includeDependencies) {
                    dependencies = [
                        ...dependencyMap.dependencies.get(pkg) ?? []
                    ];
                    for (const dep of dependencies)nextPkgs.add(dep);
                }
                if (!filter || filter.includeDependents) {
                    dependents = [
                        ...dependencyMap.dependents.get(pkg) ?? []
                    ];
                    for (const dep of dependents)nextPkgs.add(dep);
                }
                visitor(pkg, dependencies, dependents);
                visited.add(pkg);
                if (nextPkgs.size > 0) for (const nextPkg of nextPkgs)stack.push(nextPkg);
            }
        }
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/getPackageDependencies.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getPackageDependencies = void 0;
        function isValidDependency(info, dep) {
            const range = info.dependencies?.[dep] || info.devDependencies?.[dep] || info.peerDependencies?.[dep] || info.optionalDependencies?.[dep];
            if (!range) return false;
            return !range.startsWith("npm:") && !range.startsWith("file:");
        }
        function getPackageDependencies(info, packages, options = {
            withDevDependencies: true
        }) {
            const deps = [];
            if (info.dependencies) {
                for (const dep of Object.keys(info.dependencies))if (dep !== info.name && packages.has(dep)) deps.push(dep);
            }
            if (info.devDependencies && options.withDevDependencies) {
                for (const dep of Object.keys(info.devDependencies))if (dep !== info.name && packages.has(dep)) deps.push(dep);
            }
            if (info.peerDependencies && options.withPeerDependencies) {
                for (const dep of Object.keys(info.peerDependencies))if (dep !== info.name && packages.has(dep)) deps.push(dep);
            }
            if (info.optionalDependencies && options.withOptionalDependencies) {
                for (const dep of Object.keys(info.optionalDependencies))if (dep !== info.name && packages.has(dep)) deps.push(dep);
            }
            const filteredDeps = deps.filter((dep)=>isValidDependency(info, dep));
            return filteredDeps;
        }
        exports.getPackageDependencies = getPackageDependencies;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            };
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = this && this.__exportStar || function(m, exports) {
            for(var p in m)if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getDependentMap = void 0;
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/createPackageGraph.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/createDependencyMap.js"), exports);
        const createDependencyMap_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/createDependencyMap.js");
        function getDependentMap(packages) {
            return (0, createDependencyMap_1.createDependencyMap)(packages).dependencies;
        }
        exports.getDependentMap = getDependentMap;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            };
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = this && this.__exportStar || function(m, exports) {
            for(var p in m)if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getYarnWorkspaces = exports.getYarnWorkspaceRoot = exports.getRushWorkspaces = exports.getRushWorkspaceRoot = exports.getPnpmWorkspaces = exports.getPnpmWorkspaceRoot = exports.setCachingEnabled = void 0;
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/dependencies/index.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/getPackageInfos.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/index.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/graph/index.js"), exports);
        var isCachingEnabled_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/isCachingEnabled.js");
        Object.defineProperty(exports, "setCachingEnabled", {
            enumerable: true,
            get: function() {
                return isCachingEnabled_1.setCachingEnabled;
            }
        });
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/index.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/paths.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/scope.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/types/PackageGraph.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/types/PackageInfo.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/types/WorkspaceInfo.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/findWorkspacePath.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaces.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackagePaths.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaceRoot.js"), exports);
        var pnpm_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/pnpm.js");
        Object.defineProperty(exports, "getPnpmWorkspaceRoot", {
            enumerable: true,
            get: function() {
                return pnpm_1.getPnpmWorkspaceRoot;
            }
        });
        Object.defineProperty(exports, "getPnpmWorkspaces", {
            enumerable: true,
            get: function() {
                return pnpm_1.getPnpmWorkspaces;
            }
        });
        var rush_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/rush.js");
        Object.defineProperty(exports, "getRushWorkspaceRoot", {
            enumerable: true,
            get: function() {
                return rush_1.getRushWorkspaceRoot;
            }
        });
        Object.defineProperty(exports, "getRushWorkspaces", {
            enumerable: true,
            get: function() {
                return rush_1.getRushWorkspaces;
            }
        });
        var yarn_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/yarn.js");
        Object.defineProperty(exports, "getYarnWorkspaceRoot", {
            enumerable: true,
            get: function() {
                return yarn_1.getYarnWorkspaceRoot;
            }
        });
        Object.defineProperty(exports, "getYarnWorkspaces", {
            enumerable: true,
            get: function() {
                return yarn_1.getYarnWorkspaces;
            }
        });
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getChangedPackages.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getPackagesByFiles.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/listOfWorkspacePackageNames.js"), exports);
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getAllPackageJsonFiles.js"), exports);
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/infoFromPackageJson.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.infoFromPackageJson = void 0;
        function infoFromPackageJson(packageJson, packageJsonPath) {
            return {
                packageJsonPath,
                ...packageJson
            };
        }
        exports.infoFromPackageJson = infoFromPackageJson;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/isCachingEnabled.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isCachingEnabled = exports.setCachingEnabled = void 0;
        let cachingEnabled = true;
        function setCachingEnabled(enabled) {
            cachingEnabled = enabled;
        }
        exports.setCachingEnabled = setCachingEnabled;
        function isCachingEnabled() {
            return cachingEnabled;
        }
        exports.isCachingEnabled = isCachingEnabled;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
                enumerable: true,
                get: function() {
                    return m[k];
                }
            };
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (void 0 === k2) k2 = k;
            o[k2] = m[k];
        });
        var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
            Object.defineProperty(o, "default", {
                enumerable: true,
                value: v
            });
        } : function(o, v) {
            o["default"] = v;
        });
        var __importStar = this && this.__importStar || function(mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (null != mod) {
                for(var k in mod)if ("default" !== k && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
            }
            __setModuleDefault(result, mod);
            return result;
        };
        var __exportStar = this && this.__exportStar || function(m, exports) {
            for(var p in m)if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.queryLockFile = exports.nameAtVersion = exports.parseLockFile = void 0;
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const path_1 = __importDefault(__webpack_require__("path"));
        const nameAtVersion_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/nameAtVersion.js");
        Object.defineProperty(exports, "nameAtVersion", {
            enumerable: true,
            get: function() {
                return nameAtVersion_1.nameAtVersion;
            }
        });
        const paths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/paths.js");
        const parsePnpmLock_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/parsePnpmLock.js");
        const parseNpmLock_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/parseNpmLock.js");
        const readYaml_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/readYaml.js");
        const parseBerryLock_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/parseBerryLock.js");
        const memoization = {};
        async function parseLockFile(packageRoot) {
            const yarnLockPath = (0, paths_1.searchUp)([
                "yarn.lock",
                "common/config/rush/yarn.lock"
            ], packageRoot);
            if (yarnLockPath) {
                if (memoization[yarnLockPath]) return memoization[yarnLockPath];
                const yarnLock = fs_1.default.readFileSync(yarnLockPath, "utf-8");
                const isBerry = yarnLock.includes("__metadata") || fs_1.default.existsSync(path_1.default.resolve(yarnLock.replace("yarn.lock", ".yarnrc.yml")));
                let parsed = {
                    type: "success",
                    object: {}
                };
                if (isBerry) {
                    const yaml = (0, readYaml_1.readYaml)(yarnLockPath);
                    parsed = (0, parseBerryLock_1.parseBerryLock)(yaml);
                } else {
                    const parseYarnLock = (await Promise.resolve().then(()=>__importStar(__webpack_require__("../../node_modules/.pnpm/@yarnpkg+lockfile@1.1.0/node_modules/@yarnpkg/lockfile/index.js")))).parse;
                    parsed = parseYarnLock(yarnLock);
                }
                memoization[yarnLockPath] = parsed;
                return parsed;
            }
            let pnpmLockPath = (0, paths_1.searchUp)([
                "pnpm-lock.yaml",
                "common/config/rush/pnpm-lock.yaml"
            ], packageRoot);
            if (pnpmLockPath) {
                if (memoization[pnpmLockPath]) return memoization[pnpmLockPath];
                const yaml = (0, readYaml_1.readYaml)(pnpmLockPath);
                const parsed = (0, parsePnpmLock_1.parsePnpmLock)(yaml);
                memoization[pnpmLockPath] = parsed;
                return memoization[pnpmLockPath];
            }
            let npmLockPath = (0, paths_1.searchUp)("package-lock.json", packageRoot);
            if (npmLockPath) {
                if (memoization[npmLockPath]) return memoization[npmLockPath];
                let npmLockJson;
                try {
                    npmLockJson = fs_1.default.readFileSync(npmLockPath, "utf-8");
                } catch  {
                    throw new Error("Couldn't read package-lock.json");
                }
                const npmLock = JSON.parse(npmLockJson.toString());
                if (!npmLock?.lockfileVersion || npmLock.lockfileVersion < 2) throw new Error(`Your package-lock.json version is not supported: lockfileVersion is ${npmLock.lockfileVersion}. You need npm version 7 or above and package-lock version 2 or above. Please, upgrade npm or choose a different package manager.`);
                memoization[npmLockPath] = (0, parseNpmLock_1.parseNpmLock)(npmLock);
                return memoization[npmLockPath];
            }
            throw new Error("You do not have yarn.lock, pnpm-lock.yaml or package-lock.json. Please use one of these package managers.");
        }
        exports.parseLockFile = parseLockFile;
        var queryLockFile_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/queryLockFile.js");
        Object.defineProperty(exports, "queryLockFile", {
            enumerable: true,
            get: function() {
                return queryLockFile_1.queryLockFile;
            }
        });
        __exportStar(__webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/types.js"), exports);
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/nameAtVersion.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.nameAtVersion = void 0;
        function nameAtVersion(name, version) {
            return `${name}@${version}`;
        }
        exports.nameAtVersion = nameAtVersion;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/parseBerryLock.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.parseBerryLock = void 0;
        function parseBerryLock(yaml) {
            const results = {};
            if (yaml) for (const [keySpec, descriptor] of Object.entries(yaml)){
                if ("__metadata" === keySpec) continue;
                const keys = keySpec.split(", ");
                for (const key of keys){
                    const normalizedKey = normalizeKey(key);
                    results[normalizedKey] = {
                        version: descriptor.version,
                        dependencies: descriptor.dependencies ?? {}
                    };
                }
            }
            return {
                object: results,
                type: "success"
            };
        }
        exports.parseBerryLock = parseBerryLock;
        function normalizeKey(key) {
            if (key.includes("npm:")) return key.replace(/npm:/, "");
            return key;
        }
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/parseNpmLock.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.parseNpmLock = void 0;
        const nameAtVersion_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/nameAtVersion.js");
        function parseNpmLock(lock) {
            const dependencies = Object.fromEntries(Object.entries(lock.dependencies ?? {}).map(([key, dep])=>[
                    (0, nameAtVersion_1.nameAtVersion)(key, dep.version),
                    dep
                ]));
            return {
                object: dependencies,
                type: "success"
            };
        }
        exports.parseNpmLock = parseNpmLock;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/parsePnpmLock.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.parsePnpmLock = void 0;
        const nameAtVersion_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/nameAtVersion.js");
        function parsePnpmLock(yaml) {
            const object = {};
            if (yaml && yaml.packages) for (const [pkgSpec, snapshot] of Object.entries(yaml.packages)){
                const specParts = pkgSpec.split(/\//);
                const name = specParts.length > 3 ? `${specParts[1]}/${specParts[2]}` : specParts[1];
                const version = specParts.length > 3 ? specParts[3] : specParts[2];
                object[(0, nameAtVersion_1.nameAtVersion)(name, version)] = {
                    version,
                    dependencies: snapshot.dependencies
                };
            }
            return {
                object,
                type: "success"
            };
        }
        exports.parsePnpmLock = parsePnpmLock;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/queryLockFile.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.queryLockFile = void 0;
        const nameAtVersion_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/nameAtVersion.js");
        function queryLockFile(name, versionRange, lock) {
            const versionRangeSignature = (0, nameAtVersion_1.nameAtVersion)(name, versionRange);
            return lock.object[versionRangeSignature];
        }
        exports.queryLockFile = queryLockFile;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/readYaml.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.readYaml = void 0;
        const fs_1 = __importDefault(__webpack_require__("fs"));
        function readYaml(file) {
            const jsYaml = __webpack_require__("../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/index.js");
            const content = fs_1.default.readFileSync(file, "utf8");
            return jsYaml.load(content);
        }
        exports.readYaml = readYaml;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/types.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.logVerboseWarning = void 0;
        function logVerboseWarning(description, err) {
            if (process.env.VERBOSE) console.warn(`${description}${err ? ":\n" : ""}`, err?.stack || err || "");
        }
        exports.logVerboseWarning = logVerboseWarning;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/paths.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isChildOf = exports.findProjectRoot = exports.findPackageRoot = exports.findGitRoot = exports.searchUp = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const getWorkspaceRoot_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaceRoot.js");
        const git_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/index.js");
        const logging_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js");
        function searchUp(filePath, cwd) {
            const paths = "string" == typeof filePath ? [
                filePath
            ] : filePath;
            cwd = path_1.default.resolve(cwd);
            const root = path_1.default.parse(cwd).root;
            let foundPath;
            while(!foundPath && cwd !== root){
                foundPath = paths.find((p)=>fs_1.default.existsSync(path_1.default.join(cwd, p)));
                if (foundPath) break;
                cwd = path_1.default.dirname(cwd);
            }
            return foundPath ? path_1.default.join(cwd, foundPath) : void 0;
        }
        exports.searchUp = searchUp;
        function findGitRoot(cwd) {
            const output = (0, git_1.git)([
                "rev-parse",
                "--show-toplevel"
            ], {
                cwd
            });
            if (!output.success) throw new Error(`Directory "${cwd}" is not in a git repository`);
            return path_1.default.normalize(output.stdout);
        }
        exports.findGitRoot = findGitRoot;
        function findPackageRoot(cwd) {
            const jsonPath = searchUp("package.json", cwd);
            return jsonPath && path_1.default.dirname(jsonPath);
        }
        exports.findPackageRoot = findPackageRoot;
        function findProjectRoot(cwd) {
            let workspaceRoot;
            try {
                workspaceRoot = (0, getWorkspaceRoot_1.getWorkspaceRoot)(cwd);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting workspace root for ${cwd}`, err);
            }
            if (!workspaceRoot) (0, logging_1.logVerboseWarning)(`Could not find workspace root for ${cwd}. Falling back to git root.`);
            return workspaceRoot || findGitRoot(cwd);
        }
        exports.findProjectRoot = findProjectRoot;
        function isChildOf(child, parent) {
            const relativePath = path_1.default.relative(child, parent);
            return /^[.\/\\]+$/.test(relativePath);
        }
        exports.isChildOf = isChildOf;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/scope.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getScopedPackages = void 0;
        const micromatch_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js"));
        function getScopedPackages(search, packages) {
            const packageNames = Array.isArray(packages) ? packages : Object.keys(packages);
            const results = new Set();
            const scopedSearch = search.filter((needle)=>needle.startsWith("@") || needle.startsWith("!@"));
            if (scopedSearch.length > 0) {
                const matched = (0, micromatch_1.default)(packageNames, scopedSearch, {
                    nocase: true
                });
                for (const pkg of matched)results.add(pkg);
            }
            const unscopedSearch = search.filter((needle)=>!needle.startsWith("@") && !needle.startsWith("!@"));
            if (unscopedSearch.length > 0) {
                const barePackageMap = generateBarePackageMap(packageNames);
                let matched = (0, micromatch_1.default)(Object.keys(barePackageMap), unscopedSearch, {
                    nocase: true
                });
                for (const bare of matched)for (const pkg of barePackageMap[bare])results.add(pkg);
            }
            return [
                ...results
            ];
        }
        exports.getScopedPackages = getScopedPackages;
        function generateBarePackageMap(packageNames) {
            const barePackageMap = {};
            for (const pkg of packageNames){
                const bare = pkg.replace(/^@[^/]+\//, "");
                barePackageMap[bare] = barePackageMap[bare] || [];
                barePackageMap[bare].push(pkg);
            }
            return barePackageMap;
        }
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/types/PackageGraph.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/types/PackageInfo.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/types/WorkspaceInfo.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/findWorkspacePath.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.findWorkspacePath = void 0;
        function findWorkspacePath(workspaces, packageName) {
            return workspaces.find(({ name })=>name === packageName)?.path;
        }
        exports.findWorkspacePath = findWorkspacePath;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getAllPackageJsonFiles.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getAllPackageJsonFilesAsync = exports._resetPackageJsonFilesCache = exports.getAllPackageJsonFiles = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const getWorkspacePackagePaths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackagePaths.js");
        const isCachingEnabled_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/isCachingEnabled.js");
        const cache = new Map();
        function getAllPackageJsonFiles(cwd) {
            if ((0, isCachingEnabled_1.isCachingEnabled)() && cache.has(cwd)) return cache.get(cwd);
            const packageJsonFiles = (0, getWorkspacePackagePaths_1.getWorkspacePackagePaths)(cwd).map((packagePath)=>path_1.default.join(packagePath, "package.json"));
            cache.set(cwd, packageJsonFiles);
            return packageJsonFiles;
        }
        exports.getAllPackageJsonFiles = getAllPackageJsonFiles;
        function _resetPackageJsonFilesCache() {
            cache.clear();
        }
        exports._resetPackageJsonFilesCache = _resetPackageJsonFilesCache;
        async function getAllPackageJsonFilesAsync(cwd) {
            if ((0, isCachingEnabled_1.isCachingEnabled)() && cache.has(cwd)) return cache.get(cwd);
            const packageJsonFiles = (await (0, getWorkspacePackagePaths_1.getWorkspacePackagePathsAsync)(cwd)).map((packagePath)=>path_1.default.join(packagePath, "package.json"));
            cache.set(cwd, packageJsonFiles);
            return packageJsonFiles;
        }
        exports.getAllPackageJsonFilesAsync = getAllPackageJsonFilesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getChangedPackages.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getChangedPackages = exports.getChangedPackagesBetweenRefs = void 0;
        const git_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/git/index.js");
        const getPackagesByFiles_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getPackagesByFiles.js");
        function getChangedPackagesBetweenRefs(cwd, fromRef, toRef = "", ignoreGlobs = []) {
            let changes = [
                ...new Set([
                    ...(0, git_1.getUntrackedChanges)(cwd) || [],
                    ...(0, git_1.getUnstagedChanges)(cwd) || [],
                    ...(0, git_1.getChangesBetweenRefs)(fromRef, toRef, [], "", cwd) || [],
                    ...(0, git_1.getStagedChanges)(cwd) || []
                ])
            ];
            return (0, getPackagesByFiles_1.getPackagesByFiles)(cwd, changes, ignoreGlobs, true);
        }
        exports.getChangedPackagesBetweenRefs = getChangedPackagesBetweenRefs;
        function getChangedPackages(cwd, target, ignoreGlobs = []) {
            const targetBranch = target || (0, git_1.getDefaultRemoteBranch)({
                cwd
            });
            let changes = [
                ...new Set([
                    ...(0, git_1.getUntrackedChanges)(cwd) || [],
                    ...(0, git_1.getUnstagedChanges)(cwd) || [],
                    ...(0, git_1.getBranchChanges)(targetBranch, cwd) || [],
                    ...(0, git_1.getStagedChanges)(cwd) || []
                ])
            ];
            return (0, getPackagesByFiles_1.getPackagesByFiles)(cwd, changes, ignoreGlobs, true);
        }
        exports.getChangedPackages = getChangedPackages;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getPackagesByFiles.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getPackagesByFiles = void 0;
        const micromatch_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js"));
        const path_1 = __importDefault(__webpack_require__("path"));
        const getWorkspaces_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaces.js");
        function getPackagesByFiles(workspaceRoot, files, ignoreGlobs = [], returnAllPackagesOnNoMatch = false) {
            const workspaceInfo = (0, getWorkspaces_1.getWorkspaces)(workspaceRoot);
            const ignoreSet = new Set((0, micromatch_1.default)(files, ignoreGlobs));
            files = files.filter((change)=>!ignoreSet.has(change));
            const packages = new Set();
            for (const file of files){
                const candidates = workspaceInfo.filter((pkgPath)=>0 === file.indexOf(path_1.default.relative(workspaceRoot, pkgPath.path).replace(/\\/g, "/")));
                if (candidates && candidates.length > 0) {
                    const found = candidates.reduce((found, item)=>found.path.length > item.path.length ? found : item, candidates[0]);
                    packages.add(found.name);
                } else if (returnAllPackagesOnNoMatch) return workspaceInfo.map((pkg)=>pkg.name);
            }
            return [
                ...packages
            ];
        }
        exports.getPackagesByFiles = getPackagesByFiles;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackageInfo.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacePackageInfoAsync = exports.getWorkspacePackageInfo = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const promises_1 = __importDefault(__webpack_require__("fs/promises"));
        const logging_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js");
        const infoFromPackageJson_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/infoFromPackageJson.js");
        function getWorkspacePackageInfo(packagePaths) {
            if (!packagePaths) return [];
            return packagePaths.map((workspacePath)=>{
                let packageJson;
                const packageJsonPath = path_1.default.join(workspacePath, "package.json");
                try {
                    packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, "utf-8"));
                } catch (err) {
                    (0, logging_1.logVerboseWarning)(`Error reading or parsing ${packageJsonPath} while getting workspace package info`, err);
                    return null;
                }
                return {
                    name: packageJson.name,
                    path: workspacePath,
                    packageJson: (0, infoFromPackageJson_1.infoFromPackageJson)(packageJson, packageJsonPath)
                };
            }).filter(Boolean);
        }
        exports.getWorkspacePackageInfo = getWorkspacePackageInfo;
        async function getWorkspacePackageInfoAsync(packagePaths) {
            if (!packagePaths) return [];
            const workspacePkgPromises = packagePaths.map(async (workspacePath)=>{
                const packageJsonPath = path_1.default.join(workspacePath, "package.json");
                try {
                    const packageJson = JSON.parse(await promises_1.default.readFile(packageJsonPath, "utf-8"));
                    return {
                        name: packageJson.name,
                        path: workspacePath,
                        packageJson: (0, infoFromPackageJson_1.infoFromPackageJson)(packageJson, packageJsonPath)
                    };
                } catch (err) {
                    (0, logging_1.logVerboseWarning)(`Error reading or parsing ${packageJsonPath} while getting workspace package info`, err);
                    return null;
                }
            });
            return (await Promise.all(workspacePkgPromises)).filter(Boolean);
        }
        exports.getWorkspacePackageInfoAsync = getWorkspacePackageInfoAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackagePaths.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacePackagePathsAsync = exports.getWorkspacePackagePaths = void 0;
        const implementations_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/index.js");
        function getWorkspacePackagePaths(cwd) {
            const utils = (0, implementations_1.getWorkspaceUtilities)(cwd);
            return utils?.getWorkspacePackagePaths(cwd) || [];
        }
        exports.getWorkspacePackagePaths = getWorkspacePackagePaths;
        async function getWorkspacePackagePathsAsync(cwd) {
            const utils = (0, implementations_1.getWorkspaceUtilities)(cwd);
            if (!utils) return [];
            if (!utils.getWorkspacePackagePathsAsync) {
                const managerName = implementations_1.getWorkspaceManagerAndRoot(cwd)?.manager;
                throw new Error(`${cwd} is using ${managerName} which has not been converted to async yet`);
            }
            return utils.getWorkspacePackagePathsAsync(cwd);
        }
        exports.getWorkspacePackagePathsAsync = getWorkspacePackagePathsAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaceRoot.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspaceRoot = void 0;
        const implementations_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/index.js");
        function getWorkspaceRoot(cwd, preferredManager) {
            return implementations_1.getWorkspaceManagerAndRoot(cwd, void 0, preferredManager)?.root;
        }
        exports.getWorkspaceRoot = getWorkspaceRoot;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspaces.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacesAsync = exports.getWorkspaces = void 0;
        const implementations_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/index.js");
        function getWorkspaces(cwd) {
            const utils = (0, implementations_1.getWorkspaceUtilities)(cwd);
            return utils?.getWorkspaces(cwd) || [];
        }
        exports.getWorkspaces = getWorkspaces;
        async function getWorkspacesAsync(cwd) {
            const utils = (0, implementations_1.getWorkspaceUtilities)(cwd);
            if (!utils) return [];
            if (!utils.getWorkspacesAsync) {
                const managerName = implementations_1.getWorkspaceManagerAndRoot(cwd)?.manager;
                throw new Error(`${cwd} is using ${managerName} which has not been converted to async yet`);
            }
            return utils.getWorkspacesAsync(cwd);
        }
        exports.getWorkspacesAsync = getWorkspacesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceManagerAndRoot.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspaceManagerAndRoot = exports.getPreferredWorkspaceManager = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const paths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/paths.js");
        const isCachingEnabled_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/isCachingEnabled.js");
        const workspaceCache = new Map();
        const managerFiles = {
            lerna: "lerna.json",
            rush: "rush.json",
            yarn: "yarn.lock",
            pnpm: "pnpm-workspace.yaml",
            npm: "package-lock.json"
        };
        function getPreferredWorkspaceManager() {
            const preferred = process.env.PREFERRED_WORKSPACE_MANAGER;
            return preferred && managerFiles[preferred] ? preferred : void 0;
        }
        exports.getPreferredWorkspaceManager = getPreferredWorkspaceManager;
        function getWorkspaceManagerAndRoot(cwd, cache, preferredManager) {
            cache = cache || workspaceCache;
            if ((0, isCachingEnabled_1.isCachingEnabled)() && cache.has(cwd)) return cache.get(cwd);
            preferredManager = preferredManager || getPreferredWorkspaceManager();
            const managerFile = (0, paths_1.searchUp)(preferredManager && managerFiles[preferredManager] || Object.values(managerFiles), cwd);
            if (managerFile) {
                const managerFileName = path_1.default.basename(managerFile);
                cache.set(cwd, {
                    manager: Object.keys(managerFiles).find((name)=>managerFiles[name] === managerFileName),
                    root: path_1.default.dirname(managerFile)
                });
            } else cache.set(cwd, void 0);
            return cache.get(cwd);
        }
        exports.getWorkspaceManagerAndRoot = getWorkspaceManagerAndRoot;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceUtilities.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspaceUtilities = void 0;
        const getWorkspaceManagerAndRoot_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceManagerAndRoot.js");
        function getWorkspaceUtilities(cwd) {
            const manager = getWorkspaceManagerAndRoot_1.getWorkspaceManagerAndRoot(cwd)?.manager;
            switch(manager){
                case "yarn":
                    return __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/yarn.js");
                case "pnpm":
                    return __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/pnpm.js");
                case "rush":
                    return __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/rush.js");
                case "npm":
                    return __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/npm.js");
                case "lerna":
                    return __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/lerna.js");
            }
        }
        exports.getWorkspaceUtilities = getWorkspaceUtilities;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/index.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspaceUtilities = exports.getWorkspaceManagerAndRoot = void 0;
        var getWorkspaceManagerAndRoot_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceManagerAndRoot.js");
        Object.defineProperty(exports, "getWorkspaceManagerAndRoot", {
            enumerable: true,
            get: function() {
                return getWorkspaceManagerAndRoot_1.getWorkspaceManagerAndRoot;
            }
        });
        var getWorkspaceUtilities_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceUtilities.js");
        Object.defineProperty(exports, "getWorkspaceUtilities", {
            enumerable: true,
            get: function() {
                return getWorkspaceUtilities_1.getWorkspaceUtilities;
            }
        });
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/lerna.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacesAsync = exports.getWorkspaces = exports.getLernaWorkspacesAsync = exports.getLernaWorkspaces = exports.getWorkspacePackagePaths = void 0;
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const jju_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js"));
        const path_1 = __importDefault(__webpack_require__("path"));
        const getPackagePaths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/getPackagePaths.js");
        const getWorkspacePackageInfo_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackageInfo.js");
        const logging_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js");
        const getWorkspaceManagerAndRoot_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceManagerAndRoot.js");
        function getLernaWorkspaceRoot(cwd) {
            const root = getWorkspaceManagerAndRoot_1.getWorkspaceManagerAndRoot(cwd, void 0, "lerna")?.root;
            if (!root) throw new Error("Could not find lerna workspace root from " + cwd);
            return root;
        }
        function getWorkspacePackagePaths(cwd) {
            try {
                const lernaWorkspaceRoot = getLernaWorkspaceRoot(cwd);
                const lernaJsonPath = path_1.default.join(lernaWorkspaceRoot, "lerna.json");
                const lernaConfig = jju_1.default.parse(fs_1.default.readFileSync(lernaJsonPath, "utf-8"));
                return (0, getPackagePaths_1.getPackagePaths)(lernaWorkspaceRoot, lernaConfig.packages);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting lerna workspace package paths for ${cwd}`, err);
                return [];
            }
        }
        exports.getWorkspacePackagePaths = getWorkspacePackagePaths;
        function getLernaWorkspaces(cwd) {
            try {
                const packagePaths = getWorkspacePackagePaths(cwd);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfo)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting lerna workspaces for ${cwd}`, err);
                return [];
            }
        }
        exports.getLernaWorkspaces = getLernaWorkspaces;
        exports.getWorkspaces = getLernaWorkspaces;
        async function getLernaWorkspacesAsync(cwd) {
            try {
                const packagePaths = getWorkspacePackagePaths(cwd);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfoAsync)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting lerna workspaces for ${cwd}`, err);
                return [];
            }
        }
        exports.getLernaWorkspacesAsync = getLernaWorkspacesAsync;
        exports.getWorkspacesAsync = getLernaWorkspacesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/npm.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacesAsync = exports.getWorkspaces = exports.getNpmWorkspacesAsync = exports.getNpmWorkspaces = exports.getWorkspacePackagePathsAsync = exports.getWorkspacePackagePaths = void 0;
        const _1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/index.js");
        const packageJsonWorkspaces_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/packageJsonWorkspaces.js");
        function getNpmWorkspaceRoot(cwd) {
            const root = _1.getWorkspaceManagerAndRoot(cwd, void 0, "npm")?.root;
            if (!root) throw new Error("Could not find npm workspace root from " + cwd);
            return root;
        }
        function getWorkspacePackagePaths(cwd) {
            const npmWorkspacesRoot = getNpmWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getPackagePathsFromWorkspaceRoot)(npmWorkspacesRoot);
        }
        exports.getWorkspacePackagePaths = getWorkspacePackagePaths;
        function getWorkspacePackagePathsAsync(cwd) {
            const npmWorkspacesRoot = getNpmWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getPackagePathsFromWorkspaceRootAsync)(npmWorkspacesRoot);
        }
        exports.getWorkspacePackagePathsAsync = getWorkspacePackagePathsAsync;
        function getNpmWorkspaces(cwd) {
            const npmWorkspacesRoot = getNpmWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getWorkspaceInfoFromWorkspaceRoot)(npmWorkspacesRoot);
        }
        exports.getNpmWorkspaces = getNpmWorkspaces;
        exports.getWorkspaces = getNpmWorkspaces;
        function getNpmWorkspacesAsync(cwd) {
            const npmWorkspacesRoot = getNpmWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getWorkspaceInfoFromWorkspaceRootAsync)(npmWorkspacesRoot);
        }
        exports.getNpmWorkspacesAsync = getNpmWorkspacesAsync;
        exports.getWorkspacesAsync = getNpmWorkspacesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/packageJsonWorkspaces.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspaceInfoFromWorkspaceRootAsync = exports.getWorkspaceInfoFromWorkspaceRoot = exports.getPackagePathsFromWorkspaceRootAsync = exports.getPackagePathsFromWorkspaceRoot = void 0;
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const path_1 = __importDefault(__webpack_require__("path"));
        const getPackagePaths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/getPackagePaths.js");
        const getWorkspacePackageInfo_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackageInfo.js");
        const logging_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js");
        function getPackages(packageJsonWorkspacesRoot) {
            const packageJsonFile = path_1.default.join(packageJsonWorkspacesRoot, "package.json");
            let packageJson;
            try {
                packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonFile, "utf-8"));
            } catch (e) {
                throw new Error("Could not load package.json from workspaces root");
            }
            const { workspaces } = packageJson;
            if (Array.isArray(workspaces)) return workspaces;
            if (!workspaces?.packages) throw new Error("Could not find a workspaces object in package.json (expected if this is not a monorepo)");
            return workspaces.packages;
        }
        function getPackagePathsFromWorkspaceRoot(packageJsonWorkspacesRoot) {
            try {
                const packageGlobs = getPackages(packageJsonWorkspacesRoot);
                return packageGlobs ? (0, getPackagePaths_1.getPackagePaths)(packageJsonWorkspacesRoot, packageGlobs) : [];
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting package paths for ${packageJsonWorkspacesRoot}`, err);
                return [];
            }
        }
        exports.getPackagePathsFromWorkspaceRoot = getPackagePathsFromWorkspaceRoot;
        async function getPackagePathsFromWorkspaceRootAsync(packageJsonWorkspacesRoot) {
            try {
                const packageGlobs = getPackages(packageJsonWorkspacesRoot);
                return packageGlobs ? (0, getPackagePaths_1.getPackagePathsAsync)(packageJsonWorkspacesRoot, packageGlobs) : [];
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting package paths for ${packageJsonWorkspacesRoot}`, err);
                return [];
            }
        }
        exports.getPackagePathsFromWorkspaceRootAsync = getPackagePathsFromWorkspaceRootAsync;
        function getWorkspaceInfoFromWorkspaceRoot(packageJsonWorkspacesRoot) {
            try {
                const packagePaths = getPackagePathsFromWorkspaceRoot(packageJsonWorkspacesRoot);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfo)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting workspace info for ${packageJsonWorkspacesRoot}`, err);
                return [];
            }
        }
        exports.getWorkspaceInfoFromWorkspaceRoot = getWorkspaceInfoFromWorkspaceRoot;
        async function getWorkspaceInfoFromWorkspaceRootAsync(packageJsonWorkspacesRoot) {
            try {
                const packagePaths = await getPackagePathsFromWorkspaceRootAsync(packageJsonWorkspacesRoot);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfoAsync)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting workspace info for ${packageJsonWorkspacesRoot}`, err);
                return [];
            }
        }
        exports.getWorkspaceInfoFromWorkspaceRootAsync = getWorkspaceInfoFromWorkspaceRootAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/pnpm.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacesAsync = exports.getWorkspaces = exports.getPnpmWorkspacesAsync = exports.getPnpmWorkspaces = exports.getWorkspacePackagePaths = exports.getPnpmWorkspaceRoot = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const getPackagePaths_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/getPackagePaths.js");
        const getWorkspacePackageInfo_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackageInfo.js");
        const readYaml_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/lockfile/readYaml.js");
        const logging_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js");
        const getWorkspaceManagerAndRoot_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceManagerAndRoot.js");
        function getPnpmWorkspaceRoot(cwd) {
            const root = getWorkspaceManagerAndRoot_1.getWorkspaceManagerAndRoot(cwd, void 0, "pnpm")?.root;
            if (!root) throw new Error("Could not find pnpm workspace root from " + cwd);
            return root;
        }
        exports.getPnpmWorkspaceRoot = getPnpmWorkspaceRoot;
        function getWorkspacePackagePaths(cwd) {
            try {
                const pnpmWorkspacesRoot = getPnpmWorkspaceRoot(cwd);
                const pnpmWorkspacesFile = path_1.default.join(pnpmWorkspacesRoot, "pnpm-workspace.yaml");
                const pnpmWorkspaces = (0, readYaml_1.readYaml)(pnpmWorkspacesFile);
                return (0, getPackagePaths_1.getPackagePaths)(pnpmWorkspacesRoot, pnpmWorkspaces.packages);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting pnpm workspace package paths for ${cwd}`, err);
                return [];
            }
        }
        exports.getWorkspacePackagePaths = getWorkspacePackagePaths;
        function getPnpmWorkspaces(cwd) {
            try {
                const packagePaths = getWorkspacePackagePaths(cwd);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfo)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting pnpm workspaces for ${cwd}`, err);
                return [];
            }
        }
        exports.getPnpmWorkspaces = getPnpmWorkspaces;
        exports.getWorkspaces = getPnpmWorkspaces;
        async function getPnpmWorkspacesAsync(cwd) {
            try {
                const packagePaths = getWorkspacePackagePaths(cwd);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfoAsync)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting pnpm workspaces for ${cwd}`, err);
                return [];
            }
        }
        exports.getPnpmWorkspacesAsync = getPnpmWorkspacesAsync;
        exports.getWorkspacesAsync = getPnpmWorkspacesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/rush.js": function(__unused_webpack_module, exports, __webpack_require__) {
        var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : {
                default: mod
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacesAsync = exports.getWorkspaces = exports.getRushWorkspacesAsync = exports.getRushWorkspaces = exports.getWorkspacePackagePaths = exports.getRushWorkspaceRoot = void 0;
        const path_1 = __importDefault(__webpack_require__("path"));
        const jju_1 = __importDefault(__webpack_require__("../../node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js"));
        const fs_1 = __importDefault(__webpack_require__("fs"));
        const getWorkspacePackageInfo_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/getWorkspacePackageInfo.js");
        const logging_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/logging.js");
        const getWorkspaceManagerAndRoot_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/getWorkspaceManagerAndRoot.js");
        function getRushWorkspaceRoot(cwd) {
            const root = getWorkspaceManagerAndRoot_1.getWorkspaceManagerAndRoot(cwd, void 0, "rush")?.root;
            if (!root) throw new Error("Could not find rush workspace root from " + cwd);
            return root;
        }
        exports.getRushWorkspaceRoot = getRushWorkspaceRoot;
        function getWorkspacePackagePaths(cwd) {
            try {
                const rushWorkspaceRoot = getRushWorkspaceRoot(cwd);
                const rushJsonPath = path_1.default.join(rushWorkspaceRoot, "rush.json");
                const rushConfig = jju_1.default.parse(fs_1.default.readFileSync(rushJsonPath, "utf-8"));
                const root = path_1.default.dirname(rushJsonPath);
                return rushConfig.projects.map((project)=>path_1.default.join(root, project.projectFolder));
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting rush workspace package paths for ${cwd}`, err);
                return [];
            }
        }
        exports.getWorkspacePackagePaths = getWorkspacePackagePaths;
        function getRushWorkspaces(cwd) {
            try {
                const packagePaths = getWorkspacePackagePaths(cwd);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfo)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting rush workspaces for ${cwd}`, err);
                return [];
            }
        }
        exports.getRushWorkspaces = getRushWorkspaces;
        exports.getWorkspaces = getRushWorkspaces;
        async function getRushWorkspacesAsync(cwd) {
            try {
                const packagePaths = getWorkspacePackagePaths(cwd);
                return (0, getWorkspacePackageInfo_1.getWorkspacePackageInfoAsync)(packagePaths);
            } catch (err) {
                (0, logging_1.logVerboseWarning)(`Error getting rush workspaces for ${cwd}`, err);
                return [];
            }
        }
        exports.getRushWorkspacesAsync = getRushWorkspacesAsync;
        exports.getWorkspacesAsync = getRushWorkspacesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/yarn.js": function(__unused_webpack_module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getWorkspacesAsync = exports.getWorkspaces = exports.getYarnWorkspacesAsync = exports.getYarnWorkspaces = exports.getWorkspacePackagePathsAsync = exports.getWorkspacePackagePaths = exports.getYarnWorkspaceRoot = void 0;
        const _1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/index.js");
        const packageJsonWorkspaces_1 = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/implementations/packageJsonWorkspaces.js");
        function getYarnWorkspaceRoot(cwd) {
            const root = _1.getWorkspaceManagerAndRoot(cwd, void 0, "yarn")?.root;
            if (!root) throw new Error("Could not find yarn workspace root from " + cwd);
            return root;
        }
        exports.getYarnWorkspaceRoot = getYarnWorkspaceRoot;
        function getWorkspacePackagePaths(cwd) {
            const yarnWorkspacesRoot = getYarnWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getPackagePathsFromWorkspaceRoot)(yarnWorkspacesRoot);
        }
        exports.getWorkspacePackagePaths = getWorkspacePackagePaths;
        function getWorkspacePackagePathsAsync(cwd) {
            const yarnWorkspacesRoot = getYarnWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getPackagePathsFromWorkspaceRootAsync)(yarnWorkspacesRoot);
        }
        exports.getWorkspacePackagePathsAsync = getWorkspacePackagePathsAsync;
        function getYarnWorkspaces(cwd) {
            const yarnWorkspacesRoot = getYarnWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getWorkspaceInfoFromWorkspaceRoot)(yarnWorkspacesRoot);
        }
        exports.getYarnWorkspaces = getYarnWorkspaces;
        exports.getWorkspaces = getYarnWorkspaces;
        function getYarnWorkspacesAsync(cwd) {
            const yarnWorkspacesRoot = getYarnWorkspaceRoot(cwd);
            return (0, packageJsonWorkspaces_1.getWorkspaceInfoFromWorkspaceRootAsync)(yarnWorkspacesRoot);
        }
        exports.getYarnWorkspacesAsync = getYarnWorkspacesAsync;
        exports.getWorkspacesAsync = getYarnWorkspacesAsync;
    },
    "../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/workspaces/listOfWorkspacePackageNames.js": function(__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.listOfWorkspacePackageNames = void 0;
        function listOfWorkspacePackageNames(workspaces) {
            return workspaces.map(({ name })=>name);
        }
        exports.listOfWorkspacePackageNames = listOfWorkspacePackageNames;
    },
    "../../node_modules/cross-spawn/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const cp = __webpack_require__("child_process");
        const parse = __webpack_require__("../../node_modules/cross-spawn/lib/parse.js");
        const enoent = __webpack_require__("../../node_modules/cross-spawn/lib/enoent.js");
        function spawn(command, args, options) {
            const parsed = parse(command, args, options);
            const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
            enoent.hookChildProcess(spawned, parsed);
            return spawned;
        }
        function spawnSync(command, args, options) {
            const parsed = parse(command, args, options);
            const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
            result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
            return result;
        }
        module.exports = spawn;
        module.exports.spawn = spawn;
        module.exports.sync = spawnSync;
        module.exports._parse = parse;
        module.exports._enoent = enoent;
    },
    "../../node_modules/cross-spawn/lib/enoent.js": function(module) {
        const isWin = 'win32' === process.platform;
        function notFoundError(original, syscall) {
            return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
                code: 'ENOENT',
                errno: 'ENOENT',
                syscall: `${syscall} ${original.command}`,
                path: original.command,
                spawnargs: original.args
            });
        }
        function hookChildProcess(cp, parsed) {
            if (!isWin) return;
            const originalEmit = cp.emit;
            cp.emit = function(name, arg1) {
                if ('exit' === name) {
                    const err = verifyENOENT(arg1, parsed);
                    if (err) return originalEmit.call(cp, 'error', err);
                }
                return originalEmit.apply(cp, arguments);
            };
        }
        function verifyENOENT(status, parsed) {
            if (isWin && 1 === status && !parsed.file) return notFoundError(parsed.original, 'spawn');
            return null;
        }
        function verifyENOENTSync(status, parsed) {
            if (isWin && 1 === status && !parsed.file) return notFoundError(parsed.original, 'spawnSync');
            return null;
        }
        module.exports = {
            hookChildProcess,
            verifyENOENT,
            verifyENOENTSync,
            notFoundError
        };
    },
    "../../node_modules/cross-spawn/lib/parse.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const path = __webpack_require__("path");
        const resolveCommand = __webpack_require__("../../node_modules/cross-spawn/lib/util/resolveCommand.js");
        const escape = __webpack_require__("../../node_modules/cross-spawn/lib/util/escape.js");
        const readShebang = __webpack_require__("../../node_modules/cross-spawn/lib/util/readShebang.js");
        const isWin = 'win32' === process.platform;
        const isExecutableRegExp = /\.(?:com|exe)$/i;
        const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
        function detectShebang(parsed) {
            parsed.file = resolveCommand(parsed);
            const shebang = parsed.file && readShebang(parsed.file);
            if (shebang) {
                parsed.args.unshift(parsed.file);
                parsed.command = shebang;
                return resolveCommand(parsed);
            }
            return parsed.file;
        }
        function parseNonShell(parsed) {
            if (!isWin) return parsed;
            const commandFile = detectShebang(parsed);
            const needsShell = !isExecutableRegExp.test(commandFile);
            if (parsed.options.forceShell || needsShell) {
                const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
                parsed.command = path.normalize(parsed.command);
                parsed.command = escape.command(parsed.command);
                parsed.args = parsed.args.map((arg)=>escape.argument(arg, needsDoubleEscapeMetaChars));
                const shellCommand = [
                    parsed.command
                ].concat(parsed.args).join(' ');
                parsed.args = [
                    '/d',
                    '/s',
                    '/c',
                    `"${shellCommand}"`
                ];
                parsed.command = process.env.comspec || 'cmd.exe';
                parsed.options.windowsVerbatimArguments = true;
            }
            return parsed;
        }
        function parse(command, args, options) {
            if (args && !Array.isArray(args)) {
                options = args;
                args = null;
            }
            args = args ? args.slice(0) : [];
            options = Object.assign({}, options);
            const parsed = {
                command,
                args,
                options,
                file: void 0,
                original: {
                    command,
                    args
                }
            };
            return options.shell ? parsed : parseNonShell(parsed);
        }
        module.exports = parse;
    },
    "../../node_modules/cross-spawn/lib/util/escape.js": function(module) {
        const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
        function escapeCommand(arg) {
            arg = arg.replace(metaCharsRegExp, '^$1');
            return arg;
        }
        function escapeArgument(arg, doubleEscapeMetaChars) {
            arg = `${arg}`;
            arg = arg.replace(/(?=(\\+?)?)\1"/g, '$1$1\\"');
            arg = arg.replace(/(?=(\\+?)?)\1$/, '$1$1');
            arg = `"${arg}"`;
            arg = arg.replace(metaCharsRegExp, '^$1');
            if (doubleEscapeMetaChars) arg = arg.replace(metaCharsRegExp, '^$1');
            return arg;
        }
        module.exports.command = escapeCommand;
        module.exports.argument = escapeArgument;
    },
    "../../node_modules/cross-spawn/lib/util/readShebang.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const fs = __webpack_require__("fs");
        const shebangCommand = __webpack_require__("../../node_modules/shebang-command/index.js");
        function readShebang(command) {
            const size = 150;
            const buffer = Buffer.alloc(size);
            let fd;
            try {
                fd = fs.openSync(command, 'r');
                fs.readSync(fd, buffer, 0, size, 0);
                fs.closeSync(fd);
            } catch (e) {}
            return shebangCommand(buffer.toString());
        }
        module.exports = readShebang;
    },
    "../../node_modules/cross-spawn/lib/util/resolveCommand.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const path = __webpack_require__("path");
        const which = __webpack_require__("../../node_modules/which/which.js");
        const getPathKey = __webpack_require__("../../node_modules/path-key/index.js");
        function resolveCommandAttempt(parsed, withoutPathExt) {
            const env = parsed.options.env || process.env;
            const cwd = process.cwd();
            const hasCustomCwd = null != parsed.options.cwd;
            const shouldSwitchCwd = hasCustomCwd && void 0 !== process.chdir && !process.chdir.disabled;
            if (shouldSwitchCwd) try {
                process.chdir(parsed.options.cwd);
            } catch (err) {}
            let resolved;
            try {
                resolved = which.sync(parsed.command, {
                    path: env[getPathKey({
                        env
                    })],
                    pathExt: withoutPathExt ? path.delimiter : void 0
                });
            } catch (e) {} finally{
                if (shouldSwitchCwd) process.chdir(cwd);
            }
            if (resolved) resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);
            return resolved;
        }
        function resolveCommand(parsed) {
            return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
        }
        module.exports = resolveCommand;
    },
    "../../node_modules/isexe/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        __webpack_require__("fs");
        var core;
        core = 'win32' === process.platform || global.TESTING_WINDOWS ? __webpack_require__("../../node_modules/isexe/windows.js") : __webpack_require__("../../node_modules/isexe/mode.js");
        module.exports = isexe;
        isexe.sync = sync;
        function isexe(path, options, cb) {
            if ('function' == typeof options) {
                cb = options;
                options = {};
            }
            if (!cb) {
                if ('function' != typeof Promise) throw new TypeError('callback not provided');
                return new Promise(function(resolve, reject) {
                    isexe(path, options || {}, function(er, is) {
                        if (er) reject(er);
                        else resolve(is);
                    });
                });
            }
            core(path, options || {}, function(er, is) {
                if (er) {
                    if ('EACCES' === er.code || options && options.ignoreErrors) {
                        er = null;
                        is = false;
                    }
                }
                cb(er, is);
            });
        }
        function sync(path, options) {
            try {
                return core.sync(path, options || {});
            } catch (er) {
                if (options && options.ignoreErrors || 'EACCES' === er.code) return false;
                throw er;
            }
        }
    },
    "../../node_modules/isexe/mode.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports = isexe;
        isexe.sync = sync;
        var fs = __webpack_require__("fs");
        function isexe(path, options, cb) {
            fs.stat(path, function(er, stat) {
                cb(er, er ? false : checkStat(stat, options));
            });
        }
        function sync(path, options) {
            return checkStat(fs.statSync(path), options);
        }
        function checkStat(stat, options) {
            return stat.isFile() && checkMode(stat, options);
        }
        function checkMode(stat, options) {
            var mod = stat.mode;
            var uid = stat.uid;
            var gid = stat.gid;
            var myUid = void 0 !== options.uid ? options.uid : process.getuid && process.getuid();
            var myGid = void 0 !== options.gid ? options.gid : process.getgid && process.getgid();
            var u = parseInt('100', 8);
            var g = parseInt('010', 8);
            var o = parseInt('001', 8);
            var ug = u | g;
            var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && 0 === myUid;
            return ret;
        }
    },
    "../../node_modules/isexe/windows.js": function(module, __unused_webpack_exports, __webpack_require__) {
        module.exports = isexe;
        isexe.sync = sync;
        var fs = __webpack_require__("fs");
        function checkPathExt(path, options) {
            var pathext = void 0 !== options.pathExt ? options.pathExt : process.env.PATHEXT;
            if (!pathext) return true;
            pathext = pathext.split(';');
            if (-1 !== pathext.indexOf('')) return true;
            for(var i = 0; i < pathext.length; i++){
                var p = pathext[i].toLowerCase();
                if (p && path.substr(-p.length).toLowerCase() === p) return true;
            }
            return false;
        }
        function checkStat(stat, path, options) {
            if (!stat.isSymbolicLink() && !stat.isFile()) return false;
            return checkPathExt(path, options);
        }
        function isexe(path, options, cb) {
            fs.stat(path, function(er, stat) {
                cb(er, er ? false : checkStat(stat, path, options));
            });
        }
        function sync(path, options) {
            return checkStat(fs.statSync(path), path, options);
        }
    },
    "../../node_modules/path-key/index.js": function(module) {
        const pathKey = (options = {})=>{
            const environment = options.env || process.env;
            const platform = options.platform || process.platform;
            if ('win32' !== platform) return 'PATH';
            return Object.keys(environment).reverse().find((key)=>'PATH' === key.toUpperCase()) || 'Path';
        };
        module.exports = pathKey;
        module.exports["default"] = pathKey;
    },
    "../../node_modules/shebang-command/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const shebangRegex = __webpack_require__("../../node_modules/shebang-regex/index.js");
        module.exports = (string = '')=>{
            const match = string.match(shebangRegex);
            if (!match) return null;
            const [path, argument] = match[0].replace(/#! ?/, '').split(' ');
            const binary = path.split('/').pop();
            if ('env' === binary) return argument;
            return argument ? `${binary} ${argument}` : binary;
        };
    },
    "../../node_modules/shebang-regex/index.js": function(module) {
        module.exports = /^#!(.*)/;
    },
    "../../node_modules/which/which.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const isWindows = 'win32' === process.platform || 'cygwin' === process.env.OSTYPE || 'msys' === process.env.OSTYPE;
        const path = __webpack_require__("path");
        const COLON = isWindows ? ';' : ':';
        const isexe = __webpack_require__("../../node_modules/isexe/index.js");
        const getNotFoundError = (cmd)=>Object.assign(new Error(`not found: ${cmd}`), {
                code: 'ENOENT'
            });
        const getPathInfo = (cmd, opt)=>{
            const colon = opt.colon || COLON;
            const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [
                ''
            ] : [
                ...isWindows ? [
                    process.cwd()
                ] : [],
                ...(opt.path || process.env.PATH || '').split(colon)
            ];
            const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM' : '';
            const pathExt = isWindows ? pathExtExe.split(colon) : [
                ''
            ];
            if (isWindows) {
                if (-1 !== cmd.indexOf('.') && '' !== pathExt[0]) pathExt.unshift('');
            }
            return {
                pathEnv,
                pathExt,
                pathExtExe
            };
        };
        const which = (cmd, opt, cb)=>{
            if ('function' == typeof opt) {
                cb = opt;
                opt = {};
            }
            if (!opt) opt = {};
            const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
            const found = [];
            const step = (i)=>new Promise((resolve, reject)=>{
                    if (i === pathEnv.length) return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
                    const ppRaw = pathEnv[i];
                    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
                    const pCmd = path.join(pathPart, cmd);
                    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
                    resolve(subStep(p, i, 0));
                });
            const subStep = (p, i, ii)=>new Promise((resolve, reject)=>{
                    if (ii === pathExt.length) return resolve(step(i + 1));
                    const ext = pathExt[ii];
                    isexe(p + ext, {
                        pathExt: pathExtExe
                    }, (er, is)=>{
                        if (!er && is) {
                            if (!opt.all) return resolve(p + ext);
                            found.push(p + ext);
                        }
                        return resolve(subStep(p, i, ii + 1));
                    });
                });
            return cb ? step(0).then((res)=>cb(null, res), cb) : step(0);
        };
        const whichSync = (cmd, opt)=>{
            opt = opt || {};
            const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
            const found = [];
            for(let i = 0; i < pathEnv.length; i++){
                const ppRaw = pathEnv[i];
                const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
                const pCmd = path.join(pathPart, cmd);
                const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
                for(let j = 0; j < pathExt.length; j++){
                    const cur = p + pathExt[j];
                    try {
                        const is = isexe.sync(cur, {
                            pathExt: pathExtExe
                        });
                        if (is) {
                            if (!opt.all) return cur;
                            found.push(cur);
                        }
                    } catch (ex) {}
                }
            }
            if (opt.all && found.length) return found;
            if (opt.nothrow) return null;
            throw getNotFoundError(cmd);
        };
        module.exports = which;
        which.sync = whichSync;
    },
    "./src/lib/loadEnv.ts": function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: ()=>loadEnv
        });
        var execa__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/execa/index.js");
        async function loadEnv(keys) {
            const { stdout } = await (0, execa__WEBPACK_IMPORTED_MODULE_0__.r)("eas", [
                "env:exec",
                "development",
                `node -e "console.log({${keys.map((key)=>[
                        key,
                        `process.env.${key}`
                    ].join(":")).join(",")}})"`
            ], {
                stdio: "pipe"
            });
            const env = stdout.split("\n").filter((line)=>line.startsWith("[stdout]")).map((e)=>e.replaceAll("[stdout]", "")).join("");
            const parsedEnv = eval("(" + env + ")");
            return parsedEnv;
        }
    },
    assert: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_assert__;
    },
    buffer: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_buffer__;
    },
    child_process: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_child_process__;
    },
    crypto: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_crypto__;
    },
    events: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_events__;
    },
    fs: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_fs__;
    },
    "fs/promises": function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_fs_promises_400951f8__;
    },
    os: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_os__;
    },
    path: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_path__;
    },
    stream: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_stream__;
    },
    tty: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_tty__;
    },
    util: function(module) {
        module.exports = __WEBPACK_EXTERNAL_MODULE_util__;
    },
    "./node_modules/execa/index.js": function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            r: ()=>execa
        });
        function isPlainObject(value1) {
            if ('object' != typeof value1 || null === value1) return false;
            const prototype = Object.getPrototypeOf(value1);
            return (null === prototype || prototype === Object.prototype || null === Object.getPrototypeOf(prototype)) && !(Symbol.toStringTag in value1) && !(Symbol.iterator in value1);
        }
        const safeNormalizeFileUrl = (file, name)=>{
            const fileString = normalizeFileUrl(normalizeDenoExecPath(file));
            if ('string' != typeof fileString) throw new TypeError(`${name} must be a string or a file URL: ${fileString}.`);
            return fileString;
        };
        const normalizeDenoExecPath = (file)=>isDenoExecPath(file) ? file.toString() : file;
        const isDenoExecPath = (file)=>'string' != typeof file && file && Object.getPrototypeOf(file) === String.prototype;
        const normalizeFileUrl = (file)=>file instanceof URL ? (0, __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__.fileURLToPath)(file) : file;
        const normalizeParameters = (rawFile, rawArguments = [], rawOptions = {})=>{
            const filePath = safeNormalizeFileUrl(rawFile, 'First argument');
            const [commandArguments, options] = isPlainObject(rawArguments) ? [
                [],
                rawArguments
            ] : [
                rawArguments,
                rawOptions
            ];
            if (!Array.isArray(commandArguments)) throw new TypeError(`Second argument must be either an array of arguments or an options object: ${commandArguments}`);
            if (commandArguments.some((commandArgument)=>'object' == typeof commandArgument && null !== commandArgument)) throw new TypeError(`Second argument must be an array of strings: ${commandArguments}`);
            const normalizedArguments = commandArguments.map(String);
            const nullByteArgument = normalizedArguments.find((normalizedArgument)=>normalizedArgument.includes('\0'));
            if (void 0 !== nullByteArgument) throw new TypeError(`Arguments cannot contain null bytes ("\\0"): ${nullByteArgument}`);
            if (!isPlainObject(options)) throw new TypeError(`Last argument must be an options object: ${options}`);
            return [
                filePath,
                normalizedArguments,
                options
            ];
        };
        const { toString: objectToString } = Object.prototype;
        const isArrayBuffer = (value1)=>'[object ArrayBuffer]' === objectToString.call(value1);
        const isUint8Array = (value1)=>'[object Uint8Array]' === objectToString.call(value1);
        const bufferToUint8Array = (buffer)=>new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        const uint_array_textEncoder = new TextEncoder();
        const stringToUint8Array = (string)=>uint_array_textEncoder.encode(string);
        const uint_array_textDecoder = new TextDecoder();
        const uint8ArrayToString = (uint8Array)=>uint_array_textDecoder.decode(uint8Array);
        const joinToString = (uint8ArraysOrStrings, encoding)=>{
            const strings = uint8ArraysToStrings(uint8ArraysOrStrings, encoding);
            return strings.join('');
        };
        const uint8ArraysToStrings = (uint8ArraysOrStrings, encoding)=>{
            if ('utf8' === encoding && uint8ArraysOrStrings.every((uint8ArrayOrString)=>'string' == typeof uint8ArrayOrString)) return uint8ArraysOrStrings;
            const decoder = new __WEBPACK_EXTERNAL_MODULE_node_string_decoder_28f74b45__.StringDecoder(encoding);
            const strings = uint8ArraysOrStrings.map((uint8ArrayOrString)=>'string' == typeof uint8ArrayOrString ? stringToUint8Array(uint8ArrayOrString) : uint8ArrayOrString).map((uint8Array)=>decoder.write(uint8Array));
            const finalString = decoder.end();
            return '' === finalString ? strings : [
                ...strings,
                finalString
            ];
        };
        const joinToUint8Array = (uint8ArraysOrStrings)=>{
            if (1 === uint8ArraysOrStrings.length && isUint8Array(uint8ArraysOrStrings[0])) return uint8ArraysOrStrings[0];
            return concatUint8Arrays(stringsToUint8Arrays(uint8ArraysOrStrings));
        };
        const stringsToUint8Arrays = (uint8ArraysOrStrings)=>uint8ArraysOrStrings.map((uint8ArrayOrString)=>'string' == typeof uint8ArrayOrString ? stringToUint8Array(uint8ArrayOrString) : uint8ArrayOrString);
        const concatUint8Arrays = (uint8Arrays)=>{
            const result = new Uint8Array(getJoinLength(uint8Arrays));
            let index = 0;
            for (const uint8Array of uint8Arrays){
                result.set(uint8Array, index);
                index += uint8Array.length;
            }
            return result;
        };
        const getJoinLength = (uint8Arrays)=>{
            let joinLength = 0;
            for (const uint8Array of uint8Arrays)joinLength += uint8Array.length;
            return joinLength;
        };
        const isTemplateString = (templates)=>Array.isArray(templates) && Array.isArray(templates.raw);
        const parseTemplates = (templates, expressions)=>{
            let tokens = [];
            for (const [index, template] of templates.entries())tokens = parseTemplate({
                templates,
                expressions,
                tokens,
                index,
                template
            });
            if (0 === tokens.length) throw new TypeError("Template script must not be empty");
            const [file, ...commandArguments] = tokens;
            return [
                file,
                commandArguments,
                {}
            ];
        };
        const parseTemplate = ({ templates, expressions, tokens, index, template })=>{
            if (void 0 === template) throw new TypeError(`Invalid backslash sequence: ${templates.raw[index]}`);
            const { nextTokens, leadingWhitespaces, trailingWhitespaces } = splitByWhitespaces(template, templates.raw[index]);
            const newTokens = concatTokens(tokens, nextTokens, leadingWhitespaces);
            if (index === expressions.length) return newTokens;
            const expression = expressions[index];
            const expressionTokens = Array.isArray(expression) ? expression.map((expression)=>parseExpression(expression)) : [
                parseExpression(expression)
            ];
            return concatTokens(newTokens, expressionTokens, trailingWhitespaces);
        };
        const splitByWhitespaces = (template, rawTemplate)=>{
            if (0 === rawTemplate.length) return {
                nextTokens: [],
                leadingWhitespaces: false,
                trailingWhitespaces: false
            };
            const nextTokens = [];
            let templateStart = 0;
            const leadingWhitespaces = DELIMITERS.has(rawTemplate[0]);
            for(let templateIndex = 0, rawIndex = 0; templateIndex < template.length; templateIndex += 1, rawIndex += 1){
                const rawCharacter = rawTemplate[rawIndex];
                if (DELIMITERS.has(rawCharacter)) {
                    if (templateStart !== templateIndex) nextTokens.push(template.slice(templateStart, templateIndex));
                    templateStart = templateIndex + 1;
                } else if ('\\' === rawCharacter) {
                    const nextRawCharacter = rawTemplate[rawIndex + 1];
                    if ('\n' === nextRawCharacter) {
                        templateIndex -= 1;
                        rawIndex += 1;
                    } else if ('u' === nextRawCharacter && '{' === rawTemplate[rawIndex + 2]) rawIndex = rawTemplate.indexOf('}', rawIndex + 3);
                    else rawIndex += ESCAPE_LENGTH[nextRawCharacter] ?? 1;
                }
            }
            const trailingWhitespaces = templateStart === template.length;
            if (!trailingWhitespaces) nextTokens.push(template.slice(templateStart));
            return {
                nextTokens,
                leadingWhitespaces,
                trailingWhitespaces
            };
        };
        const DELIMITERS = new Set([
            ' ',
            '\t',
            '\r',
            '\n'
        ]);
        const ESCAPE_LENGTH = {
            x: 3,
            u: 5
        };
        const concatTokens = (tokens, nextTokens, isSeparated)=>isSeparated || 0 === tokens.length || 0 === nextTokens.length ? [
                ...tokens,
                ...nextTokens
            ] : [
                ...tokens.slice(0, -1),
                `${tokens.at(-1)}${nextTokens[0]}`,
                ...nextTokens.slice(1)
            ];
        const parseExpression = (expression)=>{
            const typeOfExpression = typeof expression;
            if ('string' === typeOfExpression) return expression;
            if ('number' === typeOfExpression) return String(expression);
            if (isPlainObject(expression) && ('stdout' in expression || 'isMaxBuffer' in expression)) return getSubprocessResult(expression);
            if (expression instanceof __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.ChildProcess || '[object Promise]' === Object.prototype.toString.call(expression)) throw new TypeError('Unexpected subprocess in template expression. Please use ${await subprocess} instead of ${subprocess}.');
            throw new TypeError(`Unexpected "${typeOfExpression}" in template expression`);
        };
        const getSubprocessResult = ({ stdout })=>{
            if ('string' == typeof stdout) return stdout;
            if (isUint8Array(stdout)) return uint8ArrayToString(stdout);
            if (void 0 === stdout) throw new TypeError('Missing result.stdout in template expression. This is probably due to the previous subprocess\' "stdout" option.');
            throw new TypeError(`Unexpected "${typeof stdout}" stdout in template expression`);
        };
        const isStandardStream = (stream)=>STANDARD_STREAMS.includes(stream);
        const STANDARD_STREAMS = [
            __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].stdin,
            __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].stdout,
            __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].stderr
        ];
        const STANDARD_STREAMS_ALIASES = [
            'stdin',
            'stdout',
            'stderr'
        ];
        const getStreamName = (fdNumber)=>STANDARD_STREAMS_ALIASES[fdNumber] ?? `stdio[${fdNumber}]`;
        const normalizeFdSpecificOptions = (options)=>{
            const optionsCopy = {
                ...options
            };
            for (const optionName of FD_SPECIFIC_OPTIONS)optionsCopy[optionName] = normalizeFdSpecificOption(options, optionName);
            return optionsCopy;
        };
        const normalizeFdSpecificOption = (options, optionName)=>{
            const optionBaseArray = Array.from({
                length: getStdioLength(options) + 1
            });
            const optionArray = normalizeFdSpecificValue(options[optionName], optionBaseArray, optionName);
            return addDefaultValue(optionArray, optionName);
        };
        const getStdioLength = ({ stdio })=>Array.isArray(stdio) ? Math.max(stdio.length, STANDARD_STREAMS_ALIASES.length) : STANDARD_STREAMS_ALIASES.length;
        const normalizeFdSpecificValue = (optionValue, optionArray, optionName)=>isPlainObject(optionValue) ? normalizeOptionObject(optionValue, optionArray, optionName) : optionArray.fill(optionValue);
        const normalizeOptionObject = (optionValue, optionArray, optionName)=>{
            for (const fdName of Object.keys(optionValue).sort(compareFdName))for (const fdNumber of parseFdName(fdName, optionName, optionArray))optionArray[fdNumber] = optionValue[fdName];
            return optionArray;
        };
        const compareFdName = (fdNameA, fdNameB)=>getFdNameOrder(fdNameA) < getFdNameOrder(fdNameB) ? 1 : -1;
        const getFdNameOrder = (fdName)=>{
            if ('stdout' === fdName || 'stderr' === fdName) return 0;
            return 'all' === fdName ? 2 : 1;
        };
        const parseFdName = (fdName, optionName, optionArray)=>{
            if ('ipc' === fdName) return [
                optionArray.length - 1
            ];
            const fdNumber = parseFd(fdName);
            if (void 0 === fdNumber || 0 === fdNumber) throw new TypeError(`"${optionName}.${fdName}" is invalid.
It must be "${optionName}.stdout", "${optionName}.stderr", "${optionName}.all", "${optionName}.ipc", or "${optionName}.fd3", "${optionName}.fd4" (and so on).`);
            if (fdNumber >= optionArray.length) throw new TypeError(`"${optionName}.${fdName}" is invalid: that file descriptor does not exist.
Please set the "stdio" option to ensure that file descriptor exists.`);
            return 'all' === fdNumber ? [
                1,
                2
            ] : [
                fdNumber
            ];
        };
        const parseFd = (fdName)=>{
            if ('all' === fdName) return fdName;
            if (STANDARD_STREAMS_ALIASES.includes(fdName)) return STANDARD_STREAMS_ALIASES.indexOf(fdName);
            const regexpResult = FD_REGEXP.exec(fdName);
            if (null !== regexpResult) return Number(regexpResult[1]);
        };
        const FD_REGEXP = /^fd(\d+)$/;
        const addDefaultValue = (optionArray, optionName)=>optionArray.map((optionValue)=>void 0 === optionValue ? DEFAULT_OPTIONS[optionName] : optionValue);
        const verboseDefault = (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.debuglog)('execa').enabled ? 'full' : 'none';
        const DEFAULT_OPTIONS = {
            lines: false,
            buffer: true,
            maxBuffer: 100000000,
            verbose: verboseDefault,
            stripFinalNewline: true
        };
        const FD_SPECIFIC_OPTIONS = [
            'lines',
            'buffer',
            'maxBuffer',
            'verbose',
            'stripFinalNewline'
        ];
        const getFdSpecificValue = (optionArray, fdNumber)=>'ipc' === fdNumber ? optionArray.at(-1) : optionArray[fdNumber];
        const values_isVerbose = ({ verbose }, fdNumber)=>'none' !== getFdVerbose(verbose, fdNumber);
        const isFullVerbose = ({ verbose }, fdNumber)=>![
                'none',
                'short'
            ].includes(getFdVerbose(verbose, fdNumber));
        const getVerboseFunction = ({ verbose }, fdNumber)=>{
            const fdVerbose = getFdVerbose(verbose, fdNumber);
            return isVerboseFunction(fdVerbose) ? fdVerbose : void 0;
        };
        const getFdVerbose = (verbose, fdNumber)=>void 0 === fdNumber ? getFdGenericVerbose(verbose) : getFdSpecificValue(verbose, fdNumber);
        const getFdGenericVerbose = (verbose)=>verbose.find((fdVerbose)=>isVerboseFunction(fdVerbose)) ?? VERBOSE_VALUES.findLast((fdVerbose)=>verbose.includes(fdVerbose));
        const isVerboseFunction = (fdVerbose)=>'function' == typeof fdVerbose;
        const VERBOSE_VALUES = [
            'none',
            'short',
            'full'
        ];
        const joinCommand = (filePath, rawArguments)=>{
            const fileAndArguments = [
                filePath,
                ...rawArguments
            ];
            const command = fileAndArguments.join(' ');
            const escapedCommand = fileAndArguments.map((fileAndArgument)=>quoteString(escapeControlCharacters(fileAndArgument))).join(' ');
            return {
                command,
                escapedCommand
            };
        };
        const escapeLines = (lines)=>(0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.stripVTControlCharacters)(lines).split('\n').map((line)=>escapeControlCharacters(line)).join('\n');
        const escapeControlCharacters = (line)=>line.replaceAll(SPECIAL_CHAR_REGEXP, (character)=>escapeControlCharacter(character));
        const escapeControlCharacter = (character)=>{
            const commonEscape = COMMON_ESCAPES[character];
            if (void 0 !== commonEscape) return commonEscape;
            const codepoint = character.codePointAt(0);
            const codepointHex = codepoint.toString(16);
            return codepoint <= ASTRAL_START ? `\\u${codepointHex.padStart(4, '0')}` : `\\U${codepointHex}`;
        };
        const getSpecialCharRegExp = ()=>{
            try {
                return new RegExp('\\p{Separator}|\\p{Other}', 'gu');
            } catch  {
                return /[\s\u0000-\u001F\u007F-\u009F\u00AD]/g;
            }
        };
        const SPECIAL_CHAR_REGEXP = getSpecialCharRegExp();
        const COMMON_ESCAPES = {
            ' ': ' ',
            '\b': '\\b',
            '\f': '\\f',
            '\n': '\\n',
            '\r': '\\r',
            '\t': '\\t'
        };
        const ASTRAL_START = 65535;
        const quoteString = (escapedArgument)=>{
            if (NO_ESCAPE_REGEXP.test(escapedArgument)) return escapedArgument;
            return 'win32' === __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__.platform ? `"${escapedArgument.replaceAll('"', '""')}"` : `'${escapedArgument.replaceAll('\'', '\'\\\'\'')}'`;
        };
        const NO_ESCAPE_REGEXP = /^[\w./-]+$/;
        function isUnicodeSupported() {
            const { env } = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"];
            const { TERM, TERM_PROGRAM } = env;
            if ('win32' !== __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].platform) return 'linux' !== TERM;
            return Boolean(env.WT_SESSION) || Boolean(env.TERMINUS_SUBLIME) || '{cmd::Cmder}' === env.ConEmuTask || 'Terminus-Sublime' === TERM_PROGRAM || 'vscode' === TERM_PROGRAM || 'xterm-256color' === TERM || 'alacritty' === TERM || 'rxvt-unicode' === TERM || 'rxvt-unicode-256color' === TERM || 'JetBrains-JediTerm' === env.TERMINAL_EMULATOR;
        }
        const common = {
            circleQuestionMark: '(?)',
            questionMarkPrefix: '(?)',
            square: '█',
            squareDarkShade: '▓',
            squareMediumShade: '▒',
            squareLightShade: '░',
            squareTop: '▀',
            squareBottom: '▄',
            squareLeft: '▌',
            squareRight: '▐',
            squareCenter: '■',
            bullet: '●',
            dot: '․',
            ellipsis: '…',
            pointerSmall: '›',
            triangleUp: '▲',
            triangleUpSmall: '▴',
            triangleDown: '▼',
            triangleDownSmall: '▾',
            triangleLeftSmall: '◂',
            triangleRightSmall: '▸',
            home: '⌂',
            heart: '♥',
            musicNote: '♪',
            musicNoteBeamed: '♫',
            arrowUp: '↑',
            arrowDown: '↓',
            arrowLeft: '←',
            arrowRight: '→',
            arrowLeftRight: '↔',
            arrowUpDown: '↕',
            almostEqual: '≈',
            notEqual: '≠',
            lessOrEqual: '≤',
            greaterOrEqual: '≥',
            identical: '≡',
            infinity: '∞',
            subscriptZero: '₀',
            subscriptOne: '₁',
            subscriptTwo: '₂',
            subscriptThree: '₃',
            subscriptFour: '₄',
            subscriptFive: '₅',
            subscriptSix: '₆',
            subscriptSeven: '₇',
            subscriptEight: '₈',
            subscriptNine: '₉',
            oneHalf: '½',
            oneThird: '⅓',
            oneQuarter: '¼',
            oneFifth: '⅕',
            oneSixth: '⅙',
            oneEighth: '⅛',
            twoThirds: '⅔',
            twoFifths: '⅖',
            threeQuarters: '¾',
            threeFifths: '⅗',
            threeEighths: '⅜',
            fourFifths: '⅘',
            fiveSixths: '⅚',
            fiveEighths: '⅝',
            sevenEighths: '⅞',
            line: '─',
            lineBold: '━',
            lineDouble: '═',
            lineDashed0: '┄',
            lineDashed1: '┅',
            lineDashed2: '┈',
            lineDashed3: '┉',
            lineDashed4: '╌',
            lineDashed5: '╍',
            lineDashed6: '╴',
            lineDashed7: '╶',
            lineDashed8: '╸',
            lineDashed9: '╺',
            lineDashed10: '╼',
            lineDashed11: '╾',
            lineDashed12: '−',
            lineDashed13: '–',
            lineDashed14: '‐',
            lineDashed15: '⁃',
            lineVertical: '│',
            lineVerticalBold: '┃',
            lineVerticalDouble: '║',
            lineVerticalDashed0: '┆',
            lineVerticalDashed1: '┇',
            lineVerticalDashed2: '┊',
            lineVerticalDashed3: '┋',
            lineVerticalDashed4: '╎',
            lineVerticalDashed5: '╏',
            lineVerticalDashed6: '╵',
            lineVerticalDashed7: '╷',
            lineVerticalDashed8: '╹',
            lineVerticalDashed9: '╻',
            lineVerticalDashed10: '╽',
            lineVerticalDashed11: '╿',
            lineDownLeft: '┐',
            lineDownLeftArc: '╮',
            lineDownBoldLeftBold: '┓',
            lineDownBoldLeft: '┒',
            lineDownLeftBold: '┑',
            lineDownDoubleLeftDouble: '╗',
            lineDownDoubleLeft: '╖',
            lineDownLeftDouble: '╕',
            lineDownRight: '┌',
            lineDownRightArc: '╭',
            lineDownBoldRightBold: '┏',
            lineDownBoldRight: '┎',
            lineDownRightBold: '┍',
            lineDownDoubleRightDouble: '╔',
            lineDownDoubleRight: '╓',
            lineDownRightDouble: '╒',
            lineUpLeft: '┘',
            lineUpLeftArc: '╯',
            lineUpBoldLeftBold: '┛',
            lineUpBoldLeft: '┚',
            lineUpLeftBold: '┙',
            lineUpDoubleLeftDouble: '╝',
            lineUpDoubleLeft: '╜',
            lineUpLeftDouble: '╛',
            lineUpRight: '└',
            lineUpRightArc: '╰',
            lineUpBoldRightBold: '┗',
            lineUpBoldRight: '┖',
            lineUpRightBold: '┕',
            lineUpDoubleRightDouble: '╚',
            lineUpDoubleRight: '╙',
            lineUpRightDouble: '╘',
            lineUpDownLeft: '┤',
            lineUpBoldDownBoldLeftBold: '┫',
            lineUpBoldDownBoldLeft: '┨',
            lineUpDownLeftBold: '┥',
            lineUpBoldDownLeftBold: '┩',
            lineUpDownBoldLeftBold: '┪',
            lineUpDownBoldLeft: '┧',
            lineUpBoldDownLeft: '┦',
            lineUpDoubleDownDoubleLeftDouble: '╣',
            lineUpDoubleDownDoubleLeft: '╢',
            lineUpDownLeftDouble: '╡',
            lineUpDownRight: '├',
            lineUpBoldDownBoldRightBold: '┣',
            lineUpBoldDownBoldRight: '┠',
            lineUpDownRightBold: '┝',
            lineUpBoldDownRightBold: '┡',
            lineUpDownBoldRightBold: '┢',
            lineUpDownBoldRight: '┟',
            lineUpBoldDownRight: '┞',
            lineUpDoubleDownDoubleRightDouble: '╠',
            lineUpDoubleDownDoubleRight: '╟',
            lineUpDownRightDouble: '╞',
            lineDownLeftRight: '┬',
            lineDownBoldLeftBoldRightBold: '┳',
            lineDownLeftBoldRightBold: '┯',
            lineDownBoldLeftRight: '┰',
            lineDownBoldLeftBoldRight: '┱',
            lineDownBoldLeftRightBold: '┲',
            lineDownLeftRightBold: '┮',
            lineDownLeftBoldRight: '┭',
            lineDownDoubleLeftDoubleRightDouble: '╦',
            lineDownDoubleLeftRight: '╥',
            lineDownLeftDoubleRightDouble: '╤',
            lineUpLeftRight: '┴',
            lineUpBoldLeftBoldRightBold: '┻',
            lineUpLeftBoldRightBold: '┷',
            lineUpBoldLeftRight: '┸',
            lineUpBoldLeftBoldRight: '┹',
            lineUpBoldLeftRightBold: '┺',
            lineUpLeftRightBold: '┶',
            lineUpLeftBoldRight: '┵',
            lineUpDoubleLeftDoubleRightDouble: '╩',
            lineUpDoubleLeftRight: '╨',
            lineUpLeftDoubleRightDouble: '╧',
            lineUpDownLeftRight: '┼',
            lineUpBoldDownBoldLeftBoldRightBold: '╋',
            lineUpDownBoldLeftBoldRightBold: '╈',
            lineUpBoldDownLeftBoldRightBold: '╇',
            lineUpBoldDownBoldLeftRightBold: '╊',
            lineUpBoldDownBoldLeftBoldRight: '╉',
            lineUpBoldDownLeftRight: '╀',
            lineUpDownBoldLeftRight: '╁',
            lineUpDownLeftBoldRight: '┽',
            lineUpDownLeftRightBold: '┾',
            lineUpBoldDownBoldLeftRight: '╂',
            lineUpDownLeftBoldRightBold: '┿',
            lineUpBoldDownLeftBoldRight: '╃',
            lineUpBoldDownLeftRightBold: '╄',
            lineUpDownBoldLeftBoldRight: '╅',
            lineUpDownBoldLeftRightBold: '╆',
            lineUpDoubleDownDoubleLeftDoubleRightDouble: '╬',
            lineUpDoubleDownDoubleLeftRight: '╫',
            lineUpDownLeftDoubleRightDouble: '╪',
            lineCross: '╳',
            lineBackslash: '╲',
            lineSlash: '╱'
        };
        const specialMainSymbols = {
            tick: '✔',
            info: 'ℹ',
            warning: '⚠',
            cross: '✘',
            squareSmall: '◻',
            squareSmallFilled: '◼',
            circle: '◯',
            circleFilled: '◉',
            circleDotted: '◌',
            circleDouble: '◎',
            circleCircle: 'ⓞ',
            circleCross: 'ⓧ',
            circlePipe: 'Ⓘ',
            radioOn: '◉',
            radioOff: '◯',
            checkboxOn: '☒',
            checkboxOff: '☐',
            checkboxCircleOn: 'ⓧ',
            checkboxCircleOff: 'Ⓘ',
            pointer: '❯',
            triangleUpOutline: '△',
            triangleLeft: '◀',
            triangleRight: '▶',
            lozenge: '◆',
            lozengeOutline: '◇',
            hamburger: '☰',
            smiley: '㋡',
            mustache: '෴',
            star: '★',
            play: '▶',
            nodejs: '⬢',
            oneSeventh: '⅐',
            oneNinth: '⅑',
            oneTenth: '⅒'
        };
        const specialFallbackSymbols = {
            tick: '√',
            info: 'i',
            warning: '‼',
            cross: '×',
            squareSmall: '□',
            squareSmallFilled: '■',
            circle: '( )',
            circleFilled: '(*)',
            circleDotted: '( )',
            circleDouble: '( )',
            circleCircle: '(○)',
            circleCross: '(×)',
            circlePipe: '(│)',
            radioOn: '(*)',
            radioOff: '( )',
            checkboxOn: '[×]',
            checkboxOff: '[ ]',
            checkboxCircleOn: '(×)',
            checkboxCircleOff: '( )',
            pointer: '>',
            triangleUpOutline: '∆',
            triangleLeft: '◄',
            triangleRight: '►',
            lozenge: '♦',
            lozengeOutline: '◊',
            hamburger: '≡',
            smiley: '☺',
            mustache: '┌─┐',
            star: '✶',
            play: '►',
            nodejs: '♦',
            oneSeventh: '1/7',
            oneNinth: '1/9',
            oneTenth: '1/10'
        };
        const mainSymbols = {
            ...common,
            ...specialMainSymbols
        };
        const fallbackSymbols = {
            ...common,
            ...specialFallbackSymbols
        };
        const shouldUseMain = isUnicodeSupported();
        const figures = shouldUseMain ? mainSymbols : fallbackSymbols;
        const node_modules_figures = figures;
        Object.entries(specialMainSymbols);
        const hasColors = __WEBPACK_EXTERNAL_MODULE_node_tty_c64aab7e__["default"]?.WriteStream?.prototype?.hasColors?.() ?? false;
        const format = (open, close)=>{
            if (!hasColors) return (input)=>input;
            const openCode = `\u001B[${open}m`;
            const closeCode = `\u001B[${close}m`;
            return (input)=>{
                const string = input + '';
                let index = string.indexOf(closeCode);
                if (-1 === index) return openCode + string + closeCode;
                let result = openCode;
                let lastIndex = 0;
                while(-1 !== index){
                    result += string.slice(lastIndex, index) + openCode;
                    lastIndex = index + closeCode.length;
                    index = string.indexOf(closeCode, lastIndex);
                }
                result += string.slice(lastIndex) + closeCode;
                return result;
            };
        };
        format(0, 0);
        const bold = format(1, 22);
        format(2, 22);
        format(3, 23);
        format(4, 24);
        format(53, 55);
        format(7, 27);
        format(8, 28);
        format(9, 29);
        format(30, 39);
        format(31, 39);
        format(32, 39);
        format(33, 39);
        format(34, 39);
        format(35, 39);
        format(36, 39);
        format(37, 39);
        const gray = format(90, 39);
        format(40, 49);
        format(41, 49);
        format(42, 49);
        format(43, 49);
        format(44, 49);
        format(45, 49);
        format(46, 49);
        format(47, 49);
        format(100, 49);
        const redBright = format(91, 39);
        format(92, 39);
        const yellowBright = format(93, 39);
        format(94, 39);
        format(95, 39);
        format(96, 39);
        format(97, 39);
        format(101, 49);
        format(102, 49);
        format(103, 49);
        format(104, 49);
        format(105, 49);
        format(106, 49);
        format(107, 49);
        const defaultVerboseFunction = ({ type, message, timestamp, piped, commandId, result: { failed = false } = {}, options: { reject = true } })=>{
            const timestampString = serializeTimestamp(timestamp);
            const icon = ICONS[type]({
                failed,
                reject,
                piped
            });
            const color = COLORS[type]({
                reject
            });
            return `${gray(`[${timestampString}]`)} ${gray(`[${commandId}]`)} ${color(icon)} ${color(message)}`;
        };
        const serializeTimestamp = (timestamp)=>`${padField(timestamp.getHours(), 2)}:${padField(timestamp.getMinutes(), 2)}:${padField(timestamp.getSeconds(), 2)}.${padField(timestamp.getMilliseconds(), 3)}`;
        const padField = (field, padding)=>String(field).padStart(padding, '0');
        const getFinalIcon = ({ failed, reject })=>{
            if (!failed) return node_modules_figures.tick;
            return reject ? node_modules_figures.cross : node_modules_figures.warning;
        };
        const ICONS = {
            command: ({ piped })=>piped ? '|' : '$',
            output: ()=>' ',
            ipc: ()=>'*',
            error: getFinalIcon,
            duration: getFinalIcon
        };
        const identity = (string)=>string;
        const COLORS = {
            command: ()=>bold,
            output: ()=>identity,
            ipc: ()=>identity,
            error: ({ reject })=>reject ? redBright : yellowBright,
            duration: ()=>gray
        };
        const applyVerboseOnLines = (printedLines, verboseInfo, fdNumber)=>{
            const verboseFunction = getVerboseFunction(verboseInfo, fdNumber);
            return printedLines.map(({ verboseLine, verboseObject })=>applyVerboseFunction(verboseLine, verboseObject, verboseFunction)).filter((printedLine)=>void 0 !== printedLine).map((printedLine)=>appendNewline(printedLine)).join('');
        };
        const applyVerboseFunction = (verboseLine, verboseObject, verboseFunction)=>{
            if (void 0 === verboseFunction) return verboseLine;
            const printedLine = verboseFunction(verboseLine, verboseObject);
            if ('string' == typeof printedLine) return printedLine;
        };
        const appendNewline = (printedLine)=>printedLine.endsWith('\n') ? printedLine : `${printedLine}\n`;
        const verboseLog = ({ type, verboseMessage, fdNumber, verboseInfo, result })=>{
            const verboseObject = getVerboseObject({
                type,
                result,
                verboseInfo
            });
            const printedLines = getPrintedLines(verboseMessage, verboseObject);
            const finalLines = applyVerboseOnLines(printedLines, verboseInfo, fdNumber);
            if ('' !== finalLines) console.warn(finalLines.slice(0, -1));
        };
        const getVerboseObject = ({ type, result, verboseInfo: { escapedCommand, commandId, rawOptions: { piped = false, ...options } } })=>({
                type,
                escapedCommand,
                commandId: `${commandId}`,
                timestamp: new Date(),
                piped,
                result,
                options
            });
        const getPrintedLines = (verboseMessage, verboseObject)=>verboseMessage.split('\n').map((message)=>getPrintedLine({
                    ...verboseObject,
                    message
                }));
        const getPrintedLine = (verboseObject)=>{
            const verboseLine = defaultVerboseFunction(verboseObject);
            return {
                verboseLine,
                verboseObject
            };
        };
        const serializeVerboseMessage = (message)=>{
            const messageString = 'string' == typeof message ? message : (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.inspect)(message);
            const escapedMessage = escapeLines(messageString);
            return escapedMessage.replaceAll('\t', ' '.repeat(TAB_SIZE));
        };
        const TAB_SIZE = 2;
        const logCommand = (escapedCommand, verboseInfo)=>{
            if (!values_isVerbose(verboseInfo)) return;
            verboseLog({
                type: 'command',
                verboseMessage: escapedCommand,
                verboseInfo
            });
        };
        const getVerboseInfo = (verbose, escapedCommand, rawOptions)=>{
            validateVerbose(verbose);
            const commandId = getCommandId(verbose);
            return {
                verbose,
                escapedCommand,
                commandId,
                rawOptions
            };
        };
        const getCommandId = (verbose)=>values_isVerbose({
                verbose
            }) ? COMMAND_ID++ : void 0;
        let COMMAND_ID = 0n;
        const validateVerbose = (verbose)=>{
            for (const fdVerbose of verbose){
                if (false === fdVerbose) throw new TypeError('The "verbose: false" option was renamed to "verbose: \'none\'".');
                if (true === fdVerbose) throw new TypeError('The "verbose: true" option was renamed to "verbose: \'short\'".');
                if (!VERBOSE_VALUES.includes(fdVerbose) && !isVerboseFunction(fdVerbose)) {
                    const allowedValues = VERBOSE_VALUES.map((allowedValue)=>`'${allowedValue}'`).join(', ');
                    throw new TypeError(`The "verbose" option must not be ${fdVerbose}. Allowed values are: ${allowedValues} or a function.`);
                }
            }
        };
        const getStartTime = ()=>__WEBPACK_EXTERNAL_MODULE_node_process_786449bf__.hrtime.bigint();
        const getDurationMs = (startTime)=>Number(__WEBPACK_EXTERNAL_MODULE_node_process_786449bf__.hrtime.bigint() - startTime) / 1e6;
        const handleCommand = (filePath, rawArguments, rawOptions)=>{
            const startTime = getStartTime();
            const { command, escapedCommand } = joinCommand(filePath, rawArguments);
            const verbose = normalizeFdSpecificOption(rawOptions, 'verbose');
            const verboseInfo = getVerboseInfo(verbose, escapedCommand, {
                ...rawOptions
            });
            logCommand(escapedCommand, verboseInfo);
            return {
                command,
                escapedCommand,
                startTime,
                verboseInfo
            };
        };
        var cross_spawn = __webpack_require__("../../node_modules/cross-spawn/index.js");
        function pathKey(options = {}) {
            const { env = process.env, platform = process.platform } = options;
            if ('win32' !== platform) return 'PATH';
            return Object.keys(env).reverse().find((key)=>'PATH' === key.toUpperCase()) || 'Path';
        }
        (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.promisify)(__WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.execFile);
        function toPath(urlOrPath) {
            return urlOrPath instanceof URL ? (0, __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__.fileURLToPath)(urlOrPath) : urlOrPath;
        }
        function traversePathUp(startPath) {
            return {
                *[Symbol.iterator] () {
                    let currentPath = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(toPath(startPath));
                    let previousPath;
                    while(previousPath !== currentPath){
                        yield currentPath;
                        previousPath = currentPath;
                        currentPath = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(currentPath, '..');
                    }
                }
            };
        }
        const npmRunPath = ({ cwd = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].cwd(), path: pathOption = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].env[pathKey()], preferLocal = true, execPath = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].execPath, addExecPath = true } = {})=>{
            const cwdPath = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(toPath(cwd));
            const result = [];
            const pathParts = pathOption.split(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].delimiter);
            if (preferLocal) applyPreferLocal(result, pathParts, cwdPath);
            if (addExecPath) applyExecPath(result, pathParts, execPath, cwdPath);
            return '' === pathOption || pathOption === __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].delimiter ? `${result.join(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].delimiter)}${pathOption}` : [
                ...result,
                pathOption
            ].join(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].delimiter);
        };
        const applyPreferLocal = (result, pathParts, cwdPath)=>{
            for (const directory of traversePathUp(cwdPath)){
                const pathPart = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].join(directory, 'node_modules/.bin');
                if (!pathParts.includes(pathPart)) result.push(pathPart);
            }
        };
        const applyExecPath = (result, pathParts, execPath, cwdPath)=>{
            const pathPart = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(cwdPath, toPath(execPath), '..');
            if (!pathParts.includes(pathPart)) result.push(pathPart);
        };
        const npmRunPathEnv = ({ env = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].env, ...options } = {})=>{
            env = {
                ...env
            };
            const pathName = pathKey({
                env
            });
            options.path = env[pathName];
            env[pathName] = npmRunPath(options);
            return env;
        };
        const getFinalError = (originalError, message, isSync)=>{
            const ErrorClass = isSync ? ExecaSyncError : ExecaError;
            const options = originalError instanceof DiscardedError ? {} : {
                cause: originalError
            };
            return new ErrorClass(message, options);
        };
        class DiscardedError extends Error {
        }
        const setErrorName = (ErrorClass, value1)=>{
            Object.defineProperty(ErrorClass.prototype, 'name', {
                value: value1,
                writable: true,
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ErrorClass.prototype, execaErrorSymbol, {
                value: true,
                writable: false,
                enumerable: false,
                configurable: false
            });
        };
        const isExecaError = (error)=>isErrorInstance(error) && execaErrorSymbol in error;
        const execaErrorSymbol = Symbol('isExecaError');
        const isErrorInstance = (value1)=>'[object Error]' === Object.prototype.toString.call(value1);
        class ExecaError extends Error {
        }
        setErrorName(ExecaError, ExecaError.name);
        class ExecaSyncError extends Error {
        }
        setErrorName(ExecaSyncError, ExecaSyncError.name);
        const getRealtimeSignals = ()=>{
            const length = SIGRTMAX - SIGRTMIN + 1;
            return Array.from({
                length
            }, getRealtimeSignal);
        };
        const getRealtimeSignal = (value1, index)=>({
                name: `SIGRT${index + 1}`,
                number: SIGRTMIN + index,
                action: "terminate",
                description: "Application-specific signal (realtime)",
                standard: "posix"
            });
        const SIGRTMIN = 34;
        const SIGRTMAX = 64;
        const SIGNALS = [
            {
                name: "SIGHUP",
                number: 1,
                action: "terminate",
                description: "Terminal closed",
                standard: "posix"
            },
            {
                name: "SIGINT",
                number: 2,
                action: "terminate",
                description: "User interruption with CTRL-C",
                standard: "ansi"
            },
            {
                name: "SIGQUIT",
                number: 3,
                action: "core",
                description: "User interruption with CTRL-\\",
                standard: "posix"
            },
            {
                name: "SIGILL",
                number: 4,
                action: "core",
                description: "Invalid machine instruction",
                standard: "ansi"
            },
            {
                name: "SIGTRAP",
                number: 5,
                action: "core",
                description: "Debugger breakpoint",
                standard: "posix"
            },
            {
                name: "SIGABRT",
                number: 6,
                action: "core",
                description: "Aborted",
                standard: "ansi"
            },
            {
                name: "SIGIOT",
                number: 6,
                action: "core",
                description: "Aborted",
                standard: "bsd"
            },
            {
                name: "SIGBUS",
                number: 7,
                action: "core",
                description: "Bus error due to misaligned, non-existing address or paging error",
                standard: "bsd"
            },
            {
                name: "SIGEMT",
                number: 7,
                action: "terminate",
                description: "Command should be emulated but is not implemented",
                standard: "other"
            },
            {
                name: "SIGFPE",
                number: 8,
                action: "core",
                description: "Floating point arithmetic error",
                standard: "ansi"
            },
            {
                name: "SIGKILL",
                number: 9,
                action: "terminate",
                description: "Forced termination",
                standard: "posix",
                forced: true
            },
            {
                name: "SIGUSR1",
                number: 10,
                action: "terminate",
                description: "Application-specific signal",
                standard: "posix"
            },
            {
                name: "SIGSEGV",
                number: 11,
                action: "core",
                description: "Segmentation fault",
                standard: "ansi"
            },
            {
                name: "SIGUSR2",
                number: 12,
                action: "terminate",
                description: "Application-specific signal",
                standard: "posix"
            },
            {
                name: "SIGPIPE",
                number: 13,
                action: "terminate",
                description: "Broken pipe or socket",
                standard: "posix"
            },
            {
                name: "SIGALRM",
                number: 14,
                action: "terminate",
                description: "Timeout or timer",
                standard: "posix"
            },
            {
                name: "SIGTERM",
                number: 15,
                action: "terminate",
                description: "Termination",
                standard: "ansi"
            },
            {
                name: "SIGSTKFLT",
                number: 16,
                action: "terminate",
                description: "Stack is empty or overflowed",
                standard: "other"
            },
            {
                name: "SIGCHLD",
                number: 17,
                action: "ignore",
                description: "Child process terminated, paused or unpaused",
                standard: "posix"
            },
            {
                name: "SIGCLD",
                number: 17,
                action: "ignore",
                description: "Child process terminated, paused or unpaused",
                standard: "other"
            },
            {
                name: "SIGCONT",
                number: 18,
                action: "unpause",
                description: "Unpaused",
                standard: "posix",
                forced: true
            },
            {
                name: "SIGSTOP",
                number: 19,
                action: "pause",
                description: "Paused",
                standard: "posix",
                forced: true
            },
            {
                name: "SIGTSTP",
                number: 20,
                action: "pause",
                description: "Paused using CTRL-Z or \"suspend\"",
                standard: "posix"
            },
            {
                name: "SIGTTIN",
                number: 21,
                action: "pause",
                description: "Background process cannot read terminal input",
                standard: "posix"
            },
            {
                name: "SIGBREAK",
                number: 21,
                action: "terminate",
                description: "User interruption with CTRL-BREAK",
                standard: "other"
            },
            {
                name: "SIGTTOU",
                number: 22,
                action: "pause",
                description: "Background process cannot write to terminal output",
                standard: "posix"
            },
            {
                name: "SIGURG",
                number: 23,
                action: "ignore",
                description: "Socket received out-of-band data",
                standard: "bsd"
            },
            {
                name: "SIGXCPU",
                number: 24,
                action: "core",
                description: "Process timed out",
                standard: "bsd"
            },
            {
                name: "SIGXFSZ",
                number: 25,
                action: "core",
                description: "File too big",
                standard: "bsd"
            },
            {
                name: "SIGVTALRM",
                number: 26,
                action: "terminate",
                description: "Timeout or timer",
                standard: "bsd"
            },
            {
                name: "SIGPROF",
                number: 27,
                action: "terminate",
                description: "Timeout or timer",
                standard: "bsd"
            },
            {
                name: "SIGWINCH",
                number: 28,
                action: "ignore",
                description: "Terminal window size changed",
                standard: "bsd"
            },
            {
                name: "SIGIO",
                number: 29,
                action: "terminate",
                description: "I/O is available",
                standard: "other"
            },
            {
                name: "SIGPOLL",
                number: 29,
                action: "terminate",
                description: "Watched event",
                standard: "other"
            },
            {
                name: "SIGINFO",
                number: 29,
                action: "ignore",
                description: "Request for process information",
                standard: "other"
            },
            {
                name: "SIGPWR",
                number: 30,
                action: "terminate",
                description: "Device running out of power",
                standard: "systemv"
            },
            {
                name: "SIGSYS",
                number: 31,
                action: "core",
                description: "Invalid system call",
                standard: "other"
            },
            {
                name: "SIGUNUSED",
                number: 31,
                action: "terminate",
                description: "Invalid system call",
                standard: "other"
            }
        ];
        const getSignals = ()=>{
            const realtimeSignals = getRealtimeSignals();
            const signals = [
                ...SIGNALS,
                ...realtimeSignals
            ].map(normalizeSignal);
            return signals;
        };
        const normalizeSignal = ({ name, number: defaultNumber, description, action, forced = false, standard })=>{
            const { signals: { [name]: constantSignal } } = __WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants;
            const supported = void 0 !== constantSignal;
            const number = supported ? constantSignal : defaultNumber;
            return {
                name,
                number,
                description,
                supported,
                action,
                forced,
                standard
            };
        };
        const getSignalsByName = ()=>{
            const signals = getSignals();
            return Object.fromEntries(signals.map(getSignalByName));
        };
        const getSignalByName = ({ name, number, description, supported, action, forced, standard })=>[
                name,
                {
                    name,
                    number,
                    description,
                    supported,
                    action,
                    forced,
                    standard
                }
            ];
        const signalsByName = getSignalsByName();
        const getSignalsByNumber = ()=>{
            const signals = getSignals();
            const length = SIGRTMAX + 1;
            const signalsA = Array.from({
                length
            }, (value1, number)=>getSignalByNumber(number, signals));
            return Object.assign({}, ...signalsA);
        };
        const getSignalByNumber = (number, signals)=>{
            const signal = findSignalByNumber(number, signals);
            if (void 0 === signal) return {};
            const { name, description, supported, action, forced, standard } = signal;
            return {
                [number]: {
                    name,
                    number,
                    description,
                    supported,
                    action,
                    forced,
                    standard
                }
            };
        };
        const findSignalByNumber = (number, signals)=>{
            const signal = signals.find(({ name })=>__WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants.signals[name] === number);
            if (void 0 !== signal) return signal;
            return signals.find((signalA)=>signalA.number === number);
        };
        getSignalsByNumber();
        const normalizeKillSignal = (killSignal)=>{
            const optionName = 'option `killSignal`';
            if (0 === killSignal) throw new TypeError(`Invalid ${optionName}: 0 cannot be used.`);
            return signal_normalizeSignal(killSignal, optionName);
        };
        const normalizeSignalArgument = (signal)=>0 === signal ? signal : signal_normalizeSignal(signal, '`subprocess.kill()`\'s argument');
        const signal_normalizeSignal = (signalNameOrInteger, optionName)=>{
            if (Number.isInteger(signalNameOrInteger)) return normalizeSignalInteger(signalNameOrInteger, optionName);
            if ('string' == typeof signalNameOrInteger) return normalizeSignalName(signalNameOrInteger, optionName);
            throw new TypeError(`Invalid ${optionName} ${String(signalNameOrInteger)}: it must be a string or an integer.\n${getAvailableSignals()}`);
        };
        const normalizeSignalInteger = (signalInteger, optionName)=>{
            if (signalsIntegerToName.has(signalInteger)) return signalsIntegerToName.get(signalInteger);
            throw new TypeError(`Invalid ${optionName} ${signalInteger}: this signal integer does not exist.\n${getAvailableSignals()}`);
        };
        const getSignalsIntegerToName = ()=>new Map(Object.entries(__WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants.signals).reverse().map(([signalName, signalInteger])=>[
                    signalInteger,
                    signalName
                ]));
        const signalsIntegerToName = getSignalsIntegerToName();
        const normalizeSignalName = (signalName, optionName)=>{
            if (signalName in __WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants.signals) return signalName;
            if (signalName.toUpperCase() in __WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants.signals) throw new TypeError(`Invalid ${optionName} '${signalName}': please rename it to '${signalName.toUpperCase()}'.`);
            throw new TypeError(`Invalid ${optionName} '${signalName}': this signal name does not exist.\n${getAvailableSignals()}`);
        };
        const getAvailableSignals = ()=>`Available signal names: ${getAvailableSignalNames()}.
Available signal numbers: ${getAvailableSignalIntegers()}.`;
        const getAvailableSignalNames = ()=>Object.keys(__WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants.signals).sort().map((signalName)=>`'${signalName}'`).join(', ');
        const getAvailableSignalIntegers = ()=>[
                ...new Set(Object.values(__WEBPACK_EXTERNAL_MODULE_node_os_74b4b876__.constants.signals).sort((signalInteger, signalIntegerTwo)=>signalInteger - signalIntegerTwo))
            ].join(', ');
        const getSignalDescription = (signal)=>signalsByName[signal].description;
        const normalizeForceKillAfterDelay = (forceKillAfterDelay)=>{
            if (false === forceKillAfterDelay) return forceKillAfterDelay;
            if (true === forceKillAfterDelay) return DEFAULT_FORCE_KILL_TIMEOUT;
            if (!Number.isFinite(forceKillAfterDelay) || forceKillAfterDelay < 0) throw new TypeError(`Expected the \`forceKillAfterDelay\` option to be a non-negative integer, got \`${forceKillAfterDelay}\` (${typeof forceKillAfterDelay})`);
            return forceKillAfterDelay;
        };
        const DEFAULT_FORCE_KILL_TIMEOUT = 5000;
        const subprocessKill = ({ kill, options: { forceKillAfterDelay, killSignal }, onInternalError, context, controller }, signalOrError, errorArgument)=>{
            const { signal, error } = parseKillArguments(signalOrError, errorArgument, killSignal);
            emitKillError(error, onInternalError);
            const killResult = kill(signal);
            setKillTimeout({
                kill,
                signal,
                forceKillAfterDelay,
                killSignal,
                killResult,
                context,
                controller
            });
            return killResult;
        };
        const parseKillArguments = (signalOrError, errorArgument, killSignal)=>{
            const [signal = killSignal, error] = isErrorInstance(signalOrError) ? [
                void 0,
                signalOrError
            ] : [
                signalOrError,
                errorArgument
            ];
            if ('string' != typeof signal && !Number.isInteger(signal)) throw new TypeError(`The first argument must be an error instance or a signal name string/integer: ${String(signal)}`);
            if (void 0 !== error && !isErrorInstance(error)) throw new TypeError(`The second argument is optional. If specified, it must be an error instance: ${error}`);
            return {
                signal: normalizeSignalArgument(signal),
                error
            };
        };
        const emitKillError = (error, onInternalError)=>{
            if (void 0 !== error) onInternalError.reject(error);
        };
        const setKillTimeout = async ({ kill, signal, forceKillAfterDelay, killSignal, killResult, context, controller })=>{
            if (signal === killSignal && killResult) killOnTimeout({
                kill,
                forceKillAfterDelay,
                context,
                controllerSignal: controller.signal
            });
        };
        const killOnTimeout = async ({ kill, forceKillAfterDelay, context, controllerSignal })=>{
            if (false === forceKillAfterDelay) return;
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_timers_promises_aedbf14c__.setTimeout)(forceKillAfterDelay, void 0, {
                    signal: controllerSignal
                });
                if (kill('SIGKILL')) context.isForcefullyTerminated ??= true;
            } catch  {}
        };
        const onAbortedSignal = async (mainSignal, stopSignal)=>{
            if (!mainSignal.aborted) await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(mainSignal, 'abort', {
                signal: stopSignal
            });
        };
        const validateCancelSignal = ({ cancelSignal })=>{
            if (void 0 !== cancelSignal && '[object AbortSignal]' !== Object.prototype.toString.call(cancelSignal)) throw new Error(`The \`cancelSignal\` option must be an AbortSignal: ${String(cancelSignal)}`);
        };
        const throwOnCancel = ({ subprocess, cancelSignal, gracefulCancel, context, controller })=>void 0 === cancelSignal || gracefulCancel ? [] : [
                terminateOnCancel(subprocess, cancelSignal, context, controller)
            ];
        const terminateOnCancel = async (subprocess, cancelSignal, context, { signal })=>{
            await onAbortedSignal(cancelSignal, signal);
            context.terminationReason ??= 'cancel';
            subprocess.kill();
            throw cancelSignal.reason;
        };
        const validateIpcMethod = ({ methodName, isSubprocess, ipc, isConnected })=>{
            validateIpcOption(methodName, isSubprocess, ipc);
            validateConnection(methodName, isSubprocess, isConnected);
        };
        const validateIpcOption = (methodName, isSubprocess, ipc)=>{
            if (!ipc) throw new Error(`${getMethodName(methodName, isSubprocess)} can only be used if the \`ipc\` option is \`true\`.`);
        };
        const validateConnection = (methodName, isSubprocess, isConnected)=>{
            if (!isConnected) throw new Error(`${getMethodName(methodName, isSubprocess)} cannot be used: the ${getOtherProcessName(isSubprocess)} has already exited or disconnected.`);
        };
        const throwOnEarlyDisconnect = (isSubprocess)=>{
            throw new Error(`${getMethodName('getOneMessage', isSubprocess)} could not complete: the ${getOtherProcessName(isSubprocess)} exited or disconnected.`);
        };
        const throwOnStrictDeadlockError = (isSubprocess)=>{
            throw new Error(`${getMethodName('sendMessage', isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} is sending a message too, instead of listening to incoming messages.
This can be fixed by both sending a message and listening to incoming messages at the same time:

const [receivedMessage] = await Promise.all([
	${getMethodName('getOneMessage', isSubprocess)},
	${getMethodName('sendMessage', isSubprocess, 'message, {strict: true}')},
]);`);
        };
        const getStrictResponseError = (error, isSubprocess)=>new Error(`${getMethodName('sendMessage', isSubprocess)} failed when sending an acknowledgment response to the ${getOtherProcessName(isSubprocess)}.`, {
                cause: error
            });
        const throwOnMissingStrict = (isSubprocess)=>{
            throw new Error(`${getMethodName('sendMessage', isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} is not listening to incoming messages.`);
        };
        const throwOnStrictDisconnect = (isSubprocess)=>{
            throw new Error(`${getMethodName('sendMessage', isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} exited without listening to incoming messages.`);
        };
        const getAbortDisconnectError = ()=>new Error(`\`cancelSignal\` aborted: the ${getOtherProcessName(true)} disconnected.`);
        const throwOnMissingParent = ()=>{
            throw new Error('`getCancelSignal()` cannot be used without setting the `cancelSignal` subprocess option.');
        };
        const handleEpipeError = ({ error, methodName, isSubprocess })=>{
            if ('EPIPE' === error.code) throw new Error(`${getMethodName(methodName, isSubprocess)} cannot be used: the ${getOtherProcessName(isSubprocess)} is disconnecting.`, {
                cause: error
            });
        };
        const handleSerializationError = ({ error, methodName, isSubprocess, message })=>{
            if (isSerializationError(error)) throw new Error(`${getMethodName(methodName, isSubprocess)}'s argument type is invalid: the message cannot be serialized: ${String(message)}.`, {
                cause: error
            });
        };
        const isSerializationError = ({ code, message })=>SERIALIZATION_ERROR_CODES.has(code) || SERIALIZATION_ERROR_MESSAGES.some((serializationErrorMessage)=>message.includes(serializationErrorMessage));
        const SERIALIZATION_ERROR_CODES = new Set([
            'ERR_MISSING_ARGS',
            'ERR_INVALID_ARG_TYPE'
        ]);
        const SERIALIZATION_ERROR_MESSAGES = [
            'could not be cloned',
            'circular structure',
            'call stack size exceeded'
        ];
        const getMethodName = (methodName, isSubprocess, parameters = '')=>'cancelSignal' === methodName ? '`cancelSignal`\'s `controller.abort()`' : `${getNamespaceName(isSubprocess)}${methodName}(${parameters})`;
        const getNamespaceName = (isSubprocess)=>isSubprocess ? '' : 'subprocess.';
        const getOtherProcessName = (isSubprocess)=>isSubprocess ? 'parent process' : 'subprocess';
        const disconnect = (anyProcess)=>{
            if (anyProcess.connected) anyProcess.disconnect();
        };
        const createDeferred = ()=>{
            const methods = {};
            const promise = new Promise((resolve, reject)=>{
                Object.assign(methods, {
                    resolve,
                    reject
                });
            });
            return Object.assign(promise, methods);
        };
        const getToStream = (destination, to = 'stdin')=>{
            const isWritable = true;
            const { options, fileDescriptors } = SUBPROCESS_OPTIONS.get(destination);
            const fdNumber = getFdNumber(fileDescriptors, to, isWritable);
            const destinationStream = destination.stdio[fdNumber];
            if (null === destinationStream) throw new TypeError(getInvalidStdioOptionMessage(fdNumber, to, options, isWritable));
            return destinationStream;
        };
        const getFromStream = (source, from = 'stdout')=>{
            const isWritable = false;
            const { options, fileDescriptors } = SUBPROCESS_OPTIONS.get(source);
            const fdNumber = getFdNumber(fileDescriptors, from, isWritable);
            const sourceStream = 'all' === fdNumber ? source.all : source.stdio[fdNumber];
            if (null == sourceStream) throw new TypeError(getInvalidStdioOptionMessage(fdNumber, from, options, isWritable));
            return sourceStream;
        };
        const SUBPROCESS_OPTIONS = new WeakMap();
        const getFdNumber = (fileDescriptors, fdName, isWritable)=>{
            const fdNumber = parseFdNumber(fdName, isWritable);
            validateFdNumber(fdNumber, fdName, isWritable, fileDescriptors);
            return fdNumber;
        };
        const parseFdNumber = (fdName, isWritable)=>{
            const fdNumber = parseFd(fdName);
            if (void 0 !== fdNumber) return fdNumber;
            const { validOptions, defaultValue } = isWritable ? {
                validOptions: '"stdin"',
                defaultValue: 'stdin'
            } : {
                validOptions: '"stdout", "stderr", "all"',
                defaultValue: 'stdout'
            };
            throw new TypeError(`"${getOptionName(isWritable)}" must not be "${fdName}".
It must be ${validOptions} or "fd3", "fd4" (and so on).
It is optional and defaults to "${defaultValue}".`);
        };
        const validateFdNumber = (fdNumber, fdName, isWritable, fileDescriptors)=>{
            const fileDescriptor = fileDescriptors[getUsedDescriptor(fdNumber)];
            if (void 0 === fileDescriptor) throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. That file descriptor does not exist.
Please set the "stdio" option to ensure that file descriptor exists.`);
            if ('input' === fileDescriptor.direction && !isWritable) throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. It must be a readable stream, not writable.`);
            if ('input' !== fileDescriptor.direction && isWritable) throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. It must be a writable stream, not readable.`);
        };
        const getInvalidStdioOptionMessage = (fdNumber, fdName, options, isWritable)=>{
            if ('all' === fdNumber && !options.all) return 'The "all" option must be true to use "from: \'all\'".';
            const { optionName, optionValue } = getInvalidStdioOption(fdNumber, options);
            return `The "${optionName}: ${serializeOptionValue(optionValue)}" option is incompatible with using "${getOptionName(isWritable)}: ${serializeOptionValue(fdName)}".
Please set this option with "pipe" instead.`;
        };
        const getInvalidStdioOption = (fdNumber, { stdin, stdout, stderr, stdio })=>{
            const usedDescriptor = getUsedDescriptor(fdNumber);
            if (0 === usedDescriptor && void 0 !== stdin) return {
                optionName: 'stdin',
                optionValue: stdin
            };
            if (1 === usedDescriptor && void 0 !== stdout) return {
                optionName: 'stdout',
                optionValue: stdout
            };
            if (2 === usedDescriptor && void 0 !== stderr) return {
                optionName: 'stderr',
                optionValue: stderr
            };
            return {
                optionName: `stdio[${usedDescriptor}]`,
                optionValue: stdio[usedDescriptor]
            };
        };
        const getUsedDescriptor = (fdNumber)=>'all' === fdNumber ? 1 : fdNumber;
        const getOptionName = (isWritable)=>isWritable ? 'to' : 'from';
        const serializeOptionValue = (value1)=>{
            if ('string' == typeof value1) return `'${value1}'`;
            return 'number' == typeof value1 ? `${value1}` : 'Stream';
        };
        const incrementMaxListeners = (eventEmitter, maxListenersIncrement, signal)=>{
            const maxListeners = eventEmitter.getMaxListeners();
            if (0 === maxListeners || maxListeners === Number.POSITIVE_INFINITY) return;
            eventEmitter.setMaxListeners(maxListeners + maxListenersIncrement);
            (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.addAbortListener)(signal, ()=>{
                eventEmitter.setMaxListeners(eventEmitter.getMaxListeners() - maxListenersIncrement);
            });
        };
        const addReference = (channel, reference)=>{
            if (reference) addReferenceCount(channel);
        };
        const addReferenceCount = (channel)=>{
            channel.refCounted();
        };
        const removeReference = (channel, reference)=>{
            if (reference) removeReferenceCount(channel);
        };
        const removeReferenceCount = (channel)=>{
            channel.unrefCounted();
        };
        const undoAddedReferences = (channel, isSubprocess)=>{
            if (isSubprocess) {
                removeReferenceCount(channel);
                removeReferenceCount(channel);
            }
        };
        const redoAddedReferences = (channel, isSubprocess)=>{
            if (isSubprocess) {
                addReferenceCount(channel);
                addReferenceCount(channel);
            }
        };
        const onMessage = async ({ anyProcess, channel, isSubprocess, ipcEmitter }, wrappedMessage)=>{
            if (handleStrictResponse(wrappedMessage) || handleAbort(wrappedMessage)) return;
            if (!INCOMING_MESSAGES.has(anyProcess)) INCOMING_MESSAGES.set(anyProcess, []);
            const incomingMessages = INCOMING_MESSAGES.get(anyProcess);
            incomingMessages.push(wrappedMessage);
            if (incomingMessages.length > 1) return;
            while(incomingMessages.length > 0){
                await waitForOutgoingMessages(anyProcess, ipcEmitter, wrappedMessage);
                await __WEBPACK_EXTERNAL_MODULE_node_timers_promises_aedbf14c__.scheduler["yield"]();
                const message = await handleStrictRequest({
                    wrappedMessage: incomingMessages[0],
                    anyProcess,
                    channel,
                    isSubprocess,
                    ipcEmitter
                });
                incomingMessages.shift();
                ipcEmitter.emit('message', message);
                ipcEmitter.emit('message:done');
            }
        };
        const onDisconnect = async ({ anyProcess, channel, isSubprocess, ipcEmitter, boundOnMessage })=>{
            abortOnDisconnect();
            const incomingMessages = INCOMING_MESSAGES.get(anyProcess);
            while(incomingMessages?.length > 0)await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(ipcEmitter, 'message:done');
            anyProcess.removeListener('message', boundOnMessage);
            redoAddedReferences(channel, isSubprocess);
            ipcEmitter.connected = false;
            ipcEmitter.emit('disconnect');
        };
        const INCOMING_MESSAGES = new WeakMap();
        const getIpcEmitter = (anyProcess, channel, isSubprocess)=>{
            if (IPC_EMITTERS.has(anyProcess)) return IPC_EMITTERS.get(anyProcess);
            const ipcEmitter = new __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.EventEmitter();
            ipcEmitter.connected = true;
            IPC_EMITTERS.set(anyProcess, ipcEmitter);
            forwardEvents({
                ipcEmitter,
                anyProcess,
                channel,
                isSubprocess
            });
            return ipcEmitter;
        };
        const IPC_EMITTERS = new WeakMap();
        const forwardEvents = ({ ipcEmitter, anyProcess, channel, isSubprocess })=>{
            const boundOnMessage = onMessage.bind(void 0, {
                anyProcess,
                channel,
                isSubprocess,
                ipcEmitter
            });
            anyProcess.on('message', boundOnMessage);
            anyProcess.once('disconnect', onDisconnect.bind(void 0, {
                anyProcess,
                channel,
                isSubprocess,
                ipcEmitter,
                boundOnMessage
            }));
            undoAddedReferences(channel, isSubprocess);
        };
        const forward_isConnected = (anyProcess)=>{
            const ipcEmitter = IPC_EMITTERS.get(anyProcess);
            return void 0 === ipcEmitter ? null !== anyProcess.channel : ipcEmitter.connected;
        };
        const handleSendStrict = ({ anyProcess, channel, isSubprocess, message, strict })=>{
            if (!strict) return message;
            const ipcEmitter = getIpcEmitter(anyProcess, channel, isSubprocess);
            const hasListeners = hasMessageListeners(anyProcess, ipcEmitter);
            return {
                id: strict_count++,
                type: REQUEST_TYPE,
                message,
                hasListeners
            };
        };
        let strict_count = 0n;
        const validateStrictDeadlock = (outgoingMessages, wrappedMessage)=>{
            if (wrappedMessage?.type !== REQUEST_TYPE || wrappedMessage.hasListeners) return;
            for (const { id } of outgoingMessages)if (void 0 !== id) STRICT_RESPONSES[id].resolve({
                isDeadlock: true,
                hasListeners: false
            });
        };
        const handleStrictRequest = async ({ wrappedMessage, anyProcess, channel, isSubprocess, ipcEmitter })=>{
            if (wrappedMessage?.type !== REQUEST_TYPE || !anyProcess.connected) return wrappedMessage;
            const { id, message } = wrappedMessage;
            const response = {
                id,
                type: RESPONSE_TYPE,
                message: hasMessageListeners(anyProcess, ipcEmitter)
            };
            try {
                await sendMessage({
                    anyProcess,
                    channel,
                    isSubprocess,
                    ipc: true
                }, response);
            } catch (error) {
                ipcEmitter.emit('strict:error', error);
            }
            return message;
        };
        const handleStrictResponse = (wrappedMessage)=>{
            if (wrappedMessage?.type !== RESPONSE_TYPE) return false;
            const { id, message: hasListeners } = wrappedMessage;
            STRICT_RESPONSES[id]?.resolve({
                isDeadlock: false,
                hasListeners
            });
            return true;
        };
        const waitForStrictResponse = async (wrappedMessage, anyProcess, isSubprocess)=>{
            if (wrappedMessage?.type !== REQUEST_TYPE) return;
            const deferred = createDeferred();
            STRICT_RESPONSES[wrappedMessage.id] = deferred;
            const controller = new AbortController();
            try {
                const { isDeadlock, hasListeners } = await Promise.race([
                    deferred,
                    throwOnDisconnect(anyProcess, isSubprocess, controller)
                ]);
                if (isDeadlock) throwOnStrictDeadlockError(isSubprocess);
                if (!hasListeners) throwOnMissingStrict(isSubprocess);
            } finally{
                controller.abort();
                delete STRICT_RESPONSES[wrappedMessage.id];
            }
        };
        const STRICT_RESPONSES = {};
        const throwOnDisconnect = async (anyProcess, isSubprocess, { signal })=>{
            incrementMaxListeners(anyProcess, 1, signal);
            await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(anyProcess, 'disconnect', {
                signal
            });
            throwOnStrictDisconnect(isSubprocess);
        };
        const REQUEST_TYPE = 'execa:ipc:request';
        const RESPONSE_TYPE = 'execa:ipc:response';
        const startSendMessage = (anyProcess, wrappedMessage, strict)=>{
            if (!OUTGOING_MESSAGES.has(anyProcess)) OUTGOING_MESSAGES.set(anyProcess, new Set());
            const outgoingMessages = OUTGOING_MESSAGES.get(anyProcess);
            const onMessageSent = createDeferred();
            const id = strict ? wrappedMessage.id : void 0;
            const outgoingMessage = {
                onMessageSent,
                id
            };
            outgoingMessages.add(outgoingMessage);
            return {
                outgoingMessages,
                outgoingMessage
            };
        };
        const endSendMessage = ({ outgoingMessages, outgoingMessage })=>{
            outgoingMessages.delete(outgoingMessage);
            outgoingMessage.onMessageSent.resolve();
        };
        const waitForOutgoingMessages = async (anyProcess, ipcEmitter, wrappedMessage)=>{
            while(!hasMessageListeners(anyProcess, ipcEmitter) && OUTGOING_MESSAGES.get(anyProcess)?.size > 0){
                const outgoingMessages = [
                    ...OUTGOING_MESSAGES.get(anyProcess)
                ];
                validateStrictDeadlock(outgoingMessages, wrappedMessage);
                await Promise.all(outgoingMessages.map(({ onMessageSent })=>onMessageSent));
            }
        };
        const OUTGOING_MESSAGES = new WeakMap();
        const hasMessageListeners = (anyProcess, ipcEmitter)=>ipcEmitter.listenerCount('message') > getMinListenerCount(anyProcess);
        const getMinListenerCount = (anyProcess)=>SUBPROCESS_OPTIONS.has(anyProcess) && !getFdSpecificValue(SUBPROCESS_OPTIONS.get(anyProcess).options.buffer, 'ipc') ? 1 : 0;
        const sendMessage = ({ anyProcess, channel, isSubprocess, ipc }, message, { strict = false } = {})=>{
            const methodName = 'sendMessage';
            validateIpcMethod({
                methodName,
                isSubprocess,
                ipc,
                isConnected: anyProcess.connected
            });
            return sendMessageAsync({
                anyProcess,
                channel,
                methodName,
                isSubprocess,
                message,
                strict
            });
        };
        const sendMessageAsync = async ({ anyProcess, channel, methodName, isSubprocess, message, strict })=>{
            const wrappedMessage = handleSendStrict({
                anyProcess,
                channel,
                isSubprocess,
                message,
                strict
            });
            const outgoingMessagesState = startSendMessage(anyProcess, wrappedMessage, strict);
            try {
                await sendOneMessage({
                    anyProcess,
                    methodName,
                    isSubprocess,
                    wrappedMessage,
                    message
                });
            } catch (error) {
                disconnect(anyProcess);
                throw error;
            } finally{
                endSendMessage(outgoingMessagesState);
            }
        };
        const sendOneMessage = async ({ anyProcess, methodName, isSubprocess, wrappedMessage, message })=>{
            const sendMethod = getSendMethod(anyProcess);
            try {
                await Promise.all([
                    waitForStrictResponse(wrappedMessage, anyProcess, isSubprocess),
                    sendMethod(wrappedMessage)
                ]);
            } catch (error) {
                handleEpipeError({
                    error,
                    methodName,
                    isSubprocess
                });
                handleSerializationError({
                    error,
                    methodName,
                    isSubprocess,
                    message
                });
                throw error;
            }
        };
        const getSendMethod = (anyProcess)=>{
            if (PROCESS_SEND_METHODS.has(anyProcess)) return PROCESS_SEND_METHODS.get(anyProcess);
            const sendMethod = (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.promisify)(anyProcess.send.bind(anyProcess));
            PROCESS_SEND_METHODS.set(anyProcess, sendMethod);
            return sendMethod;
        };
        const PROCESS_SEND_METHODS = new WeakMap();
        const sendAbort = (subprocess, message)=>{
            const methodName = 'cancelSignal';
            validateConnection(methodName, false, subprocess.connected);
            return sendOneMessage({
                anyProcess: subprocess,
                methodName,
                isSubprocess: false,
                wrappedMessage: {
                    type: GRACEFUL_CANCEL_TYPE,
                    message
                },
                message
            });
        };
        const getCancelSignal = async ({ anyProcess, channel, isSubprocess, ipc })=>{
            await startIpc({
                anyProcess,
                channel,
                isSubprocess,
                ipc
            });
            return cancelController.signal;
        };
        const startIpc = async ({ anyProcess, channel, isSubprocess, ipc })=>{
            if (cancelListening) return;
            cancelListening = true;
            if (!ipc) {
                throwOnMissingParent();
                return;
            }
            if (null === channel) {
                abortOnDisconnect();
                return;
            }
            getIpcEmitter(anyProcess, channel, isSubprocess);
            await __WEBPACK_EXTERNAL_MODULE_node_timers_promises_aedbf14c__.scheduler["yield"]();
        };
        let cancelListening = false;
        const handleAbort = (wrappedMessage)=>{
            if (wrappedMessage?.type !== GRACEFUL_CANCEL_TYPE) return false;
            cancelController.abort(wrappedMessage.message);
            return true;
        };
        const GRACEFUL_CANCEL_TYPE = 'execa:ipc:cancel';
        const abortOnDisconnect = ()=>{
            cancelController.abort(getAbortDisconnectError());
        };
        const cancelController = new AbortController();
        const validateGracefulCancel = ({ gracefulCancel, cancelSignal, ipc, serialization })=>{
            if (!gracefulCancel) return;
            if (void 0 === cancelSignal) throw new Error('The `cancelSignal` option must be defined when setting the `gracefulCancel` option.');
            if (!ipc) throw new Error('The `ipc` option cannot be false when setting the `gracefulCancel` option.');
            if ('json' === serialization) throw new Error('The `serialization` option cannot be \'json\' when setting the `gracefulCancel` option.');
        };
        const throwOnGracefulCancel = ({ subprocess, cancelSignal, gracefulCancel, forceKillAfterDelay, context, controller })=>gracefulCancel ? [
                sendOnAbort({
                    subprocess,
                    cancelSignal,
                    forceKillAfterDelay,
                    context,
                    controller
                })
            ] : [];
        const sendOnAbort = async ({ subprocess, cancelSignal, forceKillAfterDelay, context, controller: { signal } })=>{
            await onAbortedSignal(cancelSignal, signal);
            const reason = getReason(cancelSignal);
            await sendAbort(subprocess, reason);
            killOnTimeout({
                kill: subprocess.kill,
                forceKillAfterDelay,
                context,
                controllerSignal: signal
            });
            context.terminationReason ??= 'gracefulCancel';
            throw cancelSignal.reason;
        };
        const getReason = ({ reason })=>{
            if (!(reason instanceof DOMException)) return reason;
            const error = new Error(reason.message);
            Object.defineProperty(error, 'stack', {
                value: reason.stack,
                enumerable: false,
                configurable: true,
                writable: true
            });
            return error;
        };
        const validateTimeout = ({ timeout })=>{
            if (void 0 !== timeout && (!Number.isFinite(timeout) || timeout < 0)) throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
        };
        const throwOnTimeout = (subprocess, timeout, context, controller)=>0 === timeout || void 0 === timeout ? [] : [
                killAfterTimeout(subprocess, timeout, context, controller)
            ];
        const killAfterTimeout = async (subprocess, timeout, context, { signal })=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_timers_promises_aedbf14c__.setTimeout)(timeout, void 0, {
                signal
            });
            context.terminationReason ??= 'timeout';
            subprocess.kill();
            throw new DiscardedError();
        };
        const mapNode = ({ options })=>{
            if (false === options.node) throw new TypeError('The "node" option cannot be false with `execaNode()`.');
            return {
                options: {
                    ...options,
                    node: true
                }
            };
        };
        const handleNodeOption = (file, commandArguments, { node: shouldHandleNode = false, nodePath = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__.execPath, nodeOptions = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__.execArgv.filter((nodeOption)=>!nodeOption.startsWith('--inspect')), cwd, execPath: formerNodePath, ...options })=>{
            if (void 0 !== formerNodePath) throw new TypeError('The "execPath" option has been removed. Please use the "nodePath" option instead.');
            const normalizedNodePath = safeNormalizeFileUrl(nodePath, 'The "nodePath" option');
            const resolvedNodePath = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(cwd, normalizedNodePath);
            const newOptions = {
                ...options,
                nodePath: resolvedNodePath,
                node: shouldHandleNode,
                cwd
            };
            if (!shouldHandleNode) return [
                file,
                commandArguments,
                newOptions
            ];
            if ('node' === __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].basename(file, '.exe')) throw new TypeError('When the "node" option is true, the first argument does not need to be "node".');
            return [
                resolvedNodePath,
                [
                    ...nodeOptions,
                    file,
                    ...commandArguments
                ],
                {
                    ipc: true,
                    ...newOptions,
                    shell: false
                }
            ];
        };
        const validateIpcInputOption = ({ ipcInput, ipc, serialization })=>{
            if (void 0 === ipcInput) return;
            if (!ipc) throw new Error('The `ipcInput` option cannot be set unless the `ipc` option is `true`.');
            validateIpcInput[serialization](ipcInput);
        };
        const validateAdvancedInput = (ipcInput)=>{
            try {
                (0, __WEBPACK_EXTERNAL_MODULE_node_v8_d0df5498__.serialize)(ipcInput);
            } catch (error) {
                throw new Error('The `ipcInput` option is not serializable with a structured clone.', {
                    cause: error
                });
            }
        };
        const validateJsonInput = (ipcInput)=>{
            try {
                JSON.stringify(ipcInput);
            } catch (error) {
                throw new Error('The `ipcInput` option is not serializable with JSON.', {
                    cause: error
                });
            }
        };
        const validateIpcInput = {
            advanced: validateAdvancedInput,
            json: validateJsonInput
        };
        const sendIpcInput = async (subprocess, ipcInput)=>{
            if (void 0 === ipcInput) return;
            await subprocess.sendMessage(ipcInput);
        };
        const validateEncoding = ({ encoding })=>{
            if (ENCODINGS.has(encoding)) return;
            const correctEncoding = getCorrectEncoding(encoding);
            if (void 0 !== correctEncoding) throw new TypeError(`Invalid option \`encoding: ${serializeEncoding(encoding)}\`.
Please rename it to ${serializeEncoding(correctEncoding)}.`);
            const correctEncodings = [
                ...ENCODINGS
            ].map((correctEncoding)=>serializeEncoding(correctEncoding)).join(', ');
            throw new TypeError(`Invalid option \`encoding: ${serializeEncoding(encoding)}\`.
Please rename it to one of: ${correctEncodings}.`);
        };
        const TEXT_ENCODINGS = new Set([
            'utf8',
            'utf16le'
        ]);
        const BINARY_ENCODINGS = new Set([
            'buffer',
            'hex',
            'base64',
            'base64url',
            'latin1',
            'ascii'
        ]);
        const ENCODINGS = new Set([
            ...TEXT_ENCODINGS,
            ...BINARY_ENCODINGS
        ]);
        const getCorrectEncoding = (encoding)=>{
            if (null === encoding) return 'buffer';
            if ('string' != typeof encoding) return;
            const lowerEncoding = encoding.toLowerCase();
            if (lowerEncoding in ENCODING_ALIASES) return ENCODING_ALIASES[lowerEncoding];
            if (ENCODINGS.has(lowerEncoding)) return lowerEncoding;
        };
        const ENCODING_ALIASES = {
            'utf-8': 'utf8',
            'utf-16le': 'utf16le',
            'ucs-2': 'utf16le',
            ucs2: 'utf16le',
            binary: 'latin1'
        };
        const serializeEncoding = (encoding)=>'string' == typeof encoding ? `"${encoding}"` : String(encoding);
        const normalizeCwd = (cwd = getDefaultCwd())=>{
            const cwdString = safeNormalizeFileUrl(cwd, 'The "cwd" option');
            return __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].resolve(cwdString);
        };
        const getDefaultCwd = ()=>{
            try {
                return __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].cwd();
            } catch (error) {
                error.message = `The current directory does not exist.\n${error.message}`;
                throw error;
            }
        };
        const fixCwdError = (originalMessage, cwd)=>{
            if (cwd === getDefaultCwd()) return originalMessage;
            let cwdStat;
            try {
                cwdStat = (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.statSync)(cwd);
            } catch (error) {
                return `The "cwd" option is invalid: ${cwd}.\n${error.message}\n${originalMessage}`;
            }
            if (!cwdStat.isDirectory()) return `The "cwd" option is not a directory: ${cwd}.\n${originalMessage}`;
            return originalMessage;
        };
        const normalizeOptions = (filePath, rawArguments, rawOptions)=>{
            rawOptions.cwd = normalizeCwd(rawOptions.cwd);
            const [processedFile, processedArguments, processedOptions] = handleNodeOption(filePath, rawArguments, rawOptions);
            const { command: file, args: commandArguments, options: initialOptions } = cross_spawn._parse(processedFile, processedArguments, processedOptions);
            const fdOptions = normalizeFdSpecificOptions(initialOptions);
            const options = addDefaultOptions(fdOptions);
            validateTimeout(options);
            validateEncoding(options);
            validateIpcInputOption(options);
            validateCancelSignal(options);
            validateGracefulCancel(options);
            options.shell = normalizeFileUrl(options.shell);
            options.env = getEnv(options);
            options.killSignal = normalizeKillSignal(options.killSignal);
            options.forceKillAfterDelay = normalizeForceKillAfterDelay(options.forceKillAfterDelay);
            options.lines = options.lines.map((lines, fdNumber)=>lines && !BINARY_ENCODINGS.has(options.encoding) && options.buffer[fdNumber]);
            if ('win32' === __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].platform && 'cmd' === __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__["default"].basename(file, '.exe')) commandArguments.unshift('/q');
            return {
                file,
                commandArguments,
                options
            };
        };
        const addDefaultOptions = ({ extendEnv = true, preferLocal = false, cwd, localDir: localDirectory = cwd, encoding = 'utf8', reject = true, cleanup = true, all = false, windowsHide = true, killSignal = 'SIGTERM', forceKillAfterDelay = true, gracefulCancel = false, ipcInput, ipc = void 0 !== ipcInput || gracefulCancel, serialization = 'advanced', ...options })=>({
                ...options,
                extendEnv,
                preferLocal,
                cwd,
                localDirectory,
                encoding,
                reject,
                cleanup,
                all,
                windowsHide,
                killSignal,
                forceKillAfterDelay,
                gracefulCancel,
                ipcInput,
                ipc,
                serialization
            });
        const getEnv = ({ env: envOption, extendEnv, preferLocal, node, localDirectory, nodePath })=>{
            const env = extendEnv ? {
                ...__WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].env,
                ...envOption
            } : envOption;
            if (preferLocal || node) return npmRunPathEnv({
                env,
                cwd: localDirectory,
                execPath: nodePath,
                preferLocal,
                addExecPath: node
            });
            return env;
        };
        function strip_final_newline_stripFinalNewline(input) {
            if ('string' == typeof input) return stripFinalNewlineString(input);
            if (!(ArrayBuffer.isView(input) && 1 === input.BYTES_PER_ELEMENT)) throw new Error('Input must be a string or a Uint8Array');
            return stripFinalNewlineBinary(input);
        }
        const stripFinalNewlineString = (input)=>input.at(-1) === strip_final_newline_LF ? input.slice(0, input.at(-2) === CR ? -2 : -1) : input;
        const stripFinalNewlineBinary = (input)=>input.at(-1) === LF_BINARY ? input.subarray(0, input.at(-2) === CR_BINARY ? -2 : -1) : input;
        const strip_final_newline_LF = '\n';
        const LF_BINARY = strip_final_newline_LF.codePointAt(0);
        const CR = '\r';
        const CR_BINARY = CR.codePointAt(0);
        function isStream(stream, { checkOpen = true } = {}) {
            return null !== stream && 'object' == typeof stream && (stream.writable || stream.readable || !checkOpen || void 0 === stream.writable && void 0 === stream.readable) && 'function' == typeof stream.pipe;
        }
        function isWritableStream(stream, { checkOpen = true } = {}) {
            return isStream(stream, {
                checkOpen
            }) && (stream.writable || !checkOpen) && 'function' == typeof stream.write && 'function' == typeof stream.end && 'boolean' == typeof stream.writable && 'boolean' == typeof stream.writableObjectMode && 'function' == typeof stream.destroy && 'boolean' == typeof stream.destroyed;
        }
        function isReadableStream(stream, { checkOpen = true } = {}) {
            return isStream(stream, {
                checkOpen
            }) && (stream.readable || !checkOpen) && 'function' == typeof stream.read && 'boolean' == typeof stream.readable && 'boolean' == typeof stream.readableObjectMode && 'function' == typeof stream.destroy && 'boolean' == typeof stream.destroyed;
        }
        function isDuplexStream(stream, options) {
            return isWritableStream(stream, options) && isReadableStream(stream, options);
        }
        const asyncIterator_a = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);
        class c {
            #t;
            #n;
            #r = !1;
            #e = void 0;
            constructor(e, t){
                this.#t = e, this.#n = t;
            }
            next() {
                const e = ()=>this.#s();
                return this.#e = this.#e ? this.#e.then(e, e) : e(), this.#e;
            }
            return(e) {
                const t = ()=>this.#i(e);
                return this.#e ? this.#e.then(t, t) : t();
            }
            async #s() {
                if (this.#r) return {
                    done: !0,
                    value: void 0
                };
                let e;
                try {
                    e = await this.#t.read();
                } catch (t) {
                    throw this.#e = void 0, this.#r = !0, this.#t.releaseLock(), t;
                }
                return e.done && (this.#e = void 0, this.#r = !0, this.#t.releaseLock()), e;
            }
            async #i(e) {
                if (this.#r) return {
                    done: !0,
                    value: e
                };
                if (this.#r = !0, !this.#n) {
                    const t = this.#t.cancel(e);
                    return this.#t.releaseLock(), await t, {
                        done: !0,
                        value: e
                    };
                }
                return this.#t.releaseLock(), {
                    done: !0,
                    value: e
                };
            }
        }
        const asyncIterator_n = Symbol();
        function asyncIterator_i() {
            return this[asyncIterator_n].next();
        }
        Object.defineProperty(asyncIterator_i, "name", {
            value: "next"
        });
        function asyncIterator_o(r) {
            return this[asyncIterator_n].return(r);
        }
        Object.defineProperty(asyncIterator_o, "name", {
            value: "return"
        });
        const u = Object.create(asyncIterator_a, {
            next: {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: asyncIterator_i
            },
            return: {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: asyncIterator_o
            }
        });
        function h({ preventCancel: r = !1 } = {}) {
            const e = this.getReader(), t = new c(e, r), s = Object.create(u);
            return s[asyncIterator_n] = t, s;
        }
        const getAsyncIterable = (stream)=>{
            if (isReadableStream(stream, {
                checkOpen: false
            }) && void 0 !== nodeImports.on) return getStreamIterable(stream);
            if ('function' == typeof stream?.[Symbol.asyncIterator]) return stream;
            if ('[object ReadableStream]' === stream_toString.call(stream)) return h.call(stream);
            throw new TypeError('The first argument must be a Readable, a ReadableStream, or an async iterable.');
        };
        const { toString: stream_toString } = Object.prototype;
        const getStreamIterable = async function*(stream) {
            const controller = new AbortController();
            const state = {};
            handleStreamEnd(stream, controller, state);
            try {
                for await (const [chunk] of nodeImports.on(stream, 'data', {
                    signal: controller.signal
                }))yield chunk;
            } catch (error) {
                if (void 0 !== state.error) throw state.error;
                if (!controller.signal.aborted) throw error;
            } finally{
                stream.destroy();
            }
        };
        const handleStreamEnd = async (stream, controller, state)=>{
            try {
                await nodeImports.finished(stream, {
                    cleanup: true,
                    readable: true,
                    writable: false,
                    error: false
                });
            } catch (error) {
                state.error = error;
            } finally{
                controller.abort();
            }
        };
        const nodeImports = {};
        const getStreamContents = async (stream, { init, convertChunk, getSize, truncateChunk, addChunk, getFinalChunk, finalize }, { maxBuffer = Number.POSITIVE_INFINITY } = {})=>{
            const asyncIterable = getAsyncIterable(stream);
            const state = init();
            state.length = 0;
            try {
                for await (const chunk of asyncIterable){
                    const chunkType = getChunkType(chunk);
                    const convertedChunk = convertChunk[chunkType](chunk, state);
                    appendChunk({
                        convertedChunk,
                        state,
                        getSize,
                        truncateChunk,
                        addChunk,
                        maxBuffer
                    });
                }
                appendFinalChunk({
                    state,
                    convertChunk,
                    getSize,
                    truncateChunk,
                    addChunk,
                    getFinalChunk,
                    maxBuffer
                });
                return finalize(state);
            } catch (error) {
                const normalizedError = 'object' == typeof error && null !== error ? error : new Error(error);
                normalizedError.bufferedData = finalize(state);
                throw normalizedError;
            }
        };
        const appendFinalChunk = ({ state, getSize, truncateChunk, addChunk, getFinalChunk, maxBuffer })=>{
            const convertedChunk = getFinalChunk(state);
            if (void 0 !== convertedChunk) appendChunk({
                convertedChunk,
                state,
                getSize,
                truncateChunk,
                addChunk,
                maxBuffer
            });
        };
        const appendChunk = ({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer })=>{
            const chunkSize = getSize(convertedChunk);
            const newLength = state.length + chunkSize;
            if (newLength <= maxBuffer) {
                addNewChunk(convertedChunk, state, addChunk, newLength);
                return;
            }
            const truncatedChunk = truncateChunk(convertedChunk, maxBuffer - state.length);
            if (void 0 !== truncatedChunk) addNewChunk(truncatedChunk, state, addChunk, maxBuffer);
            throw new MaxBufferError();
        };
        const addNewChunk = (convertedChunk, state, addChunk, newLength)=>{
            state.contents = addChunk(convertedChunk, state, newLength);
            state.length = newLength;
        };
        const getChunkType = (chunk)=>{
            const typeOfChunk = typeof chunk;
            if ('string' === typeOfChunk) return 'string';
            if ('object' !== typeOfChunk || null === chunk) return 'others';
            if (globalThis.Buffer?.isBuffer(chunk)) return 'buffer';
            const prototypeName = contents_objectToString.call(chunk);
            if ('[object ArrayBuffer]' === prototypeName) return 'arrayBuffer';
            if ('[object DataView]' === prototypeName) return 'dataView';
            if (Number.isInteger(chunk.byteLength) && Number.isInteger(chunk.byteOffset) && '[object ArrayBuffer]' === contents_objectToString.call(chunk.buffer)) return 'typedArray';
            return 'others';
        };
        const { toString: contents_objectToString } = Object.prototype;
        class MaxBufferError extends Error {
            name = 'MaxBufferError';
            constructor(){
                super('maxBuffer exceeded');
            }
        }
        const handleMaxBuffer = ({ error, stream, readableObjectMode, lines, encoding, fdNumber })=>{
            if (!(error instanceof MaxBufferError)) throw error;
            if ('all' === fdNumber) return error;
            const unit = getMaxBufferUnit(readableObjectMode, lines, encoding);
            error.maxBufferInfo = {
                fdNumber,
                unit
            };
            stream.destroy();
            throw error;
        };
        const getMaxBufferUnit = (readableObjectMode, lines, encoding)=>{
            if (readableObjectMode) return 'objects';
            if (lines) return 'lines';
            if ('buffer' === encoding) return 'bytes';
            return 'characters';
        };
        const checkIpcMaxBuffer = (subprocess, ipcOutput, maxBuffer)=>{
            if (ipcOutput.length !== maxBuffer) return;
            const error = new MaxBufferError();
            error.maxBufferInfo = {
                fdNumber: 'ipc'
            };
            throw error;
        };
        const getMaxBufferMessage = (error, maxBuffer)=>{
            const { streamName, threshold, unit } = getMaxBufferInfo(error, maxBuffer);
            return `Command's ${streamName} was larger than ${threshold} ${unit}`;
        };
        const getMaxBufferInfo = (error, maxBuffer)=>{
            if (error?.maxBufferInfo === void 0) return {
                streamName: 'output',
                threshold: maxBuffer[1],
                unit: 'bytes'
            };
            const { maxBufferInfo: { fdNumber, unit } } = error;
            delete error.maxBufferInfo;
            const threshold = getFdSpecificValue(maxBuffer, fdNumber);
            if ('ipc' === fdNumber) return {
                streamName: 'IPC output',
                threshold,
                unit: 'messages'
            };
            return {
                streamName: getStreamName(fdNumber),
                threshold,
                unit
            };
        };
        const isMaxBufferSync = (resultError, output, maxBuffer)=>resultError?.code === 'ENOBUFS' && null !== output && output.some((result)=>null !== result && result.length > getMaxBufferSync(maxBuffer));
        const truncateMaxBufferSync = (result, isMaxBuffer, maxBuffer)=>{
            if (!isMaxBuffer) return result;
            const maxBufferValue = getMaxBufferSync(maxBuffer);
            return result.length > maxBufferValue ? result.slice(0, maxBufferValue) : result;
        };
        const getMaxBufferSync = ([, stdoutMaxBuffer])=>stdoutMaxBuffer;
        const createMessages = ({ stdio, all, ipcOutput, originalError, signal, signalDescription, exitCode, escapedCommand, timedOut, isCanceled, isGracefullyCanceled, isMaxBuffer, isForcefullyTerminated, forceKillAfterDelay, killSignal, maxBuffer, timeout, cwd })=>{
            const errorCode = originalError?.code;
            const prefix = getErrorPrefix({
                originalError,
                timedOut,
                timeout,
                isMaxBuffer,
                maxBuffer,
                errorCode,
                signal,
                signalDescription,
                exitCode,
                isCanceled,
                isGracefullyCanceled,
                isForcefullyTerminated,
                forceKillAfterDelay,
                killSignal
            });
            const originalMessage = getOriginalMessage(originalError, cwd);
            const suffix = void 0 === originalMessage ? '' : `\n${originalMessage}`;
            const shortMessage = `${prefix}: ${escapedCommand}${suffix}`;
            const messageStdio = void 0 === all ? [
                stdio[2],
                stdio[1]
            ] : [
                all
            ];
            const message = [
                shortMessage,
                ...messageStdio,
                ...stdio.slice(3),
                ipcOutput.map((ipcMessage)=>serializeIpcMessage(ipcMessage)).join('\n')
            ].map((messagePart)=>escapeLines(strip_final_newline_stripFinalNewline(serializeMessagePart(messagePart)))).filter(Boolean).join('\n\n');
            return {
                originalMessage,
                shortMessage,
                message
            };
        };
        const getErrorPrefix = ({ originalError, timedOut, timeout, isMaxBuffer, maxBuffer, errorCode, signal, signalDescription, exitCode, isCanceled, isGracefullyCanceled, isForcefullyTerminated, forceKillAfterDelay, killSignal })=>{
            const forcefulSuffix = getForcefulSuffix(isForcefullyTerminated, forceKillAfterDelay);
            if (timedOut) return `Command timed out after ${timeout} milliseconds${forcefulSuffix}`;
            if (isGracefullyCanceled) {
                if (void 0 === signal) return `Command was gracefully canceled with exit code ${exitCode}`;
                return isForcefullyTerminated ? `Command was gracefully canceled${forcefulSuffix}` : `Command was gracefully canceled with ${signal} (${signalDescription})`;
            }
            if (isCanceled) return `Command was canceled${forcefulSuffix}`;
            if (isMaxBuffer) return `${getMaxBufferMessage(originalError, maxBuffer)}${forcefulSuffix}`;
            if (void 0 !== errorCode) return `Command failed with ${errorCode}${forcefulSuffix}`;
            if (isForcefullyTerminated) return `Command was killed with ${killSignal} (${getSignalDescription(killSignal)})${forcefulSuffix}`;
            if (void 0 !== signal) return `Command was killed with ${signal} (${signalDescription})`;
            if (void 0 !== exitCode) return `Command failed with exit code ${exitCode}`;
            return 'Command failed';
        };
        const getForcefulSuffix = (isForcefullyTerminated, forceKillAfterDelay)=>isForcefullyTerminated ? ` and was forcefully terminated after ${forceKillAfterDelay} milliseconds` : '';
        const getOriginalMessage = (originalError, cwd)=>{
            if (originalError instanceof DiscardedError) return;
            const originalMessage = isExecaError(originalError) ? originalError.originalMessage : String(originalError?.message ?? originalError);
            const escapedOriginalMessage = escapeLines(fixCwdError(originalMessage, cwd));
            return '' === escapedOriginalMessage ? void 0 : escapedOriginalMessage;
        };
        const serializeIpcMessage = (ipcMessage)=>'string' == typeof ipcMessage ? ipcMessage : (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.inspect)(ipcMessage);
        const serializeMessagePart = (messagePart)=>Array.isArray(messagePart) ? messagePart.map((messageItem)=>strip_final_newline_stripFinalNewline(serializeMessageItem(messageItem))).filter(Boolean).join('\n') : serializeMessageItem(messagePart);
        const serializeMessageItem = (messageItem)=>{
            if ('string' == typeof messageItem) return messageItem;
            if (isUint8Array(messageItem)) return uint8ArrayToString(messageItem);
            return '';
        };
        const makeSuccessResult = ({ command, escapedCommand, stdio, all, ipcOutput, options: { cwd }, startTime })=>omitUndefinedProperties({
                command,
                escapedCommand,
                cwd,
                durationMs: getDurationMs(startTime),
                failed: false,
                timedOut: false,
                isCanceled: false,
                isGracefullyCanceled: false,
                isTerminated: false,
                isMaxBuffer: false,
                isForcefullyTerminated: false,
                exitCode: 0,
                stdout: stdio[1],
                stderr: stdio[2],
                all,
                stdio,
                ipcOutput,
                pipedFrom: []
            });
        const makeEarlyError = ({ error, command, escapedCommand, fileDescriptors, options, startTime, isSync })=>makeError({
                error,
                command,
                escapedCommand,
                startTime,
                timedOut: false,
                isCanceled: false,
                isGracefullyCanceled: false,
                isMaxBuffer: false,
                isForcefullyTerminated: false,
                stdio: Array.from({
                    length: fileDescriptors.length
                }),
                ipcOutput: [],
                options,
                isSync
            });
        const makeError = ({ error: originalError, command, escapedCommand, startTime, timedOut, isCanceled, isGracefullyCanceled, isMaxBuffer, isForcefullyTerminated, exitCode: rawExitCode, signal: rawSignal, stdio, all, ipcOutput, options: { timeoutDuration, timeout = timeoutDuration, forceKillAfterDelay, killSignal, cwd, maxBuffer }, isSync })=>{
            const { exitCode, signal, signalDescription } = normalizeExitPayload(rawExitCode, rawSignal);
            const { originalMessage, shortMessage, message } = createMessages({
                stdio,
                all,
                ipcOutput,
                originalError,
                signal,
                signalDescription,
                exitCode,
                escapedCommand,
                timedOut,
                isCanceled,
                isGracefullyCanceled,
                isMaxBuffer,
                isForcefullyTerminated,
                forceKillAfterDelay,
                killSignal,
                maxBuffer,
                timeout,
                cwd
            });
            const error = getFinalError(originalError, message, isSync);
            Object.assign(error, getErrorProperties({
                error,
                command,
                escapedCommand,
                startTime,
                timedOut,
                isCanceled,
                isGracefullyCanceled,
                isMaxBuffer,
                isForcefullyTerminated,
                exitCode,
                signal,
                signalDescription,
                stdio,
                all,
                ipcOutput,
                cwd,
                originalMessage,
                shortMessage
            }));
            return error;
        };
        const getErrorProperties = ({ error, command, escapedCommand, startTime, timedOut, isCanceled, isGracefullyCanceled, isMaxBuffer, isForcefullyTerminated, exitCode, signal, signalDescription, stdio, all, ipcOutput, cwd, originalMessage, shortMessage })=>omitUndefinedProperties({
                shortMessage,
                originalMessage,
                command,
                escapedCommand,
                cwd,
                durationMs: getDurationMs(startTime),
                failed: true,
                timedOut,
                isCanceled,
                isGracefullyCanceled,
                isTerminated: void 0 !== signal,
                isMaxBuffer,
                isForcefullyTerminated,
                exitCode,
                signal,
                signalDescription,
                code: error.cause?.code,
                stdout: stdio[1],
                stderr: stdio[2],
                all,
                stdio,
                ipcOutput,
                pipedFrom: []
            });
        const omitUndefinedProperties = (result)=>Object.fromEntries(Object.entries(result).filter(([, value1])=>void 0 !== value1));
        const normalizeExitPayload = (rawExitCode, rawSignal)=>{
            const exitCode = null === rawExitCode ? void 0 : rawExitCode;
            const signal = null === rawSignal ? void 0 : rawSignal;
            const signalDescription = void 0 === signal ? void 0 : getSignalDescription(rawSignal);
            return {
                exitCode,
                signal,
                signalDescription
            };
        };
        const toZeroIfInfinity = (value1)=>Number.isFinite(value1) ? value1 : 0;
        function parseNumber(milliseconds) {
            return {
                days: Math.trunc(milliseconds / 86400000),
                hours: Math.trunc(milliseconds / 3600000 % 24),
                minutes: Math.trunc(milliseconds / 60000 % 60),
                seconds: Math.trunc(milliseconds / 1000 % 60),
                milliseconds: Math.trunc(milliseconds % 1000),
                microseconds: Math.trunc(toZeroIfInfinity(1000 * milliseconds) % 1000),
                nanoseconds: Math.trunc(toZeroIfInfinity(1e6 * milliseconds) % 1000)
            };
        }
        function parseBigint(milliseconds) {
            return {
                days: milliseconds / 86400000n,
                hours: milliseconds / 3600000n % 24n,
                minutes: milliseconds / 60000n % 60n,
                seconds: milliseconds / 1000n % 60n,
                milliseconds: milliseconds % 1000n,
                microseconds: 0n,
                nanoseconds: 0n
            };
        }
        function parseMilliseconds(milliseconds) {
            switch(typeof milliseconds){
                case 'number':
                    if (Number.isFinite(milliseconds)) return parseNumber(milliseconds);
                    break;
                case 'bigint':
                    return parseBigint(milliseconds);
            }
            throw new TypeError('Expected a finite number or bigint');
        }
        const isZero = (value1)=>0 === value1 || 0n === value1;
        const pluralize = (word, count)=>1 === count || 1n === count ? word : `${word}s`;
        const SECOND_ROUNDING_EPSILON = 0.0000001;
        const ONE_DAY_IN_MILLISECONDS = 24n * 60n * 60n * 1000n;
        function prettyMilliseconds(milliseconds, options) {
            const isBigInt = 'bigint' == typeof milliseconds;
            if (!isBigInt && !Number.isFinite(milliseconds)) throw new TypeError('Expected a finite number or bigint');
            options = {
                ...options
            };
            const sign = milliseconds < 0 ? '-' : '';
            milliseconds = milliseconds < 0 ? -milliseconds : milliseconds;
            if (options.colonNotation) {
                options.compact = false;
                options.formatSubMilliseconds = false;
                options.separateMilliseconds = false;
                options.verbose = false;
            }
            if (options.compact) {
                options.unitCount = 1;
                options.secondsDecimalDigits = 0;
                options.millisecondsDecimalDigits = 0;
            }
            let result = [];
            const floorDecimals = (value1, decimalDigits)=>{
                const flooredInterimValue = Math.floor(value1 * 10 ** decimalDigits + SECOND_ROUNDING_EPSILON);
                const flooredValue = Math.round(flooredInterimValue) / 10 ** decimalDigits;
                return flooredValue.toFixed(decimalDigits);
            };
            const add = (value1, long, short, valueString)=>{
                if ((0 === result.length || !options.colonNotation) && isZero(value1) && !(options.colonNotation && 'm' === short)) return;
                valueString ??= String(value1);
                if (options.colonNotation) {
                    const wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;
                    const minLength = result.length > 0 ? 2 : 1;
                    valueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;
                } else valueString += options.verbose ? ' ' + pluralize(long, value1) : short;
                result.push(valueString);
            };
            const parsed = parseMilliseconds(milliseconds);
            const days = BigInt(parsed.days);
            if (options.hideYearAndDays) add(24n * BigInt(days) + BigInt(parsed.hours), 'hour', 'h');
            else {
                if (options.hideYear) add(days, 'day', 'd');
                else {
                    add(days / 365n, 'year', 'y');
                    add(days % 365n, 'day', 'd');
                }
                add(Number(parsed.hours), 'hour', 'h');
            }
            add(Number(parsed.minutes), 'minute', 'm');
            if (!options.hideSeconds) {
                if (options.separateMilliseconds || options.formatSubMilliseconds || !options.colonNotation && milliseconds < 1000) {
                    const seconds = Number(parsed.seconds);
                    const milliseconds = Number(parsed.milliseconds);
                    const microseconds = Number(parsed.microseconds);
                    const nanoseconds = Number(parsed.nanoseconds);
                    add(seconds, 'second', 's');
                    if (options.formatSubMilliseconds) {
                        add(milliseconds, 'millisecond', 'ms');
                        add(microseconds, 'microsecond', 'µs');
                        add(nanoseconds, 'nanosecond', 'ns');
                    } else {
                        const millisecondsAndBelow = milliseconds + microseconds / 1000 + nanoseconds / 1e6;
                        const millisecondsDecimalDigits = 'number' == typeof options.millisecondsDecimalDigits ? options.millisecondsDecimalDigits : 0;
                        const roundedMilliseconds = millisecondsAndBelow >= 1 ? Math.round(millisecondsAndBelow) : Math.ceil(millisecondsAndBelow);
                        const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : roundedMilliseconds;
                        add(Number.parseFloat(millisecondsString), 'millisecond', 'ms', millisecondsString);
                    }
                } else {
                    const seconds = (isBigInt ? Number(milliseconds % ONE_DAY_IN_MILLISECONDS) : milliseconds) / 1000 % 60;
                    const secondsDecimalDigits = 'number' == typeof options.secondsDecimalDigits ? options.secondsDecimalDigits : 1;
                    const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);
                    const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\.0+$/, '');
                    add(Number.parseFloat(secondsString), 'second', 's', secondsString);
                }
            }
            if (0 === result.length) return sign + '0' + (options.verbose ? ' milliseconds' : 'ms');
            const separator = options.colonNotation ? ':' : ' ';
            if ('number' == typeof options.unitCount) result = result.slice(0, Math.max(options.unitCount, 1));
            return sign + result.join(separator);
        }
        const logError = (result, verboseInfo)=>{
            if (result.failed) verboseLog({
                type: 'error',
                verboseMessage: result.shortMessage,
                verboseInfo,
                result
            });
        };
        const logResult = (result, verboseInfo)=>{
            if (!values_isVerbose(verboseInfo)) return;
            logError(result, verboseInfo);
            logDuration(result, verboseInfo);
        };
        const logDuration = (result, verboseInfo)=>{
            const verboseMessage = `(done in ${prettyMilliseconds(result.durationMs)})`;
            verboseLog({
                type: 'duration',
                verboseMessage,
                verboseInfo,
                result
            });
        };
        const handleResult = (result, verboseInfo, { reject })=>{
            logResult(result, verboseInfo);
            if (result.failed && reject) throw result;
            return result;
        };
        const getStdioItemType = (value1, optionName)=>{
            if (isAsyncGenerator(value1)) return 'asyncGenerator';
            if (isSyncGenerator(value1)) return 'generator';
            if (isUrl(value1)) return 'fileUrl';
            if (isFilePathObject(value1)) return 'filePath';
            if (isWebStream(value1)) return 'webStream';
            if (isStream(value1, {
                checkOpen: false
            })) return 'native';
            if (isUint8Array(value1)) return 'uint8Array';
            if (isAsyncIterableObject(value1)) return 'asyncIterable';
            if (isIterableObject(value1)) return 'iterable';
            if (type_isTransformStream(value1)) return getTransformStreamType({
                transform: value1
            }, optionName);
            if (isTransformOptions(value1)) return getTransformObjectType(value1, optionName);
            return 'native';
        };
        const getTransformObjectType = (value1, optionName)=>{
            if (isDuplexStream(value1.transform, {
                checkOpen: false
            })) return getDuplexType(value1, optionName);
            if (type_isTransformStream(value1.transform)) return getTransformStreamType(value1, optionName);
            return getGeneratorObjectType(value1, optionName);
        };
        const getDuplexType = (value1, optionName)=>{
            validateNonGeneratorType(value1, optionName, 'Duplex stream');
            return 'duplex';
        };
        const getTransformStreamType = (value1, optionName)=>{
            validateNonGeneratorType(value1, optionName, 'web TransformStream');
            return 'webTransform';
        };
        const validateNonGeneratorType = ({ final, binary, objectMode }, optionName, typeName)=>{
            checkUndefinedOption(final, `${optionName}.final`, typeName);
            checkUndefinedOption(binary, `${optionName}.binary`, typeName);
            checkBooleanOption(objectMode, `${optionName}.objectMode`);
        };
        const checkUndefinedOption = (value1, optionName, typeName)=>{
            if (void 0 !== value1) throw new TypeError(`The \`${optionName}\` option can only be defined when using a generator, not a ${typeName}.`);
        };
        const getGeneratorObjectType = ({ transform, final, binary, objectMode }, optionName)=>{
            if (void 0 !== transform && !isGenerator(transform)) throw new TypeError(`The \`${optionName}.transform\` option must be a generator, a Duplex stream or a web TransformStream.`);
            if (isDuplexStream(final, {
                checkOpen: false
            })) throw new TypeError(`The \`${optionName}.final\` option must not be a Duplex stream.`);
            if (type_isTransformStream(final)) throw new TypeError(`The \`${optionName}.final\` option must not be a web TransformStream.`);
            if (void 0 !== final && !isGenerator(final)) throw new TypeError(`The \`${optionName}.final\` option must be a generator.`);
            checkBooleanOption(binary, `${optionName}.binary`);
            checkBooleanOption(objectMode, `${optionName}.objectMode`);
            return isAsyncGenerator(transform) || isAsyncGenerator(final) ? 'asyncGenerator' : 'generator';
        };
        const checkBooleanOption = (value1, optionName)=>{
            if (void 0 !== value1 && 'boolean' != typeof value1) throw new TypeError(`The \`${optionName}\` option must use a boolean.`);
        };
        const isGenerator = (value1)=>isAsyncGenerator(value1) || isSyncGenerator(value1);
        const isAsyncGenerator = (value1)=>'[object AsyncGeneratorFunction]' === Object.prototype.toString.call(value1);
        const isSyncGenerator = (value1)=>'[object GeneratorFunction]' === Object.prototype.toString.call(value1);
        const isTransformOptions = (value1)=>isPlainObject(value1) && (void 0 !== value1.transform || void 0 !== value1.final);
        const isUrl = (value1)=>'[object URL]' === Object.prototype.toString.call(value1);
        const isRegularUrl = (value1)=>isUrl(value1) && 'file:' !== value1.protocol;
        const isFilePathObject = (value1)=>isPlainObject(value1) && Object.keys(value1).length > 0 && Object.keys(value1).every((key)=>FILE_PATH_KEYS.has(key)) && isFilePathString(value1.file);
        const FILE_PATH_KEYS = new Set([
            'file',
            'append'
        ]);
        const isFilePathString = (file)=>'string' == typeof file;
        const isUnknownStdioString = (type, value1)=>'native' === type && 'string' == typeof value1 && !KNOWN_STDIO_STRINGS.has(value1);
        const KNOWN_STDIO_STRINGS = new Set([
            'ipc',
            'ignore',
            'inherit',
            'overlapped',
            'pipe'
        ]);
        const type_isReadableStream = (value1)=>'[object ReadableStream]' === Object.prototype.toString.call(value1);
        const type_isWritableStream = (value1)=>'[object WritableStream]' === Object.prototype.toString.call(value1);
        const isWebStream = (value1)=>type_isReadableStream(value1) || type_isWritableStream(value1);
        const type_isTransformStream = (value1)=>type_isReadableStream(value1?.readable) && type_isWritableStream(value1?.writable);
        const isAsyncIterableObject = (value1)=>isObject(value1) && 'function' == typeof value1[Symbol.asyncIterator];
        const isIterableObject = (value1)=>isObject(value1) && 'function' == typeof value1[Symbol.iterator];
        const isObject = (value1)=>'object' == typeof value1 && null !== value1;
        const TRANSFORM_TYPES = new Set([
            'generator',
            'asyncGenerator',
            'duplex',
            'webTransform'
        ]);
        const FILE_TYPES = new Set([
            'fileUrl',
            'filePath',
            'fileNumber'
        ]);
        const SPECIAL_DUPLICATE_TYPES_SYNC = new Set([
            'fileUrl',
            'filePath'
        ]);
        const SPECIAL_DUPLICATE_TYPES = new Set([
            ...SPECIAL_DUPLICATE_TYPES_SYNC,
            'webStream',
            'nodeStream'
        ]);
        const FORBID_DUPLICATE_TYPES = new Set([
            'webTransform',
            'duplex'
        ]);
        const TYPE_TO_MESSAGE = {
            generator: 'a generator',
            asyncGenerator: 'an async generator',
            fileUrl: 'a file URL',
            filePath: 'a file path string',
            fileNumber: "a file descriptor number",
            webStream: 'a web stream',
            nodeStream: 'a Node.js stream',
            webTransform: 'a web TransformStream',
            duplex: 'a Duplex stream',
            native: 'any value',
            iterable: 'an iterable',
            asyncIterable: 'an async iterable',
            string: 'a string',
            uint8Array: 'a Uint8Array'
        };
        const getTransformObjectModes = (objectMode, index, newTransforms, direction)=>'output' === direction ? getOutputObjectModes(objectMode, index, newTransforms) : getInputObjectModes(objectMode, index, newTransforms);
        const getOutputObjectModes = (objectMode, index, newTransforms)=>{
            const writableObjectMode = 0 !== index && newTransforms[index - 1].value.readableObjectMode;
            const readableObjectMode = objectMode ?? writableObjectMode;
            return {
                writableObjectMode,
                readableObjectMode
            };
        };
        const getInputObjectModes = (objectMode, index, newTransforms)=>{
            const writableObjectMode = 0 === index ? true === objectMode : newTransforms[index - 1].value.readableObjectMode;
            const readableObjectMode = index !== newTransforms.length - 1 && (objectMode ?? writableObjectMode);
            return {
                writableObjectMode,
                readableObjectMode
            };
        };
        const getFdObjectMode = (stdioItems, direction)=>{
            const lastTransform = stdioItems.findLast(({ type })=>TRANSFORM_TYPES.has(type));
            if (void 0 === lastTransform) return false;
            return 'input' === direction ? lastTransform.value.writableObjectMode : lastTransform.value.readableObjectMode;
        };
        const normalizeTransforms = (stdioItems, optionName, direction, options)=>[
                ...stdioItems.filter(({ type })=>!TRANSFORM_TYPES.has(type)),
                ...getTransforms(stdioItems, optionName, direction, options)
            ];
        const getTransforms = (stdioItems, optionName, direction, { encoding })=>{
            const transforms = stdioItems.filter(({ type })=>TRANSFORM_TYPES.has(type));
            const newTransforms = Array.from({
                length: transforms.length
            });
            for (const [index, stdioItem] of Object.entries(transforms))newTransforms[index] = normalizeTransform({
                stdioItem,
                index: Number(index),
                newTransforms,
                optionName,
                direction,
                encoding
            });
            return sortTransforms(newTransforms, direction);
        };
        const normalizeTransform = ({ stdioItem, stdioItem: { type }, index, newTransforms, optionName, direction, encoding })=>{
            if ('duplex' === type) return normalizeDuplex({
                stdioItem,
                optionName
            });
            if ('webTransform' === type) return normalizeTransformStream({
                stdioItem,
                index,
                newTransforms,
                direction
            });
            return normalizeGenerator({
                stdioItem,
                index,
                newTransforms,
                direction,
                encoding
            });
        };
        const normalizeDuplex = ({ stdioItem, stdioItem: { value: { transform, transform: { writableObjectMode, readableObjectMode }, objectMode = readableObjectMode } }, optionName })=>{
            if (objectMode && !readableObjectMode) throw new TypeError(`The \`${optionName}.objectMode\` option can only be \`true\` if \`new Duplex({objectMode: true})\` is used.`);
            if (!objectMode && readableObjectMode) throw new TypeError(`The \`${optionName}.objectMode\` option cannot be \`false\` if \`new Duplex({objectMode: true})\` is used.`);
            return {
                ...stdioItem,
                value: {
                    transform,
                    writableObjectMode,
                    readableObjectMode
                }
            };
        };
        const normalizeTransformStream = ({ stdioItem, stdioItem: { value: value1 }, index, newTransforms, direction })=>{
            const { transform, objectMode } = isPlainObject(value1) ? value1 : {
                transform: value1
            };
            const { writableObjectMode, readableObjectMode } = getTransformObjectModes(objectMode, index, newTransforms, direction);
            return {
                ...stdioItem,
                value: {
                    transform,
                    writableObjectMode,
                    readableObjectMode
                }
            };
        };
        const normalizeGenerator = ({ stdioItem, stdioItem: { value: value1 }, index, newTransforms, direction, encoding })=>{
            const { transform, final, binary: binaryOption = false, preserveNewlines = false, objectMode } = isPlainObject(value1) ? value1 : {
                transform: value1
            };
            const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
            const { writableObjectMode, readableObjectMode } = getTransformObjectModes(objectMode, index, newTransforms, direction);
            return {
                ...stdioItem,
                value: {
                    transform,
                    final,
                    binary,
                    preserveNewlines,
                    writableObjectMode,
                    readableObjectMode
                }
            };
        };
        const sortTransforms = (newTransforms, direction)=>'input' === direction ? newTransforms.reverse() : newTransforms;
        const getStreamDirection = (stdioItems, fdNumber, optionName)=>{
            const directions = stdioItems.map((stdioItem)=>getStdioItemDirection(stdioItem, fdNumber));
            if (directions.includes('input') && directions.includes('output')) throw new TypeError(`The \`${optionName}\` option must not be an array of both readable and writable values.`);
            return directions.find(Boolean) ?? DEFAULT_DIRECTION;
        };
        const getStdioItemDirection = ({ type, value: value1 }, fdNumber)=>KNOWN_DIRECTIONS[fdNumber] ?? guessStreamDirection[type](value1);
        const KNOWN_DIRECTIONS = [
            'input',
            'output',
            'output'
        ];
        const anyDirection = ()=>void 0;
        const alwaysInput = ()=>'input';
        const guessStreamDirection = {
            generator: anyDirection,
            asyncGenerator: anyDirection,
            fileUrl: anyDirection,
            filePath: anyDirection,
            iterable: alwaysInput,
            asyncIterable: alwaysInput,
            uint8Array: alwaysInput,
            webStream: (value1)=>type_isWritableStream(value1) ? 'output' : 'input',
            nodeStream (value1) {
                if (!isReadableStream(value1, {
                    checkOpen: false
                })) return 'output';
                return isWritableStream(value1, {
                    checkOpen: false
                }) ? void 0 : 'input';
            },
            webTransform: anyDirection,
            duplex: anyDirection,
            native (value1) {
                const standardStreamDirection = getStandardStreamDirection(value1);
                if (void 0 !== standardStreamDirection) return standardStreamDirection;
                if (isStream(value1, {
                    checkOpen: false
                })) return guessStreamDirection.nodeStream(value1);
            }
        };
        const getStandardStreamDirection = (value1)=>{
            if ([
                0,
                __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].stdin
            ].includes(value1)) return 'input';
            if ([
                1,
                2,
                __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].stdout,
                __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].stderr
            ].includes(value1)) return 'output';
        };
        const DEFAULT_DIRECTION = 'output';
        const normalizeIpcStdioArray = (stdioArray, ipc)=>ipc && !stdioArray.includes('ipc') ? [
                ...stdioArray,
                'ipc'
            ] : stdioArray;
        const normalizeStdioOption = ({ stdio, ipc, buffer, ...options }, verboseInfo, isSync)=>{
            const stdioArray = getStdioArray(stdio, options).map((stdioOption, fdNumber)=>stdio_option_addDefaultValue(stdioOption, fdNumber));
            return isSync ? normalizeStdioSync(stdioArray, buffer, verboseInfo) : normalizeIpcStdioArray(stdioArray, ipc);
        };
        const getStdioArray = (stdio, options)=>{
            if (void 0 === stdio) return STANDARD_STREAMS_ALIASES.map((alias)=>options[alias]);
            if (hasAlias(options)) throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${STANDARD_STREAMS_ALIASES.map((alias)=>`\`${alias}\``).join(', ')}`);
            if ('string' == typeof stdio) return [
                stdio,
                stdio,
                stdio
            ];
            if (!Array.isArray(stdio)) throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
            const length = Math.max(stdio.length, STANDARD_STREAMS_ALIASES.length);
            return Array.from({
                length
            }, (_, fdNumber)=>stdio[fdNumber]);
        };
        const hasAlias = (options)=>STANDARD_STREAMS_ALIASES.some((alias)=>void 0 !== options[alias]);
        const stdio_option_addDefaultValue = (stdioOption, fdNumber)=>{
            if (Array.isArray(stdioOption)) return stdioOption.map((item)=>stdio_option_addDefaultValue(item, fdNumber));
            if (null == stdioOption) return fdNumber >= STANDARD_STREAMS_ALIASES.length ? 'ignore' : 'pipe';
            return stdioOption;
        };
        const normalizeStdioSync = (stdioArray, buffer, verboseInfo)=>stdioArray.map((stdioOption, fdNumber)=>!buffer[fdNumber] && 0 !== fdNumber && !isFullVerbose(verboseInfo, fdNumber) && isOutputPipeOnly(stdioOption) ? 'ignore' : stdioOption);
        const isOutputPipeOnly = (stdioOption)=>'pipe' === stdioOption || Array.isArray(stdioOption) && stdioOption.every((item)=>'pipe' === item);
        const handleNativeStream = ({ stdioItem, stdioItem: { type }, isStdioArray, fdNumber, direction, isSync })=>{
            if (!isStdioArray || 'native' !== type) return stdioItem;
            return isSync ? handleNativeStreamSync({
                stdioItem,
                fdNumber,
                direction
            }) : handleNativeStreamAsync({
                stdioItem,
                fdNumber
            });
        };
        const handleNativeStreamSync = ({ stdioItem, stdioItem: { value: value1, optionName }, fdNumber, direction })=>{
            const targetFd = getTargetFd({
                value: value1,
                optionName,
                fdNumber,
                direction
            });
            if (void 0 !== targetFd) return targetFd;
            if (isStream(value1, {
                checkOpen: false
            })) throw new TypeError(`The \`${optionName}: Stream\` option cannot both be an array and include a stream with synchronous methods.`);
            return stdioItem;
        };
        const getTargetFd = ({ value: value1, optionName, fdNumber, direction })=>{
            const targetFdNumber = getTargetFdNumber(value1, fdNumber);
            if (void 0 === targetFdNumber) return;
            if ('output' === direction) return {
                type: 'fileNumber',
                value: targetFdNumber,
                optionName
            };
            if (__WEBPACK_EXTERNAL_MODULE_node_tty_c64aab7e__["default"].isatty(targetFdNumber)) throw new TypeError(`The \`${optionName}: ${serializeOptionValue(value1)}\` option is invalid: it cannot be a TTY with synchronous methods.`);
            return {
                type: 'uint8Array',
                value: bufferToUint8Array((0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.readFileSync)(targetFdNumber)),
                optionName
            };
        };
        const getTargetFdNumber = (value1, fdNumber)=>{
            if ('inherit' === value1) return fdNumber;
            if ('number' == typeof value1) return value1;
            const standardStreamIndex = STANDARD_STREAMS.indexOf(value1);
            if (-1 !== standardStreamIndex) return standardStreamIndex;
        };
        const handleNativeStreamAsync = ({ stdioItem, stdioItem: { value: value1, optionName }, fdNumber })=>{
            if ('inherit' === value1) return {
                type: 'nodeStream',
                value: getStandardStream(fdNumber, value1, optionName),
                optionName
            };
            if ('number' == typeof value1) return {
                type: 'nodeStream',
                value: getStandardStream(value1, value1, optionName),
                optionName
            };
            if (isStream(value1, {
                checkOpen: false
            })) return {
                type: 'nodeStream',
                value: value1,
                optionName
            };
            return stdioItem;
        };
        const getStandardStream = (fdNumber, value1, optionName)=>{
            const standardStream = STANDARD_STREAMS[fdNumber];
            if (void 0 === standardStream) throw new TypeError(`The \`${optionName}: ${value1}\` option is invalid: no such standard stream.`);
            return standardStream;
        };
        const handleInputOptions = ({ input, inputFile }, fdNumber)=>0 === fdNumber ? [
                ...handleInputOption(input),
                ...handleInputFileOption(inputFile)
            ] : [];
        const handleInputOption = (input)=>void 0 === input ? [] : [
                {
                    type: getInputType(input),
                    value: input,
                    optionName: 'input'
                }
            ];
        const getInputType = (input)=>{
            if (isReadableStream(input, {
                checkOpen: false
            })) return 'nodeStream';
            if ('string' == typeof input) return 'string';
            if (isUint8Array(input)) return 'uint8Array';
            throw new Error('The `input` option must be a string, a Uint8Array or a Node.js Readable stream.');
        };
        const handleInputFileOption = (inputFile)=>void 0 === inputFile ? [] : [
                {
                    ...getInputFileType(inputFile),
                    optionName: 'inputFile'
                }
            ];
        const getInputFileType = (inputFile)=>{
            if (isUrl(inputFile)) return {
                type: 'fileUrl',
                value: inputFile
            };
            if (isFilePathString(inputFile)) return {
                type: 'filePath',
                value: {
                    file: inputFile
                }
            };
            throw new Error('The `inputFile` option must be a file path string or a file URL.');
        };
        const filterDuplicates = (stdioItems)=>stdioItems.filter((stdioItemOne, indexOne)=>stdioItems.every((stdioItemTwo, indexTwo)=>stdioItemOne.value !== stdioItemTwo.value || indexOne >= indexTwo || 'generator' === stdioItemOne.type || 'asyncGenerator' === stdioItemOne.type));
        const getDuplicateStream = ({ stdioItem: { type, value: value1, optionName }, direction, fileDescriptors, isSync })=>{
            const otherStdioItems = getOtherStdioItems(fileDescriptors, type);
            if (0 === otherStdioItems.length) return;
            if (isSync) {
                validateDuplicateStreamSync({
                    otherStdioItems,
                    type,
                    value: value1,
                    optionName,
                    direction
                });
                return;
            }
            if (SPECIAL_DUPLICATE_TYPES.has(type)) return getDuplicateStreamInstance({
                otherStdioItems,
                type,
                value: value1,
                optionName,
                direction
            });
            if (FORBID_DUPLICATE_TYPES.has(type)) validateDuplicateTransform({
                otherStdioItems,
                type,
                value: value1,
                optionName
            });
        };
        const getOtherStdioItems = (fileDescriptors, type)=>fileDescriptors.flatMap(({ direction, stdioItems })=>stdioItems.filter((stdioItem)=>stdioItem.type === type).map((stdioItem)=>({
                        ...stdioItem,
                        direction
                    })));
        const validateDuplicateStreamSync = ({ otherStdioItems, type, value: value1, optionName, direction })=>{
            if (SPECIAL_DUPLICATE_TYPES_SYNC.has(type)) getDuplicateStreamInstance({
                otherStdioItems,
                type,
                value: value1,
                optionName,
                direction
            });
        };
        const getDuplicateStreamInstance = ({ otherStdioItems, type, value: value1, optionName, direction })=>{
            const duplicateStdioItems = otherStdioItems.filter((stdioItem)=>hasSameValue(stdioItem, value1));
            if (0 === duplicateStdioItems.length) return;
            const differentStdioItem = duplicateStdioItems.find((stdioItem)=>stdioItem.direction !== direction);
            throwOnDuplicateStream(differentStdioItem, optionName, type);
            return 'output' === direction ? duplicateStdioItems[0].stream : void 0;
        };
        const hasSameValue = ({ type, value: value1 }, secondValue)=>{
            if ('filePath' === type) return value1.file === secondValue.file;
            if ('fileUrl' === type) return value1.href === secondValue.href;
            return value1 === secondValue;
        };
        const validateDuplicateTransform = ({ otherStdioItems, type, value: value1, optionName })=>{
            const duplicateStdioItem = otherStdioItems.find(({ value: { transform } })=>transform === value1.transform);
            throwOnDuplicateStream(duplicateStdioItem, optionName, type);
        };
        const throwOnDuplicateStream = (stdioItem, optionName, type)=>{
            if (void 0 !== stdioItem) throw new TypeError(`The \`${stdioItem.optionName}\` and \`${optionName}\` options must not target ${TYPE_TO_MESSAGE[type]} that is the same.`);
        };
        const handleStdio = (addProperties, options, verboseInfo, isSync)=>{
            const stdio = normalizeStdioOption(options, verboseInfo, isSync);
            const initialFileDescriptors = stdio.map((stdioOption, fdNumber)=>getFileDescriptor({
                    stdioOption,
                    fdNumber,
                    options,
                    isSync
                }));
            const fileDescriptors = getFinalFileDescriptors({
                initialFileDescriptors,
                addProperties,
                options,
                isSync
            });
            options.stdio = fileDescriptors.map(({ stdioItems })=>forwardStdio(stdioItems));
            return fileDescriptors;
        };
        const getFileDescriptor = ({ stdioOption, fdNumber, options, isSync })=>{
            const optionName = getStreamName(fdNumber);
            const { stdioItems: initialStdioItems, isStdioArray } = initializeStdioItems({
                stdioOption,
                fdNumber,
                options,
                optionName
            });
            const direction = getStreamDirection(initialStdioItems, fdNumber, optionName);
            const stdioItems = initialStdioItems.map((stdioItem)=>handleNativeStream({
                    stdioItem,
                    isStdioArray,
                    fdNumber,
                    direction,
                    isSync
                }));
            const normalizedStdioItems = normalizeTransforms(stdioItems, optionName, direction, options);
            const objectMode = getFdObjectMode(normalizedStdioItems, direction);
            validateFileObjectMode(normalizedStdioItems, objectMode);
            return {
                direction,
                objectMode,
                stdioItems: normalizedStdioItems
            };
        };
        const initializeStdioItems = ({ stdioOption, fdNumber, options, optionName })=>{
            const values = Array.isArray(stdioOption) ? stdioOption : [
                stdioOption
            ];
            const initialStdioItems = [
                ...values.map((value1)=>initializeStdioItem(value1, optionName)),
                ...handleInputOptions(options, fdNumber)
            ];
            const stdioItems = filterDuplicates(initialStdioItems);
            const isStdioArray = stdioItems.length > 1;
            validateStdioArray(stdioItems, isStdioArray, optionName);
            validateStreams(stdioItems);
            return {
                stdioItems,
                isStdioArray
            };
        };
        const initializeStdioItem = (value1, optionName)=>({
                type: getStdioItemType(value1, optionName),
                value: value1,
                optionName
            });
        const validateStdioArray = (stdioItems, isStdioArray, optionName)=>{
            if (0 === stdioItems.length) throw new TypeError(`The \`${optionName}\` option must not be an empty array.`);
            if (!isStdioArray) return;
            for (const { value: value1, optionName } of stdioItems)if (INVALID_STDIO_ARRAY_OPTIONS.has(value1)) throw new Error(`The \`${optionName}\` option must not include \`${value1}\`.`);
        };
        const INVALID_STDIO_ARRAY_OPTIONS = new Set([
            'ignore',
            'ipc'
        ]);
        const validateStreams = (stdioItems)=>{
            for (const stdioItem of stdioItems)validateFileStdio(stdioItem);
        };
        const validateFileStdio = ({ type, value: value1, optionName })=>{
            if (isRegularUrl(value1)) throw new TypeError(`The \`${optionName}: URL\` option must use the \`file:\` scheme.
For example, you can use the \`pathToFileURL()\` method of the \`url\` core module.`);
            if (isUnknownStdioString(type, value1)) throw new TypeError(`The \`${optionName}: { file: '...' }\` option must be used instead of \`${optionName}: '...'\`.`);
        };
        const validateFileObjectMode = (stdioItems, objectMode)=>{
            if (!objectMode) return;
            const fileStdioItem = stdioItems.find(({ type })=>FILE_TYPES.has(type));
            if (void 0 !== fileStdioItem) throw new TypeError(`The \`${fileStdioItem.optionName}\` option cannot use both files and transforms in objectMode.`);
        };
        const getFinalFileDescriptors = ({ initialFileDescriptors, addProperties, options, isSync })=>{
            const fileDescriptors = [];
            try {
                for (const fileDescriptor of initialFileDescriptors)fileDescriptors.push(getFinalFileDescriptor({
                    fileDescriptor,
                    fileDescriptors,
                    addProperties,
                    options,
                    isSync
                }));
                return fileDescriptors;
            } catch (error) {
                cleanupCustomStreams(fileDescriptors);
                throw error;
            }
        };
        const getFinalFileDescriptor = ({ fileDescriptor: { direction, objectMode, stdioItems }, fileDescriptors, addProperties, options, isSync })=>{
            const finalStdioItems = stdioItems.map((stdioItem)=>addStreamProperties({
                    stdioItem,
                    addProperties,
                    direction,
                    options,
                    fileDescriptors,
                    isSync
                }));
            return {
                direction,
                objectMode,
                stdioItems: finalStdioItems
            };
        };
        const addStreamProperties = ({ stdioItem, addProperties, direction, options, fileDescriptors, isSync })=>{
            const duplicateStream = getDuplicateStream({
                stdioItem,
                direction,
                fileDescriptors,
                isSync
            });
            if (void 0 !== duplicateStream) return {
                ...stdioItem,
                stream: duplicateStream
            };
            return {
                ...stdioItem,
                ...addProperties[direction][stdioItem.type](stdioItem, options)
            };
        };
        const cleanupCustomStreams = (fileDescriptors)=>{
            for (const { stdioItems } of fileDescriptors)for (const { stream } of stdioItems)if (void 0 !== stream && !isStandardStream(stream)) stream.destroy();
        };
        const forwardStdio = (stdioItems)=>{
            if (stdioItems.length > 1) return stdioItems.some(({ value: value1 })=>'overlapped' === value1) ? 'overlapped' : 'pipe';
            const [{ type, value: value1 }] = stdioItems;
            return 'native' === type ? value1 : 'pipe';
        };
        const handleStdioSync = (options, verboseInfo)=>handleStdio(addPropertiesSync, options, verboseInfo, true);
        const forbiddenIfSync = ({ type, optionName })=>{
            throwInvalidSyncValue(optionName, TYPE_TO_MESSAGE[type]);
        };
        const forbiddenNativeIfSync = ({ optionName, value: value1 })=>{
            if ('ipc' === value1 || 'overlapped' === value1) throwInvalidSyncValue(optionName, `"${value1}"`);
            return {};
        };
        const throwInvalidSyncValue = (optionName, value1)=>{
            throw new TypeError(`The \`${optionName}\` option cannot be ${value1} with synchronous methods.`);
        };
        const handle_sync_addProperties = {
            generator () {},
            asyncGenerator: forbiddenIfSync,
            webStream: forbiddenIfSync,
            nodeStream: forbiddenIfSync,
            webTransform: forbiddenIfSync,
            duplex: forbiddenIfSync,
            asyncIterable: forbiddenIfSync,
            native: forbiddenNativeIfSync
        };
        const addPropertiesSync = {
            input: {
                ...handle_sync_addProperties,
                fileUrl: ({ value: value1 })=>({
                        contents: [
                            bufferToUint8Array((0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.readFileSync)(value1))
                        ]
                    }),
                filePath: ({ value: { file } })=>({
                        contents: [
                            bufferToUint8Array((0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.readFileSync)(file))
                        ]
                    }),
                fileNumber: forbiddenIfSync,
                iterable: ({ value: value1 })=>({
                        contents: [
                            ...value1
                        ]
                    }),
                string: ({ value: value1 })=>({
                        contents: [
                            value1
                        ]
                    }),
                uint8Array: ({ value: value1 })=>({
                        contents: [
                            value1
                        ]
                    })
            },
            output: {
                ...handle_sync_addProperties,
                fileUrl: ({ value: value1 })=>({
                        path: value1
                    }),
                filePath: ({ value: { file, append } })=>({
                        path: file,
                        append
                    }),
                fileNumber: ({ value: value1 })=>({
                        path: value1
                    }),
                iterable: forbiddenIfSync,
                string: forbiddenIfSync,
                uint8Array: forbiddenIfSync
            }
        };
        const stripNewline = (value1, { stripFinalNewline }, fdNumber)=>getStripFinalNewline(stripFinalNewline, fdNumber) && void 0 !== value1 && !Array.isArray(value1) ? strip_final_newline_stripFinalNewline(value1) : value1;
        const getStripFinalNewline = (stripFinalNewline, fdNumber)=>'all' === fdNumber ? stripFinalNewline[1] || stripFinalNewline[2] : stripFinalNewline[fdNumber];
        const getSplitLinesGenerator = (binary, preserveNewlines, skipped, state)=>binary || skipped ? void 0 : initializeSplitLines(preserveNewlines, state);
        const splitLinesSync = (chunk, preserveNewlines, objectMode)=>objectMode ? chunk.flatMap((item)=>splitLinesItemSync(item, preserveNewlines)) : splitLinesItemSync(chunk, preserveNewlines);
        const splitLinesItemSync = (chunk, preserveNewlines)=>{
            const { transform, final } = initializeSplitLines(preserveNewlines, {});
            return [
                ...transform(chunk),
                ...final()
            ];
        };
        const initializeSplitLines = (preserveNewlines, state)=>{
            state.previousChunks = '';
            return {
                transform: splitGenerator.bind(void 0, state, preserveNewlines),
                final: linesFinal.bind(void 0, state)
            };
        };
        const splitGenerator = function*(state, preserveNewlines, chunk) {
            if ('string' != typeof chunk) {
                yield chunk;
                return;
            }
            let { previousChunks } = state;
            let start = -1;
            for(let end = 0; end < chunk.length; end += 1)if ('\n' === chunk[end]) {
                const newlineLength = getNewlineLength(chunk, end, preserveNewlines, state);
                let line = chunk.slice(start + 1, end + 1 - newlineLength);
                if (previousChunks.length > 0) {
                    line = concatString(previousChunks, line);
                    previousChunks = '';
                }
                yield line;
                start = end;
            }
            if (start !== chunk.length - 1) previousChunks = concatString(previousChunks, chunk.slice(start + 1));
            state.previousChunks = previousChunks;
        };
        const getNewlineLength = (chunk, end, preserveNewlines, state)=>{
            if (preserveNewlines) return 0;
            state.isWindowsNewline = 0 !== end && '\r' === chunk[end - 1];
            return state.isWindowsNewline ? 2 : 1;
        };
        const linesFinal = function*({ previousChunks }) {
            if (previousChunks.length > 0) yield previousChunks;
        };
        const getAppendNewlineGenerator = ({ binary, preserveNewlines, readableObjectMode, state })=>binary || preserveNewlines || readableObjectMode ? void 0 : {
                transform: appendNewlineGenerator.bind(void 0, state)
            };
        const appendNewlineGenerator = function*({ isWindowsNewline = false }, chunk) {
            const { unixNewline, windowsNewline, LF, concatBytes } = 'string' == typeof chunk ? linesStringInfo : linesUint8ArrayInfo;
            if (chunk.at(-1) === LF) {
                yield chunk;
                return;
            }
            const newline = isWindowsNewline ? windowsNewline : unixNewline;
            yield concatBytes(chunk, newline);
        };
        const concatString = (firstChunk, secondChunk)=>`${firstChunk}${secondChunk}`;
        const linesStringInfo = {
            windowsNewline: '\r\n',
            unixNewline: '\n',
            LF: '\n',
            concatBytes: concatString
        };
        const concatUint8Array = (firstChunk, secondChunk)=>{
            const chunk = new Uint8Array(firstChunk.length + secondChunk.length);
            chunk.set(firstChunk, 0);
            chunk.set(secondChunk, firstChunk.length);
            return chunk;
        };
        const linesUint8ArrayInfo = {
            windowsNewline: new Uint8Array([
                0x0D,
                0x0A
            ]),
            unixNewline: new Uint8Array([
                0x0A
            ]),
            LF: 0x0A,
            concatBytes: concatUint8Array
        };
        const getValidateTransformInput = (writableObjectMode, optionName)=>writableObjectMode ? void 0 : validateStringTransformInput.bind(void 0, optionName);
        const validateStringTransformInput = function*(optionName, chunk) {
            if ('string' != typeof chunk && !isUint8Array(chunk) && !__WEBPACK_EXTERNAL_MODULE_node_buffer_fb286294__.Buffer.isBuffer(chunk)) throw new TypeError(`The \`${optionName}\` option's transform must use "objectMode: true" to receive as input: ${typeof chunk}.`);
            yield chunk;
        };
        const getValidateTransformReturn = (readableObjectMode, optionName)=>readableObjectMode ? validateObjectTransformReturn.bind(void 0, optionName) : validateStringTransformReturn.bind(void 0, optionName);
        const validateObjectTransformReturn = function*(optionName, chunk) {
            validateEmptyReturn(optionName, chunk);
            yield chunk;
        };
        const validateStringTransformReturn = function*(optionName, chunk) {
            validateEmptyReturn(optionName, chunk);
            if ('string' != typeof chunk && !isUint8Array(chunk)) throw new TypeError(`The \`${optionName}\` option's function must yield a string or an Uint8Array, not ${typeof chunk}.`);
            yield chunk;
        };
        const validateEmptyReturn = (optionName, chunk)=>{
            if (null == chunk) throw new TypeError(`The \`${optionName}\` option's function must not call \`yield ${chunk}\`.
Instead, \`yield\` should either be called with a value, or not be called at all. For example:
  if (condition) { yield value; }`);
        };
        const getEncodingTransformGenerator = (binary, encoding, skipped)=>{
            if (skipped) return;
            if (binary) return {
                transform: encodingUint8ArrayGenerator.bind(void 0, new TextEncoder())
            };
            const stringDecoder = new __WEBPACK_EXTERNAL_MODULE_node_string_decoder_28f74b45__.StringDecoder(encoding);
            return {
                transform: encodingStringGenerator.bind(void 0, stringDecoder),
                final: encodingStringFinal.bind(void 0, stringDecoder)
            };
        };
        const encodingUint8ArrayGenerator = function*(textEncoder, chunk) {
            if (__WEBPACK_EXTERNAL_MODULE_node_buffer_fb286294__.Buffer.isBuffer(chunk)) yield bufferToUint8Array(chunk);
            else if ('string' == typeof chunk) yield textEncoder.encode(chunk);
            else yield chunk;
        };
        const encodingStringGenerator = function*(stringDecoder, chunk) {
            yield isUint8Array(chunk) ? stringDecoder.write(chunk) : chunk;
        };
        const encodingStringFinal = function*(stringDecoder) {
            const lastChunk = stringDecoder.end();
            if ('' !== lastChunk) yield lastChunk;
        };
        const pushChunks = (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.callbackify)(async (getChunks, state, getChunksArguments, transformStream)=>{
            state.currentIterable = getChunks(...getChunksArguments);
            try {
                for await (const chunk of state.currentIterable)transformStream.push(chunk);
            } finally{
                delete state.currentIterable;
            }
        });
        const transformChunk = async function*(chunk, generators, index) {
            if (index === generators.length) {
                yield chunk;
                return;
            }
            const { transform = identityGenerator } = generators[index];
            for await (const transformedChunk of transform(chunk))yield* transformChunk(transformedChunk, generators, index + 1);
        };
        const finalChunks = async function*(generators) {
            for (const [index, { final }] of Object.entries(generators))yield* generatorFinalChunks(final, Number(index), generators);
        };
        const generatorFinalChunks = async function*(final, index, generators) {
            if (void 0 === final) return;
            for await (const finalChunk of final())yield* transformChunk(finalChunk, generators, index + 1);
        };
        const destroyTransform = (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.callbackify)(async ({ currentIterable }, error)=>{
            if (void 0 !== currentIterable) {
                await (error ? currentIterable.throw(error) : currentIterable.return());
                return;
            }
            if (error) throw error;
        });
        const identityGenerator = function*(chunk) {
            yield chunk;
        };
        const pushChunksSync = (getChunksSync, getChunksArguments, transformStream, done)=>{
            try {
                for (const chunk of getChunksSync(...getChunksArguments))transformStream.push(chunk);
                done();
            } catch (error) {
                done(error);
            }
        };
        const runTransformSync = (generators, chunks)=>[
                ...chunks.flatMap((chunk)=>[
                        ...transformChunkSync(chunk, generators, 0)
                    ]),
                ...finalChunksSync(generators)
            ];
        const transformChunkSync = function*(chunk, generators, index) {
            if (index === generators.length) {
                yield chunk;
                return;
            }
            const { transform = run_sync_identityGenerator } = generators[index];
            for (const transformedChunk of transform(chunk))yield* transformChunkSync(transformedChunk, generators, index + 1);
        };
        const finalChunksSync = function*(generators) {
            for (const [index, { final }] of Object.entries(generators))yield* generatorFinalChunksSync(final, Number(index), generators);
        };
        const generatorFinalChunksSync = function*(final, index, generators) {
            if (void 0 === final) return;
            for (const finalChunk of final())yield* transformChunkSync(finalChunk, generators, index + 1);
        };
        const run_sync_identityGenerator = function*(chunk) {
            yield chunk;
        };
        const generatorToStream = ({ value: value1, value: { transform, final, writableObjectMode, readableObjectMode }, optionName }, { encoding })=>{
            const state = {};
            const generators = addInternalGenerators(value1, encoding, optionName);
            const transformAsync = isAsyncGenerator(transform);
            const finalAsync = isAsyncGenerator(final);
            const transformMethod = transformAsync ? pushChunks.bind(void 0, transformChunk, state) : pushChunksSync.bind(void 0, transformChunkSync);
            const finalMethod = transformAsync || finalAsync ? pushChunks.bind(void 0, finalChunks, state) : pushChunksSync.bind(void 0, finalChunksSync);
            const destroyMethod = transformAsync || finalAsync ? destroyTransform.bind(void 0, state) : void 0;
            const stream = new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Transform({
                writableObjectMode,
                writableHighWaterMark: (0, __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.getDefaultHighWaterMark)(writableObjectMode),
                readableObjectMode,
                readableHighWaterMark: (0, __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.getDefaultHighWaterMark)(readableObjectMode),
                transform (chunk, encoding, done) {
                    transformMethod([
                        chunk,
                        generators,
                        0
                    ], this, done);
                },
                flush (done) {
                    finalMethod([
                        generators
                    ], this, done);
                },
                destroy: destroyMethod
            });
            return {
                stream
            };
        };
        const runGeneratorsSync = (chunks, stdioItems, encoding, isInput)=>{
            const generators = stdioItems.filter(({ type })=>'generator' === type);
            const reversedGenerators = isInput ? generators.reverse() : generators;
            for (const { value: value1, optionName } of reversedGenerators){
                const generators = addInternalGenerators(value1, encoding, optionName);
                chunks = runTransformSync(generators, chunks);
            }
            return chunks;
        };
        const addInternalGenerators = ({ transform, final, binary, writableObjectMode, readableObjectMode, preserveNewlines }, encoding, optionName)=>{
            const state = {};
            return [
                {
                    transform: getValidateTransformInput(writableObjectMode, optionName)
                },
                getEncodingTransformGenerator(binary, encoding, writableObjectMode),
                getSplitLinesGenerator(binary, preserveNewlines, writableObjectMode, state),
                {
                    transform,
                    final
                },
                {
                    transform: getValidateTransformReturn(readableObjectMode, optionName)
                },
                getAppendNewlineGenerator({
                    binary,
                    preserveNewlines,
                    readableObjectMode,
                    state
                })
            ].filter(Boolean);
        };
        const addInputOptionsSync = (fileDescriptors, options)=>{
            for (const fdNumber of getInputFdNumbers(fileDescriptors))addInputOptionSync(fileDescriptors, fdNumber, options);
        };
        const getInputFdNumbers = (fileDescriptors)=>new Set(Object.entries(fileDescriptors).filter(([, { direction }])=>'input' === direction).map(([fdNumber])=>Number(fdNumber)));
        const addInputOptionSync = (fileDescriptors, fdNumber, options)=>{
            const { stdioItems } = fileDescriptors[fdNumber];
            const allStdioItems = stdioItems.filter(({ contents })=>void 0 !== contents);
            if (0 === allStdioItems.length) return;
            if (0 !== fdNumber) {
                const [{ type, optionName }] = allStdioItems;
                throw new TypeError(`Only the \`stdin\` option, not \`${optionName}\`, can be ${TYPE_TO_MESSAGE[type]} with synchronous methods.`);
            }
            const allContents = allStdioItems.map(({ contents })=>contents);
            const transformedContents = allContents.map((contents)=>applySingleInputGeneratorsSync(contents, stdioItems));
            options.input = joinToUint8Array(transformedContents);
        };
        const applySingleInputGeneratorsSync = (contents, stdioItems)=>{
            const newContents = runGeneratorsSync(contents, stdioItems, 'utf8', true);
            validateSerializable(newContents);
            return joinToUint8Array(newContents);
        };
        const validateSerializable = (newContents)=>{
            const invalidItem = newContents.find((item)=>'string' != typeof item && !isUint8Array(item));
            if (void 0 !== invalidItem) throw new TypeError(`The \`stdin\` option is invalid: when passing objects as input, a transform must be used to serialize them to strings or Uint8Arrays: ${invalidItem}.`);
        };
        const shouldLogOutput = ({ stdioItems, encoding, verboseInfo, fdNumber })=>'all' !== fdNumber && isFullVerbose(verboseInfo, fdNumber) && !BINARY_ENCODINGS.has(encoding) && fdUsesVerbose(fdNumber) && (stdioItems.some(({ type, value: value1 })=>'native' === type && PIPED_STDIO_VALUES.has(value1)) || stdioItems.every(({ type })=>TRANSFORM_TYPES.has(type)));
        const fdUsesVerbose = (fdNumber)=>1 === fdNumber || 2 === fdNumber;
        const PIPED_STDIO_VALUES = new Set([
            'pipe',
            'overlapped'
        ]);
        const logLines = async (linesIterable, stream, fdNumber, verboseInfo)=>{
            for await (const line of linesIterable)if (!isPipingStream(stream)) logLine(line, fdNumber, verboseInfo);
        };
        const logLinesSync = (linesArray, fdNumber, verboseInfo)=>{
            for (const line of linesArray)logLine(line, fdNumber, verboseInfo);
        };
        const isPipingStream = (stream)=>stream._readableState.pipes.length > 0;
        const logLine = (line, fdNumber, verboseInfo)=>{
            const verboseMessage = serializeVerboseMessage(line);
            verboseLog({
                type: 'output',
                verboseMessage,
                fdNumber,
                verboseInfo
            });
        };
        const transformOutputSync = ({ fileDescriptors, syncResult: { output }, options, isMaxBuffer, verboseInfo })=>{
            if (null === output) return {
                output: Array.from({
                    length: 3
                })
            };
            const state = {};
            const outputFiles = new Set([]);
            const transformedOutput = output.map((result, fdNumber)=>transformOutputResultSync({
                    result,
                    fileDescriptors,
                    fdNumber,
                    state,
                    outputFiles,
                    isMaxBuffer,
                    verboseInfo
                }, options));
            return {
                output: transformedOutput,
                ...state
            };
        };
        const transformOutputResultSync = ({ result, fileDescriptors, fdNumber, state, outputFiles, isMaxBuffer, verboseInfo }, { buffer, encoding, lines, stripFinalNewline, maxBuffer })=>{
            if (null === result) return;
            const truncatedResult = truncateMaxBufferSync(result, isMaxBuffer, maxBuffer);
            const uint8ArrayResult = bufferToUint8Array(truncatedResult);
            const { stdioItems, objectMode } = fileDescriptors[fdNumber];
            const chunks = runOutputGeneratorsSync([
                uint8ArrayResult
            ], stdioItems, encoding, state);
            const { serializedResult, finalResult = serializedResult } = serializeChunks({
                chunks,
                objectMode,
                encoding,
                lines,
                stripFinalNewline,
                fdNumber
            });
            logOutputSync({
                serializedResult,
                fdNumber,
                state,
                verboseInfo,
                encoding,
                stdioItems,
                objectMode
            });
            const returnedResult = buffer[fdNumber] ? finalResult : void 0;
            try {
                if (void 0 === state.error) writeToFiles(serializedResult, stdioItems, outputFiles);
                return returnedResult;
            } catch (error) {
                state.error = error;
                return returnedResult;
            }
        };
        const runOutputGeneratorsSync = (chunks, stdioItems, encoding, state)=>{
            try {
                return runGeneratorsSync(chunks, stdioItems, encoding, false);
            } catch (error) {
                state.error = error;
                return chunks;
            }
        };
        const serializeChunks = ({ chunks, objectMode, encoding, lines, stripFinalNewline, fdNumber })=>{
            if (objectMode) return {
                serializedResult: chunks
            };
            if ('buffer' === encoding) return {
                serializedResult: joinToUint8Array(chunks)
            };
            const serializedResult = joinToString(chunks, encoding);
            if (lines[fdNumber]) return {
                serializedResult,
                finalResult: splitLinesSync(serializedResult, !stripFinalNewline[fdNumber], objectMode)
            };
            return {
                serializedResult
            };
        };
        const logOutputSync = ({ serializedResult, fdNumber, state, verboseInfo, encoding, stdioItems, objectMode })=>{
            if (!shouldLogOutput({
                stdioItems,
                encoding,
                verboseInfo,
                fdNumber
            })) return;
            const linesArray = splitLinesSync(serializedResult, false, objectMode);
            try {
                logLinesSync(linesArray, fdNumber, verboseInfo);
            } catch (error) {
                state.error ??= error;
            }
        };
        const writeToFiles = (serializedResult, stdioItems, outputFiles)=>{
            for (const { path, append } of stdioItems.filter(({ type })=>FILE_TYPES.has(type))){
                const pathString = 'string' == typeof path ? path : path.toString();
                if (append || outputFiles.has(pathString)) (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.appendFileSync)(path, serializedResult);
                else {
                    outputFiles.add(pathString);
                    (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.writeFileSync)(path, serializedResult);
                }
            }
        };
        const getAllSync = ([, stdout, stderr], options)=>{
            if (!options.all) return;
            if (void 0 === stdout) return stderr;
            if (void 0 === stderr) return stdout;
            if (Array.isArray(stdout)) return Array.isArray(stderr) ? [
                ...stdout,
                ...stderr
            ] : [
                ...stdout,
                stripNewline(stderr, options, 'all')
            ];
            if (Array.isArray(stderr)) return [
                stripNewline(stdout, options, 'all'),
                ...stderr
            ];
            if (isUint8Array(stdout) && isUint8Array(stderr)) return concatUint8Arrays([
                stdout,
                stderr
            ]);
            return `${stdout}${stderr}`;
        };
        const waitForExit = async (subprocess, context)=>{
            const [exitCode, signal] = await waitForExitOrError(subprocess);
            context.isForcefullyTerminated ??= false;
            return [
                exitCode,
                signal
            ];
        };
        const waitForExitOrError = async (subprocess)=>{
            const [spawnPayload, exitPayload] = await Promise.allSettled([
                (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(subprocess, 'spawn'),
                (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(subprocess, 'exit')
            ]);
            if ('rejected' === spawnPayload.status) return [];
            return 'rejected' === exitPayload.status ? waitForSubprocessExit(subprocess) : exitPayload.value;
        };
        const waitForSubprocessExit = async (subprocess)=>{
            try {
                return await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(subprocess, 'exit');
            } catch  {
                return waitForSubprocessExit(subprocess);
            }
        };
        const waitForSuccessfulExit = async (exitPromise)=>{
            const [exitCode, signal] = await exitPromise;
            if (!isSubprocessErrorExit(exitCode, signal) && isFailedExit(exitCode, signal)) throw new DiscardedError();
            return [
                exitCode,
                signal
            ];
        };
        const isSubprocessErrorExit = (exitCode, signal)=>void 0 === exitCode && void 0 === signal;
        const isFailedExit = (exitCode, signal)=>0 !== exitCode || null !== signal;
        const getExitResultSync = ({ error, status: exitCode, signal, output }, { maxBuffer })=>{
            const resultError = getResultError(error, exitCode, signal);
            const timedOut = resultError?.code === 'ETIMEDOUT';
            const isMaxBuffer = isMaxBufferSync(resultError, output, maxBuffer);
            return {
                resultError,
                exitCode,
                signal,
                timedOut,
                isMaxBuffer
            };
        };
        const getResultError = (error, exitCode, signal)=>{
            if (void 0 !== error) return error;
            return isFailedExit(exitCode, signal) ? new DiscardedError() : void 0;
        };
        const execaCoreSync = (rawFile, rawArguments, rawOptions)=>{
            const { file, commandArguments, command, escapedCommand, startTime, verboseInfo, options, fileDescriptors } = handleSyncArguments(rawFile, rawArguments, rawOptions);
            const result = spawnSubprocessSync({
                file,
                commandArguments,
                options,
                command,
                escapedCommand,
                verboseInfo,
                fileDescriptors,
                startTime
            });
            return handleResult(result, verboseInfo, options);
        };
        const handleSyncArguments = (rawFile, rawArguments, rawOptions)=>{
            const { command, escapedCommand, startTime, verboseInfo } = handleCommand(rawFile, rawArguments, rawOptions);
            const syncOptions = normalizeSyncOptions(rawOptions);
            const { file, commandArguments, options } = normalizeOptions(rawFile, rawArguments, syncOptions);
            validateSyncOptions(options);
            const fileDescriptors = handleStdioSync(options, verboseInfo);
            return {
                file,
                commandArguments,
                command,
                escapedCommand,
                startTime,
                verboseInfo,
                options,
                fileDescriptors
            };
        };
        const normalizeSyncOptions = (options)=>options.node && !options.ipc ? {
                ...options,
                ipc: false
            } : options;
        const validateSyncOptions = ({ ipc, ipcInput, detached, cancelSignal })=>{
            if (ipcInput) throwInvalidSyncOption('ipcInput');
            if (ipc) throwInvalidSyncOption('ipc: true');
            if (detached) throwInvalidSyncOption('detached: true');
            if (cancelSignal) throwInvalidSyncOption('cancelSignal');
        };
        const throwInvalidSyncOption = (value1)=>{
            throw new TypeError(`The "${value1}" option cannot be used with synchronous methods.`);
        };
        const spawnSubprocessSync = ({ file, commandArguments, options, command, escapedCommand, verboseInfo, fileDescriptors, startTime })=>{
            const syncResult = runSubprocessSync({
                file,
                commandArguments,
                options,
                command,
                escapedCommand,
                fileDescriptors,
                startTime
            });
            if (syncResult.failed) return syncResult;
            const { resultError, exitCode, signal, timedOut, isMaxBuffer } = getExitResultSync(syncResult, options);
            const { output, error = resultError } = transformOutputSync({
                fileDescriptors,
                syncResult,
                options,
                isMaxBuffer,
                verboseInfo
            });
            const stdio = output.map((stdioOutput, fdNumber)=>stripNewline(stdioOutput, options, fdNumber));
            const all = stripNewline(getAllSync(output, options), options, 'all');
            return getSyncResult({
                error,
                exitCode,
                signal,
                timedOut,
                isMaxBuffer,
                stdio,
                all,
                options,
                command,
                escapedCommand,
                startTime
            });
        };
        const runSubprocessSync = ({ file, commandArguments, options, command, escapedCommand, fileDescriptors, startTime })=>{
            try {
                addInputOptionsSync(fileDescriptors, options);
                const normalizedOptions = normalizeSpawnSyncOptions(options);
                return (0, __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.spawnSync)(file, commandArguments, normalizedOptions);
            } catch (error) {
                return makeEarlyError({
                    error,
                    command,
                    escapedCommand,
                    fileDescriptors,
                    options,
                    startTime,
                    isSync: true
                });
            }
        };
        const normalizeSpawnSyncOptions = ({ encoding, maxBuffer, ...options })=>({
                ...options,
                encoding: 'buffer',
                maxBuffer: getMaxBufferSync(maxBuffer)
            });
        const getSyncResult = ({ error, exitCode, signal, timedOut, isMaxBuffer, stdio, all, options, command, escapedCommand, startTime })=>void 0 === error ? makeSuccessResult({
                command,
                escapedCommand,
                stdio,
                all,
                ipcOutput: [],
                options,
                startTime
            }) : makeError({
                error,
                command,
                escapedCommand,
                timedOut,
                isCanceled: false,
                isGracefullyCanceled: false,
                isMaxBuffer,
                isForcefullyTerminated: false,
                exitCode,
                signal,
                stdio,
                all,
                ipcOutput: [],
                options,
                startTime,
                isSync: true
            });
        const getOneMessage = ({ anyProcess, channel, isSubprocess, ipc }, { reference = true, filter } = {})=>{
            validateIpcMethod({
                methodName: 'getOneMessage',
                isSubprocess,
                ipc,
                isConnected: forward_isConnected(anyProcess)
            });
            return getOneMessageAsync({
                anyProcess,
                channel,
                isSubprocess,
                filter,
                reference
            });
        };
        const getOneMessageAsync = async ({ anyProcess, channel, isSubprocess, filter, reference })=>{
            addReference(channel, reference);
            const ipcEmitter = getIpcEmitter(anyProcess, channel, isSubprocess);
            const controller = new AbortController();
            try {
                return await Promise.race([
                    getMessage(ipcEmitter, filter, controller),
                    get_one_throwOnDisconnect(ipcEmitter, isSubprocess, controller),
                    throwOnStrictError(ipcEmitter, isSubprocess, controller)
                ]);
            } catch (error) {
                disconnect(anyProcess);
                throw error;
            } finally{
                controller.abort();
                removeReference(channel, reference);
            }
        };
        const getMessage = async (ipcEmitter, filter, { signal })=>{
            if (void 0 === filter) {
                const [message] = await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(ipcEmitter, 'message', {
                    signal
                });
                return message;
            }
            for await (const [message] of (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.on)(ipcEmitter, 'message', {
                signal
            }))if (filter(message)) return message;
        };
        const get_one_throwOnDisconnect = async (ipcEmitter, isSubprocess, { signal })=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(ipcEmitter, 'disconnect', {
                signal
            });
            throwOnEarlyDisconnect(isSubprocess);
        };
        const throwOnStrictError = async (ipcEmitter, isSubprocess, { signal })=>{
            const [error] = await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(ipcEmitter, 'strict:error', {
                signal
            });
            throw getStrictResponseError(error, isSubprocess);
        };
        const getEachMessage = ({ anyProcess, channel, isSubprocess, ipc }, { reference = true } = {})=>loopOnMessages({
                anyProcess,
                channel,
                isSubprocess,
                ipc,
                shouldAwait: !isSubprocess,
                reference
            });
        const loopOnMessages = ({ anyProcess, channel, isSubprocess, ipc, shouldAwait, reference })=>{
            validateIpcMethod({
                methodName: 'getEachMessage',
                isSubprocess,
                ipc,
                isConnected: forward_isConnected(anyProcess)
            });
            addReference(channel, reference);
            const ipcEmitter = getIpcEmitter(anyProcess, channel, isSubprocess);
            const controller = new AbortController();
            const state = {};
            stopOnDisconnect(anyProcess, ipcEmitter, controller);
            abortOnStrictError({
                ipcEmitter,
                isSubprocess,
                controller,
                state
            });
            return iterateOnMessages({
                anyProcess,
                channel,
                ipcEmitter,
                isSubprocess,
                shouldAwait,
                controller,
                state,
                reference
            });
        };
        const stopOnDisconnect = async (anyProcess, ipcEmitter, controller)=>{
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(ipcEmitter, 'disconnect', {
                    signal: controller.signal
                });
                controller.abort();
            } catch  {}
        };
        const abortOnStrictError = async ({ ipcEmitter, isSubprocess, controller, state })=>{
            try {
                const [error] = await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(ipcEmitter, 'strict:error', {
                    signal: controller.signal
                });
                state.error = getStrictResponseError(error, isSubprocess);
                controller.abort();
            } catch  {}
        };
        const iterateOnMessages = async function*({ anyProcess, channel, ipcEmitter, isSubprocess, shouldAwait, controller, state, reference }) {
            try {
                for await (const [message] of (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.on)(ipcEmitter, 'message', {
                    signal: controller.signal
                })){
                    throwIfStrictError(state);
                    yield message;
                }
            } catch  {
                throwIfStrictError(state);
            } finally{
                controller.abort();
                removeReference(channel, reference);
                if (!isSubprocess) disconnect(anyProcess);
                if (shouldAwait) await anyProcess;
            }
        };
        const throwIfStrictError = ({ error })=>{
            if (error) throw error;
        };
        const addIpcMethods = (subprocess, { ipc })=>{
            Object.assign(subprocess, getIpcMethods(subprocess, false, ipc));
        };
        const getIpcExport = ()=>{
            const anyProcess = __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"];
            const isSubprocess = true;
            const ipc = void 0 !== __WEBPACK_EXTERNAL_MODULE_node_process_786449bf__["default"].channel;
            return {
                ...getIpcMethods(anyProcess, isSubprocess, ipc),
                getCancelSignal: getCancelSignal.bind(void 0, {
                    anyProcess,
                    channel: anyProcess.channel,
                    isSubprocess,
                    ipc
                })
            };
        };
        const getIpcMethods = (anyProcess, isSubprocess, ipc)=>({
                sendMessage: sendMessage.bind(void 0, {
                    anyProcess,
                    channel: anyProcess.channel,
                    isSubprocess,
                    ipc
                }),
                getOneMessage: getOneMessage.bind(void 0, {
                    anyProcess,
                    channel: anyProcess.channel,
                    isSubprocess,
                    ipc
                }),
                getEachMessage: getEachMessage.bind(void 0, {
                    anyProcess,
                    channel: anyProcess.channel,
                    isSubprocess,
                    ipc
                })
            });
        const handleEarlyError = ({ error, command, escapedCommand, fileDescriptors, options, startTime, verboseInfo })=>{
            cleanupCustomStreams(fileDescriptors);
            const subprocess = new __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.ChildProcess();
            createDummyStreams(subprocess, fileDescriptors);
            Object.assign(subprocess, {
                readable: early_error_readable,
                writable: early_error_writable,
                duplex: early_error_duplex
            });
            const earlyError = makeEarlyError({
                error,
                command,
                escapedCommand,
                fileDescriptors,
                options,
                startTime,
                isSync: false
            });
            const promise = handleDummyPromise(earlyError, verboseInfo, options);
            return {
                subprocess,
                promise
            };
        };
        const createDummyStreams = (subprocess, fileDescriptors)=>{
            const stdin = createDummyStream();
            const stdout = createDummyStream();
            const stderr = createDummyStream();
            const extraStdio = Array.from({
                length: fileDescriptors.length - 3
            }, createDummyStream);
            const all = createDummyStream();
            const stdio = [
                stdin,
                stdout,
                stderr,
                ...extraStdio
            ];
            Object.assign(subprocess, {
                stdin,
                stdout,
                stderr,
                all,
                stdio
            });
        };
        const createDummyStream = ()=>{
            const stream = new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.PassThrough();
            stream.end();
            return stream;
        };
        const early_error_readable = ()=>new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable({
                read () {}
            });
        const early_error_writable = ()=>new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Writable({
                write () {}
            });
        const early_error_duplex = ()=>new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Duplex({
                read () {},
                write () {}
            });
        const handleDummyPromise = async (error, verboseInfo, options)=>handleResult(error, verboseInfo, options);
        const handleStdioAsync = (options, verboseInfo)=>handleStdio(addPropertiesAsync, options, verboseInfo, false);
        const forbiddenIfAsync = ({ type, optionName })=>{
            throw new TypeError(`The \`${optionName}\` option cannot be ${TYPE_TO_MESSAGE[type]}.`);
        };
        const handle_async_addProperties = {
            fileNumber: forbiddenIfAsync,
            generator: generatorToStream,
            asyncGenerator: generatorToStream,
            nodeStream: ({ value: value1 })=>({
                    stream: value1
                }),
            webTransform ({ value: { transform, writableObjectMode, readableObjectMode } }) {
                const objectMode = writableObjectMode || readableObjectMode;
                const stream = __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Duplex.fromWeb(transform, {
                    objectMode
                });
                return {
                    stream
                };
            },
            duplex: ({ value: { transform } })=>({
                    stream: transform
                }),
            native () {}
        };
        const addPropertiesAsync = {
            input: {
                ...handle_async_addProperties,
                fileUrl: ({ value: value1 })=>({
                        stream: (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.createReadStream)(value1)
                    }),
                filePath: ({ value: { file } })=>({
                        stream: (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.createReadStream)(file)
                    }),
                webStream: ({ value: value1 })=>({
                        stream: __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable.fromWeb(value1)
                    }),
                iterable: ({ value: value1 })=>({
                        stream: __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable.from(value1)
                    }),
                asyncIterable: ({ value: value1 })=>({
                        stream: __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable.from(value1)
                    }),
                string: ({ value: value1 })=>({
                        stream: __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable.from(value1)
                    }),
                uint8Array: ({ value: value1 })=>({
                        stream: __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable.from(__WEBPACK_EXTERNAL_MODULE_node_buffer_fb286294__.Buffer.from(value1))
                    })
            },
            output: {
                ...handle_async_addProperties,
                fileUrl: ({ value: value1 })=>({
                        stream: (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.createWriteStream)(value1)
                    }),
                filePath: ({ value: { file, append } })=>({
                        stream: (0, __WEBPACK_EXTERNAL_MODULE_node_fs_5ea92f0c__.createWriteStream)(file, append ? {
                            flags: 'a'
                        } : {})
                    }),
                webStream: ({ value: value1 })=>({
                        stream: __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Writable.fromWeb(value1)
                    }),
                iterable: forbiddenIfAsync,
                asyncIterable: forbiddenIfAsync,
                string: forbiddenIfAsync,
                uint8Array: forbiddenIfAsync
            }
        };
        function mergeStreams(streams) {
            if (!Array.isArray(streams)) throw new TypeError(`Expected an array, got \`${typeof streams}\`.`);
            for (const stream of streams)validateStream(stream);
            const objectMode = streams.some(({ readableObjectMode })=>readableObjectMode);
            const highWaterMark = getHighWaterMark(streams, objectMode);
            const passThroughStream = new MergedStream({
                objectMode,
                writableHighWaterMark: highWaterMark,
                readableHighWaterMark: highWaterMark
            });
            for (const stream of streams)passThroughStream.add(stream);
            return passThroughStream;
        }
        const getHighWaterMark = (streams, objectMode)=>{
            if (0 === streams.length) return (0, __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.getDefaultHighWaterMark)(objectMode);
            const highWaterMarks = streams.filter(({ readableObjectMode })=>readableObjectMode === objectMode).map(({ readableHighWaterMark })=>readableHighWaterMark);
            return Math.max(...highWaterMarks);
        };
        class MergedStream extends __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.PassThrough {
            #streams = new Set([]);
            #ended = new Set([]);
            #aborted = new Set([]);
            #onFinished;
            #unpipeEvent = Symbol('unpipe');
            #streamPromises = new WeakMap();
            add(stream) {
                validateStream(stream);
                if (this.#streams.has(stream)) return;
                this.#streams.add(stream);
                this.#onFinished ??= onMergedStreamFinished(this, this.#streams, this.#unpipeEvent);
                const streamPromise = endWhenStreamsDone({
                    passThroughStream: this,
                    stream,
                    streams: this.#streams,
                    ended: this.#ended,
                    aborted: this.#aborted,
                    onFinished: this.#onFinished,
                    unpipeEvent: this.#unpipeEvent
                });
                this.#streamPromises.set(stream, streamPromise);
                stream.pipe(this, {
                    end: false
                });
            }
            async remove(stream) {
                validateStream(stream);
                if (!this.#streams.has(stream)) return false;
                const streamPromise = this.#streamPromises.get(stream);
                if (void 0 === streamPromise) return false;
                this.#streamPromises.delete(stream);
                stream.unpipe(this);
                await streamPromise;
                return true;
            }
        }
        const onMergedStreamFinished = async (passThroughStream, streams, unpipeEvent)=>{
            updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_COUNT);
            const controller = new AbortController();
            try {
                await Promise.race([
                    onMergedStreamEnd(passThroughStream, controller),
                    onInputStreamsUnpipe(passThroughStream, streams, unpipeEvent, controller)
                ]);
            } finally{
                controller.abort();
                updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_COUNT);
            }
        };
        const onMergedStreamEnd = async (passThroughStream, { signal })=>{
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(passThroughStream, {
                    signal,
                    cleanup: true
                });
            } catch (error) {
                errorOrAbortStream(passThroughStream, error);
                throw error;
            }
        };
        const onInputStreamsUnpipe = async (passThroughStream, streams, unpipeEvent, { signal })=>{
            for await (const [unpipedStream] of (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.on)(passThroughStream, 'unpipe', {
                signal
            }))if (streams.has(unpipedStream)) unpipedStream.emit(unpipeEvent);
        };
        const validateStream = (stream)=>{
            if ('function' != typeof stream?.pipe) throw new TypeError(`Expected a readable stream, got: \`${typeof stream}\`.`);
        };
        const endWhenStreamsDone = async ({ passThroughStream, stream, streams, ended, aborted, onFinished, unpipeEvent })=>{
            updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_PER_STREAM);
            const controller = new AbortController();
            try {
                await Promise.race([
                    afterMergedStreamFinished(onFinished, stream, controller),
                    onInputStreamEnd({
                        passThroughStream,
                        stream,
                        streams,
                        ended,
                        aborted,
                        controller
                    }),
                    onInputStreamUnpipe({
                        stream,
                        streams,
                        ended,
                        aborted,
                        unpipeEvent,
                        controller
                    })
                ]);
            } finally{
                controller.abort();
                updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_PER_STREAM);
            }
            if (streams.size > 0 && streams.size === ended.size + aborted.size) {
                if (0 === ended.size && aborted.size > 0) abortStream(passThroughStream);
                else endStream(passThroughStream);
            }
        };
        const afterMergedStreamFinished = async (onFinished, stream, { signal })=>{
            try {
                await onFinished;
                if (!signal.aborted) abortStream(stream);
            } catch (error) {
                if (!signal.aborted) errorOrAbortStream(stream, error);
            }
        };
        const onInputStreamEnd = async ({ passThroughStream, stream, streams, ended, aborted, controller: { signal } })=>{
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(stream, {
                    signal,
                    cleanup: true,
                    readable: true,
                    writable: false
                });
                if (streams.has(stream)) ended.add(stream);
            } catch (error) {
                if (signal.aborted || !streams.has(stream)) return;
                if (isAbortError(error)) aborted.add(stream);
                else errorStream(passThroughStream, error);
            }
        };
        const onInputStreamUnpipe = async ({ stream, streams, ended, aborted, unpipeEvent, controller: { signal } })=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(stream, unpipeEvent, {
                signal
            });
            if (!stream.readable) return (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(signal, 'abort', {
                signal
            });
            streams.delete(stream);
            ended.delete(stream);
            aborted.delete(stream);
        };
        const endStream = (stream)=>{
            if (stream.writable) stream.end();
        };
        const errorOrAbortStream = (stream, error)=>{
            if (isAbortError(error)) abortStream(stream);
            else errorStream(stream, error);
        };
        const isAbortError = (error)=>error?.code === 'ERR_STREAM_PREMATURE_CLOSE';
        const abortStream = (stream)=>{
            if (stream.readable || stream.writable) stream.destroy();
        };
        const errorStream = (stream, error)=>{
            if (!stream.destroyed) {
                stream.once('error', noop);
                stream.destroy(error);
            }
        };
        const noop = ()=>{};
        const updateMaxListeners = (passThroughStream, increment)=>{
            const maxListeners = passThroughStream.getMaxListeners();
            if (0 !== maxListeners && maxListeners !== Number.POSITIVE_INFINITY) passThroughStream.setMaxListeners(maxListeners + increment);
        };
        const PASSTHROUGH_LISTENERS_COUNT = 2;
        const PASSTHROUGH_LISTENERS_PER_STREAM = 1;
        const pipeStreams = (source, destination)=>{
            source.pipe(destination);
            onSourceFinish(source, destination);
            onDestinationFinish(source, destination);
        };
        const onSourceFinish = async (source, destination)=>{
            if (isStandardStream(source) || isStandardStream(destination)) return;
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(source, {
                    cleanup: true,
                    readable: true,
                    writable: false
                });
            } catch  {}
            endDestinationStream(destination);
        };
        const endDestinationStream = (destination)=>{
            if (destination.writable) destination.end();
        };
        const onDestinationFinish = async (source, destination)=>{
            if (isStandardStream(source) || isStandardStream(destination)) return;
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(destination, {
                    cleanup: true,
                    readable: false,
                    writable: true
                });
            } catch  {}
            abortSourceStream(source);
        };
        const abortSourceStream = (source)=>{
            if (source.readable) source.destroy();
        };
        const pipeOutputAsync = (subprocess, fileDescriptors, controller)=>{
            const pipeGroups = new Map();
            for (const [fdNumber, { stdioItems, direction }] of Object.entries(fileDescriptors)){
                for (const { stream } of stdioItems.filter(({ type })=>TRANSFORM_TYPES.has(type)))pipeTransform(subprocess, stream, direction, fdNumber);
                for (const { stream } of stdioItems.filter(({ type })=>!TRANSFORM_TYPES.has(type)))pipeStdioItem({
                    subprocess,
                    stream,
                    direction,
                    fdNumber,
                    pipeGroups,
                    controller
                });
            }
            for (const [outputStream, inputStreams] of pipeGroups.entries()){
                const inputStream = 1 === inputStreams.length ? inputStreams[0] : mergeStreams(inputStreams);
                pipeStreams(inputStream, outputStream);
            }
        };
        const pipeTransform = (subprocess, stream, direction, fdNumber)=>{
            'output' === direction ? pipeStreams(subprocess.stdio[fdNumber], stream) : pipeStreams(stream, subprocess.stdio[fdNumber]);
            const streamProperty = SUBPROCESS_STREAM_PROPERTIES[fdNumber];
            if (void 0 !== streamProperty) subprocess[streamProperty] = stream;
            subprocess.stdio[fdNumber] = stream;
        };
        const SUBPROCESS_STREAM_PROPERTIES = [
            'stdin',
            'stdout',
            'stderr'
        ];
        const pipeStdioItem = ({ subprocess, stream, direction, fdNumber, pipeGroups, controller })=>{
            if (void 0 === stream) return;
            setStandardStreamMaxListeners(stream, controller);
            const [inputStream, outputStream] = 'output' === direction ? [
                stream,
                subprocess.stdio[fdNumber]
            ] : [
                subprocess.stdio[fdNumber],
                stream
            ];
            const outputStreams = pipeGroups.get(inputStream) ?? [];
            pipeGroups.set(inputStream, [
                ...outputStreams,
                outputStream
            ]);
        };
        const setStandardStreamMaxListeners = (stream, { signal })=>{
            if (isStandardStream(stream)) incrementMaxListeners(stream, MAX_LISTENERS_INCREMENT, signal);
        };
        const MAX_LISTENERS_INCREMENT = 2;
        const signals_signals = [];
        signals_signals.push('SIGHUP', 'SIGINT', 'SIGTERM');
        if ('win32' !== process.platform) signals_signals.push('SIGALRM', 'SIGABRT', 'SIGVTALRM', 'SIGXCPU', 'SIGXFSZ', 'SIGUSR2', 'SIGTRAP', 'SIGSYS', 'SIGQUIT', 'SIGIOT');
        if ('linux' === process.platform) signals_signals.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT');
        const processOk = (process1)=>!!process1 && 'object' == typeof process1 && 'function' == typeof process1.removeListener && 'function' == typeof process1.emit && 'function' == typeof process1.reallyExit && 'function' == typeof process1.listeners && 'function' == typeof process1.kill && 'number' == typeof process1.pid && 'function' == typeof process1.on;
        const kExitEmitter = Symbol.for('signal-exit emitter');
        const global1 = globalThis;
        const ObjectDefineProperty = Object.defineProperty.bind(Object);
        class Emitter {
            emitted = {
                afterExit: false,
                exit: false
            };
            listeners = {
                afterExit: [],
                exit: []
            };
            count = 0;
            id = Math.random();
            constructor(){
                if (global1[kExitEmitter]) return global1[kExitEmitter];
                ObjectDefineProperty(global1, kExitEmitter, {
                    value: this,
                    writable: false,
                    enumerable: false,
                    configurable: false
                });
            }
            on(ev, fn) {
                this.listeners[ev].push(fn);
            }
            removeListener(ev, fn) {
                const list = this.listeners[ev];
                const i = list.indexOf(fn);
                if (-1 === i) return;
                if (0 === i && 1 === list.length) list.length = 0;
                else list.splice(i, 1);
            }
            emit(ev, code, signal) {
                if (this.emitted[ev]) return false;
                this.emitted[ev] = true;
                let ret = false;
                for (const fn of this.listeners[ev])ret = true === fn(code, signal) || ret;
                if ('exit' === ev) ret = this.emit('afterExit', code, signal) || ret;
                return ret;
            }
        }
        class SignalExitBase {
        }
        const signalExitWrap = (handler)=>({
                onExit (cb, opts) {
                    return handler.onExit(cb, opts);
                },
                load () {
                    return handler.load();
                },
                unload () {
                    return handler.unload();
                }
            });
        class SignalExitFallback extends SignalExitBase {
            onExit() {
                return ()=>{};
            }
            load() {}
            unload() {}
        }
        class SignalExit extends SignalExitBase {
            #hupSig = 'win32' === mjs_process.platform ? 'SIGINT' : 'SIGHUP';
            #emitter = new Emitter();
            #process;
            #originalProcessEmit;
            #originalProcessReallyExit;
            #sigListeners = {};
            #loaded = false;
            constructor(process1){
                super();
                this.#process = process1;
                this.#sigListeners = {};
                for (const sig of signals_signals)this.#sigListeners[sig] = ()=>{
                    const listeners = this.#process.listeners(sig);
                    let { count } = this.#emitter;
                    const p = process1;
                    if ('object' == typeof p.__signal_exit_emitter__ && 'number' == typeof p.__signal_exit_emitter__.count) count += p.__signal_exit_emitter__.count;
                    if (listeners.length === count) {
                        this.unload();
                        const ret = this.#emitter.emit('exit', null, sig);
                        const s = 'SIGHUP' === sig ? this.#hupSig : sig;
                        if (!ret) process1.kill(process1.pid, s);
                    }
                };
                this.#originalProcessReallyExit = process1.reallyExit;
                this.#originalProcessEmit = process1.emit;
            }
            onExit(cb, opts) {
                if (!processOk(this.#process)) return ()=>{};
                if (false === this.#loaded) this.load();
                const ev = opts?.alwaysLast ? 'afterExit' : 'exit';
                this.#emitter.on(ev, cb);
                return ()=>{
                    this.#emitter.removeListener(ev, cb);
                    if (0 === this.#emitter.listeners['exit'].length && 0 === this.#emitter.listeners['afterExit'].length) this.unload();
                };
            }
            load() {
                if (this.#loaded) return;
                this.#loaded = true;
                this.#emitter.count += 1;
                for (const sig of signals_signals)try {
                    const fn = this.#sigListeners[sig];
                    if (fn) this.#process.on(sig, fn);
                } catch (_) {}
                this.#process.emit = (ev, ...a)=>this.#processEmit(ev, ...a);
                this.#process.reallyExit = (code)=>this.#processReallyExit(code);
            }
            unload() {
                if (!this.#loaded) return;
                this.#loaded = false;
                signals_signals.forEach((sig)=>{
                    const listener = this.#sigListeners[sig];
                    if (!listener) throw new Error('Listener not defined for signal: ' + sig);
                    try {
                        this.#process.removeListener(sig, listener);
                    } catch (_) {}
                });
                this.#process.emit = this.#originalProcessEmit;
                this.#process.reallyExit = this.#originalProcessReallyExit;
                this.#emitter.count -= 1;
            }
            #processReallyExit(code) {
                if (!processOk(this.#process)) return 0;
                this.#process.exitCode = code || 0;
                this.#emitter.emit('exit', this.#process.exitCode, null);
                return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
            }
            #processEmit(ev, ...args) {
                const og = this.#originalProcessEmit;
                if (!('exit' === ev && processOk(this.#process))) return og.call(this.#process, ev, ...args);
                {
                    if ('number' == typeof args[0]) this.#process.exitCode = args[0];
                    const ret = og.call(this.#process, ev, ...args);
                    this.#emitter.emit('exit', this.#process.exitCode, null);
                    return ret;
                }
            }
        }
        const mjs_process = globalThis.process;
        const { onExit, load, unload } = signalExitWrap(processOk(mjs_process) ? new SignalExit(mjs_process) : new SignalExitFallback());
        const cleanupOnExit = (subprocess, { cleanup, detached }, { signal })=>{
            if (!cleanup || detached) return;
            const removeExitHandler = onExit(()=>{
                subprocess.kill();
            });
            (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.addAbortListener)(signal, ()=>{
                removeExitHandler();
            });
        };
        const normalizePipeArguments = ({ source, sourcePromise, boundOptions, createNested }, ...pipeArguments)=>{
            const startTime = getStartTime();
            const { destination, destinationStream, destinationError, from, unpipeSignal } = getDestinationStream(boundOptions, createNested, pipeArguments);
            const { sourceStream, sourceError } = getSourceStream(source, from);
            const { options: sourceOptions, fileDescriptors } = SUBPROCESS_OPTIONS.get(source);
            return {
                sourcePromise,
                sourceStream,
                sourceOptions,
                sourceError,
                destination,
                destinationStream,
                destinationError,
                unpipeSignal,
                fileDescriptors,
                startTime
            };
        };
        const getDestinationStream = (boundOptions, createNested, pipeArguments)=>{
            try {
                const { destination, pipeOptions: { from, to, unpipeSignal } = {} } = getDestination(boundOptions, createNested, ...pipeArguments);
                const destinationStream = getToStream(destination, to);
                return {
                    destination,
                    destinationStream,
                    from,
                    unpipeSignal
                };
            } catch (error) {
                return {
                    destinationError: error
                };
            }
        };
        const getDestination = (boundOptions, createNested, firstArgument, ...pipeArguments)=>{
            if (Array.isArray(firstArgument)) {
                const destination = createNested(mapDestinationArguments, boundOptions)(firstArgument, ...pipeArguments);
                return {
                    destination,
                    pipeOptions: boundOptions
                };
            }
            if ('string' == typeof firstArgument || firstArgument instanceof URL || isDenoExecPath(firstArgument)) {
                if (Object.keys(boundOptions).length > 0) throw new TypeError('Please use .pipe("file", ..., options) or .pipe(execa("file", ..., options)) instead of .pipe(options)("file", ...).');
                const [rawFile, rawArguments, rawOptions] = normalizeParameters(firstArgument, ...pipeArguments);
                const destination = createNested(mapDestinationArguments)(rawFile, rawArguments, rawOptions);
                return {
                    destination,
                    pipeOptions: rawOptions
                };
            }
            if (SUBPROCESS_OPTIONS.has(firstArgument)) {
                if (Object.keys(boundOptions).length > 0) throw new TypeError('Please use .pipe(options)`command` or .pipe($(options)`command`) instead of .pipe(options)($`command`).');
                return {
                    destination: firstArgument,
                    pipeOptions: pipeArguments[0]
                };
            }
            throw new TypeError(`The first argument must be a template string, an options object, or an Execa subprocess: ${firstArgument}`);
        };
        const mapDestinationArguments = ({ options })=>({
                options: {
                    ...options,
                    stdin: 'pipe',
                    piped: true
                }
            });
        const getSourceStream = (source, from)=>{
            try {
                const sourceStream = getFromStream(source, from);
                return {
                    sourceStream
                };
            } catch (error) {
                return {
                    sourceError: error
                };
            }
        };
        const handlePipeArgumentsError = ({ sourceStream, sourceError, destinationStream, destinationError, fileDescriptors, sourceOptions, startTime })=>{
            const error = getPipeArgumentsError({
                sourceStream,
                sourceError,
                destinationStream,
                destinationError
            });
            if (void 0 !== error) throw createNonCommandError({
                error,
                fileDescriptors,
                sourceOptions,
                startTime
            });
        };
        const getPipeArgumentsError = ({ sourceStream, sourceError, destinationStream, destinationError })=>{
            if (void 0 !== sourceError && void 0 !== destinationError) return destinationError;
            if (void 0 !== destinationError) {
                abortSourceStream(sourceStream);
                return destinationError;
            }
            if (void 0 !== sourceError) {
                endDestinationStream(destinationStream);
                return sourceError;
            }
        };
        const createNonCommandError = ({ error, fileDescriptors, sourceOptions, startTime })=>makeEarlyError({
                error,
                command: PIPE_COMMAND_MESSAGE,
                escapedCommand: PIPE_COMMAND_MESSAGE,
                fileDescriptors,
                options: sourceOptions,
                startTime,
                isSync: false
            });
        const PIPE_COMMAND_MESSAGE = 'source.pipe(destination)';
        const waitForBothSubprocesses = async (subprocessPromises)=>{
            const [{ status: sourceStatus, reason: sourceReason, value: sourceResult = sourceReason }, { status: destinationStatus, reason: destinationReason, value: destinationResult = destinationReason }] = await subprocessPromises;
            if (!destinationResult.pipedFrom.includes(sourceResult)) destinationResult.pipedFrom.push(sourceResult);
            if ('rejected' === destinationStatus) throw destinationResult;
            if ('rejected' === sourceStatus) throw sourceResult;
            return destinationResult;
        };
        const pipeSubprocessStream = (sourceStream, destinationStream, maxListenersController)=>{
            const mergedStream = MERGED_STREAMS.has(destinationStream) ? pipeMoreSubprocessStream(sourceStream, destinationStream) : pipeFirstSubprocessStream(sourceStream, destinationStream);
            incrementMaxListeners(sourceStream, SOURCE_LISTENERS_PER_PIPE, maxListenersController.signal);
            incrementMaxListeners(destinationStream, DESTINATION_LISTENERS_PER_PIPE, maxListenersController.signal);
            cleanupMergedStreamsMap(destinationStream);
            return mergedStream;
        };
        const pipeFirstSubprocessStream = (sourceStream, destinationStream)=>{
            const mergedStream = mergeStreams([
                sourceStream
            ]);
            pipeStreams(mergedStream, destinationStream);
            MERGED_STREAMS.set(destinationStream, mergedStream);
            return mergedStream;
        };
        const pipeMoreSubprocessStream = (sourceStream, destinationStream)=>{
            const mergedStream = MERGED_STREAMS.get(destinationStream);
            mergedStream.add(sourceStream);
            return mergedStream;
        };
        const cleanupMergedStreamsMap = async (destinationStream)=>{
            try {
                await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(destinationStream, {
                    cleanup: true,
                    readable: false,
                    writable: true
                });
            } catch  {}
            MERGED_STREAMS.delete(destinationStream);
        };
        const MERGED_STREAMS = new WeakMap();
        const SOURCE_LISTENERS_PER_PIPE = 2;
        const DESTINATION_LISTENERS_PER_PIPE = 1;
        const unpipeOnAbort = (unpipeSignal, unpipeContext)=>void 0 === unpipeSignal ? [] : [
                unpipeOnSignalAbort(unpipeSignal, unpipeContext)
            ];
        const unpipeOnSignalAbort = async (unpipeSignal, { sourceStream, mergedStream, fileDescriptors, sourceOptions, startTime })=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.aborted)(unpipeSignal, sourceStream);
            await mergedStream.remove(sourceStream);
            const error = new Error('Pipe canceled by `unpipeSignal` option.');
            throw createNonCommandError({
                error,
                fileDescriptors,
                sourceOptions,
                startTime
            });
        };
        const pipeToSubprocess = (sourceInfo, ...pipeArguments)=>{
            if (isPlainObject(pipeArguments[0])) return pipeToSubprocess.bind(void 0, {
                ...sourceInfo,
                boundOptions: {
                    ...sourceInfo.boundOptions,
                    ...pipeArguments[0]
                }
            });
            const { destination, ...normalizedInfo } = normalizePipeArguments(sourceInfo, ...pipeArguments);
            const promise = handlePipePromise({
                ...normalizedInfo,
                destination
            });
            promise.pipe = pipeToSubprocess.bind(void 0, {
                ...sourceInfo,
                source: destination,
                sourcePromise: promise,
                boundOptions: {}
            });
            return promise;
        };
        const handlePipePromise = async ({ sourcePromise, sourceStream, sourceOptions, sourceError, destination, destinationStream, destinationError, unpipeSignal, fileDescriptors, startTime })=>{
            const subprocessPromises = getSubprocessPromises(sourcePromise, destination);
            handlePipeArgumentsError({
                sourceStream,
                sourceError,
                destinationStream,
                destinationError,
                fileDescriptors,
                sourceOptions,
                startTime
            });
            const maxListenersController = new AbortController();
            try {
                const mergedStream = pipeSubprocessStream(sourceStream, destinationStream, maxListenersController);
                return await Promise.race([
                    waitForBothSubprocesses(subprocessPromises),
                    ...unpipeOnAbort(unpipeSignal, {
                        sourceStream,
                        mergedStream,
                        sourceOptions,
                        fileDescriptors,
                        startTime
                    })
                ]);
            } finally{
                maxListenersController.abort();
            }
        };
        const getSubprocessPromises = (sourcePromise, destination)=>Promise.allSettled([
                sourcePromise,
                destination
            ]);
        const utils_identity = (value1)=>value1;
        const utils_noop = ()=>void 0;
        const getContentsProperty = ({ contents })=>contents;
        const throwObjectStream = (chunk)=>{
            throw new Error(`Streams in object mode are not supported: ${String(chunk)}`);
        };
        const getLengthProperty = (convertedChunk)=>convertedChunk.length;
        async function getStreamAsArray(stream, options) {
            return getStreamContents(stream, arrayMethods, options);
        }
        const initArray = ()=>({
                contents: []
            });
        const array_increment = ()=>1;
        const addArrayChunk = (convertedChunk, { contents })=>{
            contents.push(convertedChunk);
            return contents;
        };
        const arrayMethods = {
            init: initArray,
            convertChunk: {
                string: utils_identity,
                buffer: utils_identity,
                arrayBuffer: utils_identity,
                dataView: utils_identity,
                typedArray: utils_identity,
                others: utils_identity
            },
            getSize: array_increment,
            truncateChunk: utils_noop,
            addChunk: addArrayChunk,
            getFinalChunk: utils_noop,
            finalize: getContentsProperty
        };
        async function getStreamAsArrayBuffer(stream, options) {
            return getStreamContents(stream, arrayBufferMethods, options);
        }
        const initArrayBuffer = ()=>({
                contents: new ArrayBuffer(0)
            });
        const useTextEncoder = (chunk)=>array_buffer_textEncoder.encode(chunk);
        const array_buffer_textEncoder = new TextEncoder();
        const useUint8Array = (chunk)=>new Uint8Array(chunk);
        const useUint8ArrayWithOffset = (chunk)=>new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
        const truncateArrayBufferChunk = (convertedChunk, chunkSize)=>convertedChunk.slice(0, chunkSize);
        const addArrayBufferChunk = (convertedChunk, { contents, length: previousLength }, length)=>{
            const newContents = hasArrayBufferResize() ? resizeArrayBuffer(contents, length) : resizeArrayBufferSlow(contents, length);
            new Uint8Array(newContents).set(convertedChunk, previousLength);
            return newContents;
        };
        const resizeArrayBufferSlow = (contents, length)=>{
            if (length <= contents.byteLength) return contents;
            const arrayBuffer = new ArrayBuffer(getNewContentsLength(length));
            new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
            return arrayBuffer;
        };
        const resizeArrayBuffer = (contents, length)=>{
            if (length <= contents.maxByteLength) {
                contents.resize(length);
                return contents;
            }
            const arrayBuffer = new ArrayBuffer(length, {
                maxByteLength: getNewContentsLength(length)
            });
            new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
            return arrayBuffer;
        };
        const getNewContentsLength = (length)=>SCALE_FACTOR ** Math.ceil(Math.log(length) / Math.log(SCALE_FACTOR));
        const SCALE_FACTOR = 2;
        const finalizeArrayBuffer = ({ contents, length })=>hasArrayBufferResize() ? contents : contents.slice(0, length);
        const hasArrayBufferResize = ()=>'resize' in ArrayBuffer.prototype;
        const arrayBufferMethods = {
            init: initArrayBuffer,
            convertChunk: {
                string: useTextEncoder,
                buffer: useUint8Array,
                arrayBuffer: useUint8Array,
                dataView: useUint8ArrayWithOffset,
                typedArray: useUint8ArrayWithOffset,
                others: throwObjectStream
            },
            getSize: getLengthProperty,
            truncateChunk: truncateArrayBufferChunk,
            addChunk: addArrayBufferChunk,
            getFinalChunk: utils_noop,
            finalize: finalizeArrayBuffer
        };
        async function getStreamAsString(stream, options) {
            return getStreamContents(stream, stringMethods, options);
        }
        const initString = ()=>({
                contents: '',
                textDecoder: new TextDecoder()
            });
        const useTextDecoder = (chunk, { textDecoder })=>textDecoder.decode(chunk, {
                stream: true
            });
        const addStringChunk = (convertedChunk, { contents })=>contents + convertedChunk;
        const truncateStringChunk = (convertedChunk, chunkSize)=>convertedChunk.slice(0, chunkSize);
        const getFinalStringChunk = ({ textDecoder })=>{
            const finalChunk = textDecoder.decode();
            return '' === finalChunk ? void 0 : finalChunk;
        };
        const stringMethods = {
            init: initString,
            convertChunk: {
                string: utils_identity,
                buffer: useTextDecoder,
                arrayBuffer: useTextDecoder,
                dataView: useTextDecoder,
                typedArray: useTextDecoder,
                others: throwObjectStream
            },
            getSize: getLengthProperty,
            truncateChunk: truncateStringChunk,
            addChunk: addStringChunk,
            getFinalChunk: getFinalStringChunk,
            finalize: getContentsProperty
        };
        const iterateOnSubprocessStream = ({ subprocessStdout, subprocess, binary, shouldEncode, encoding, preserveNewlines })=>{
            const controller = new AbortController();
            stopReadingOnExit(subprocess, controller);
            return iterateOnStream({
                stream: subprocessStdout,
                controller,
                binary,
                shouldEncode: !subprocessStdout.readableObjectMode && shouldEncode,
                encoding,
                shouldSplit: !subprocessStdout.readableObjectMode,
                preserveNewlines
            });
        };
        const stopReadingOnExit = async (subprocess, controller)=>{
            try {
                await subprocess;
            } catch  {} finally{
                controller.abort();
            }
        };
        const iterateForResult = ({ stream, onStreamEnd, lines, encoding, stripFinalNewline, allMixed })=>{
            const controller = new AbortController();
            stopReadingOnStreamEnd(onStreamEnd, controller, stream);
            const objectMode = stream.readableObjectMode && !allMixed;
            return iterateOnStream({
                stream,
                controller,
                binary: 'buffer' === encoding,
                shouldEncode: !objectMode,
                encoding,
                shouldSplit: !objectMode && lines,
                preserveNewlines: !stripFinalNewline
            });
        };
        const stopReadingOnStreamEnd = async (onStreamEnd, controller, stream)=>{
            try {
                await onStreamEnd;
            } catch  {
                stream.destroy();
            } finally{
                controller.abort();
            }
        };
        const iterateOnStream = ({ stream, controller, binary, shouldEncode, encoding, shouldSplit, preserveNewlines })=>{
            const onStdoutChunk = (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.on)(stream, 'data', {
                signal: controller.signal,
                highWaterMark: HIGH_WATER_MARK,
                highWatermark: HIGH_WATER_MARK
            });
            return iterateOnData({
                onStdoutChunk,
                controller,
                binary,
                shouldEncode,
                encoding,
                shouldSplit,
                preserveNewlines
            });
        };
        const DEFAULT_OBJECT_HIGH_WATER_MARK = (0, __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.getDefaultHighWaterMark)(true);
        const HIGH_WATER_MARK = DEFAULT_OBJECT_HIGH_WATER_MARK;
        const iterateOnData = async function*({ onStdoutChunk, controller, binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) {
            const generators = getGenerators({
                binary,
                shouldEncode,
                encoding,
                shouldSplit,
                preserveNewlines
            });
            try {
                for await (const [chunk] of onStdoutChunk)yield* transformChunkSync(chunk, generators, 0);
            } catch (error) {
                if (!controller.signal.aborted) throw error;
            } finally{
                yield* finalChunksSync(generators);
            }
        };
        const getGenerators = ({ binary, shouldEncode, encoding, shouldSplit, preserveNewlines })=>[
                getEncodingTransformGenerator(binary, encoding, !shouldEncode),
                getSplitLinesGenerator(binary, preserveNewlines, !shouldSplit, {})
            ].filter(Boolean);
        const getStreamOutput = async ({ stream, onStreamEnd, fdNumber, encoding, buffer, maxBuffer, lines, allMixed, stripFinalNewline, verboseInfo, streamInfo })=>{
            const logPromise = logOutputAsync({
                stream,
                onStreamEnd,
                fdNumber,
                encoding,
                allMixed,
                verboseInfo,
                streamInfo
            });
            if (!buffer) {
                await Promise.all([
                    resumeStream(stream),
                    logPromise
                ]);
                return;
            }
            const stripFinalNewlineValue = getStripFinalNewline(stripFinalNewline, fdNumber);
            const iterable = iterateForResult({
                stream,
                onStreamEnd,
                lines,
                encoding,
                stripFinalNewline: stripFinalNewlineValue,
                allMixed
            });
            const [output] = await Promise.all([
                contents_getStreamContents({
                    stream,
                    iterable,
                    fdNumber,
                    encoding,
                    maxBuffer,
                    lines
                }),
                logPromise
            ]);
            return output;
        };
        const logOutputAsync = async ({ stream, onStreamEnd, fdNumber, encoding, allMixed, verboseInfo, streamInfo: { fileDescriptors } })=>{
            if (!shouldLogOutput({
                stdioItems: fileDescriptors[fdNumber]?.stdioItems,
                encoding,
                verboseInfo,
                fdNumber
            })) return;
            const linesIterable = iterateForResult({
                stream,
                onStreamEnd,
                lines: true,
                encoding,
                stripFinalNewline: true,
                allMixed
            });
            await logLines(linesIterable, stream, fdNumber, verboseInfo);
        };
        const resumeStream = async (stream)=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_timers_promises_aedbf14c__.setImmediate)();
            if (null === stream.readableFlowing) stream.resume();
        };
        const contents_getStreamContents = async ({ stream, stream: { readableObjectMode }, iterable, fdNumber, encoding, maxBuffer, lines })=>{
            try {
                if (readableObjectMode || lines) return await getStreamAsArray(iterable, {
                    maxBuffer
                });
                if ('buffer' === encoding) return new Uint8Array(await getStreamAsArrayBuffer(iterable, {
                    maxBuffer
                }));
                return await getStreamAsString(iterable, {
                    maxBuffer
                });
            } catch (error) {
                return handleBufferedData(handleMaxBuffer({
                    error,
                    stream,
                    readableObjectMode,
                    lines,
                    encoding,
                    fdNumber
                }));
            }
        };
        const getBufferedData = async (streamPromise)=>{
            try {
                return await streamPromise;
            } catch (error) {
                return handleBufferedData(error);
            }
        };
        const handleBufferedData = ({ bufferedData })=>isArrayBuffer(bufferedData) ? new Uint8Array(bufferedData) : bufferedData;
        const waitForStream = async (stream, fdNumber, streamInfo, { isSameDirection, stopOnExit = false } = {})=>{
            const state = handleStdinDestroy(stream, streamInfo);
            const abortController = new AbortController();
            try {
                await Promise.race([
                    ...stopOnExit ? [
                        streamInfo.exitPromise
                    ] : [],
                    (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(stream, {
                        cleanup: true,
                        signal: abortController.signal
                    })
                ]);
            } catch (error) {
                if (!state.stdinCleanedUp) handleStreamError(error, fdNumber, streamInfo, isSameDirection);
            } finally{
                abortController.abort();
            }
        };
        const handleStdinDestroy = (stream, { originalStreams: [originalStdin], subprocess })=>{
            const state = {
                stdinCleanedUp: false
            };
            if (stream === originalStdin) spyOnStdinDestroy(stream, subprocess, state);
            return state;
        };
        const spyOnStdinDestroy = (subprocessStdin, subprocess, state)=>{
            const { _destroy } = subprocessStdin;
            subprocessStdin._destroy = (...destroyArguments)=>{
                setStdinCleanedUp(subprocess, state);
                _destroy.call(subprocessStdin, ...destroyArguments);
            };
        };
        const setStdinCleanedUp = ({ exitCode, signalCode }, state)=>{
            if (null !== exitCode || null !== signalCode) state.stdinCleanedUp = true;
        };
        const handleStreamError = (error, fdNumber, streamInfo, isSameDirection)=>{
            if (!shouldIgnoreStreamError(error, fdNumber, streamInfo, isSameDirection)) throw error;
        };
        const shouldIgnoreStreamError = (error, fdNumber, streamInfo, isSameDirection = true)=>{
            if (streamInfo.propagating) return isStreamEpipe(error) || isStreamAbort(error);
            streamInfo.propagating = true;
            return isInputFileDescriptor(streamInfo, fdNumber) === isSameDirection ? isStreamEpipe(error) : isStreamAbort(error);
        };
        const isInputFileDescriptor = ({ fileDescriptors }, fdNumber)=>'all' !== fdNumber && 'input' === fileDescriptors[fdNumber].direction;
        const isStreamAbort = (error)=>error?.code === 'ERR_STREAM_PREMATURE_CLOSE';
        const isStreamEpipe = (error)=>error?.code === 'EPIPE';
        const waitForStdioStreams = ({ subprocess, encoding, buffer, maxBuffer, lines, stripFinalNewline, verboseInfo, streamInfo })=>subprocess.stdio.map((stream, fdNumber)=>waitForSubprocessStream({
                    stream,
                    fdNumber,
                    encoding,
                    buffer: buffer[fdNumber],
                    maxBuffer: maxBuffer[fdNumber],
                    lines: lines[fdNumber],
                    allMixed: false,
                    stripFinalNewline,
                    verboseInfo,
                    streamInfo
                }));
        const waitForSubprocessStream = async ({ stream, fdNumber, encoding, buffer, maxBuffer, lines, allMixed, stripFinalNewline, verboseInfo, streamInfo })=>{
            if (!stream) return;
            const onStreamEnd = waitForStream(stream, fdNumber, streamInfo);
            if (isInputFileDescriptor(streamInfo, fdNumber)) {
                await onStreamEnd;
                return;
            }
            const [output] = await Promise.all([
                getStreamOutput({
                    stream,
                    onStreamEnd,
                    fdNumber,
                    encoding,
                    buffer,
                    maxBuffer,
                    lines,
                    allMixed,
                    stripFinalNewline,
                    verboseInfo,
                    streamInfo
                }),
                onStreamEnd
            ]);
            return output;
        };
        const makeAllStream = ({ stdout, stderr }, { all })=>all && (stdout || stderr) ? mergeStreams([
                stdout,
                stderr
            ].filter(Boolean)) : void 0;
        const waitForAllStream = ({ subprocess, encoding, buffer, maxBuffer, lines, stripFinalNewline, verboseInfo, streamInfo })=>waitForSubprocessStream({
                ...getAllStream(subprocess, buffer),
                fdNumber: 'all',
                encoding,
                maxBuffer: maxBuffer[1] + maxBuffer[2],
                lines: lines[1] || lines[2],
                allMixed: getAllMixed(subprocess),
                stripFinalNewline,
                verboseInfo,
                streamInfo
            });
        const getAllStream = ({ stdout, stderr, all }, [, bufferStdout, bufferStderr])=>{
            const buffer = bufferStdout || bufferStderr;
            if (!buffer) return {
                stream: all,
                buffer
            };
            if (!bufferStdout) return {
                stream: stderr,
                buffer
            };
            if (!bufferStderr) return {
                stream: stdout,
                buffer
            };
            return {
                stream: all,
                buffer
            };
        };
        const getAllMixed = ({ all, stdout, stderr })=>all && stdout && stderr && stdout.readableObjectMode !== stderr.readableObjectMode;
        const shouldLogIpc = (verboseInfo)=>isFullVerbose(verboseInfo, 'ipc');
        const logIpcOutput = (message, verboseInfo)=>{
            const verboseMessage = serializeVerboseMessage(message);
            verboseLog({
                type: 'ipc',
                verboseMessage,
                fdNumber: 'ipc',
                verboseInfo
            });
        };
        const waitForIpcOutput = async ({ subprocess, buffer: bufferArray, maxBuffer: maxBufferArray, ipc, ipcOutput, verboseInfo })=>{
            if (!ipc) return ipcOutput;
            const isVerbose = shouldLogIpc(verboseInfo);
            const buffer = getFdSpecificValue(bufferArray, 'ipc');
            const maxBuffer = getFdSpecificValue(maxBufferArray, 'ipc');
            for await (const message of loopOnMessages({
                anyProcess: subprocess,
                channel: subprocess.channel,
                isSubprocess: false,
                ipc,
                shouldAwait: false,
                reference: true
            })){
                if (buffer) {
                    checkIpcMaxBuffer(subprocess, ipcOutput, maxBuffer);
                    ipcOutput.push(message);
                }
                if (isVerbose) logIpcOutput(message, verboseInfo);
            }
            return ipcOutput;
        };
        const getBufferedIpcOutput = async (ipcOutputPromise, ipcOutput)=>{
            await Promise.allSettled([
                ipcOutputPromise
            ]);
            return ipcOutput;
        };
        const waitForSubprocessResult = async ({ subprocess, options: { encoding, buffer, maxBuffer, lines, timeoutDuration: timeout, cancelSignal, gracefulCancel, forceKillAfterDelay, stripFinalNewline, ipc, ipcInput }, context, verboseInfo, fileDescriptors, originalStreams, onInternalError, controller })=>{
            const exitPromise = waitForExit(subprocess, context);
            const streamInfo = {
                originalStreams,
                fileDescriptors,
                subprocess,
                exitPromise,
                propagating: false
            };
            const stdioPromises = waitForStdioStreams({
                subprocess,
                encoding,
                buffer,
                maxBuffer,
                lines,
                stripFinalNewline,
                verboseInfo,
                streamInfo
            });
            const allPromise = waitForAllStream({
                subprocess,
                encoding,
                buffer,
                maxBuffer,
                lines,
                stripFinalNewline,
                verboseInfo,
                streamInfo
            });
            const ipcOutput = [];
            const ipcOutputPromise = waitForIpcOutput({
                subprocess,
                buffer,
                maxBuffer,
                ipc,
                ipcOutput,
                verboseInfo
            });
            const originalPromises = waitForOriginalStreams(originalStreams, subprocess, streamInfo);
            const customStreamsEndPromises = waitForCustomStreamsEnd(fileDescriptors, streamInfo);
            try {
                return await Promise.race([
                    Promise.all([
                        {},
                        waitForSuccessfulExit(exitPromise),
                        Promise.all(stdioPromises),
                        allPromise,
                        ipcOutputPromise,
                        sendIpcInput(subprocess, ipcInput),
                        ...originalPromises,
                        ...customStreamsEndPromises
                    ]),
                    onInternalError,
                    throwOnSubprocessError(subprocess, controller),
                    ...throwOnTimeout(subprocess, timeout, context, controller),
                    ...throwOnCancel({
                        subprocess,
                        cancelSignal,
                        gracefulCancel,
                        context,
                        controller
                    }),
                    ...throwOnGracefulCancel({
                        subprocess,
                        cancelSignal,
                        gracefulCancel,
                        forceKillAfterDelay,
                        context,
                        controller
                    })
                ]);
            } catch (error) {
                context.terminationReason ??= 'other';
                return Promise.all([
                    {
                        error
                    },
                    exitPromise,
                    Promise.all(stdioPromises.map((stdioPromise)=>getBufferedData(stdioPromise))),
                    getBufferedData(allPromise),
                    getBufferedIpcOutput(ipcOutputPromise, ipcOutput),
                    Promise.allSettled(originalPromises),
                    Promise.allSettled(customStreamsEndPromises)
                ]);
            }
        };
        const waitForOriginalStreams = (originalStreams, subprocess, streamInfo)=>originalStreams.map((stream, fdNumber)=>stream === subprocess.stdio[fdNumber] ? void 0 : waitForStream(stream, fdNumber, streamInfo));
        const waitForCustomStreamsEnd = (fileDescriptors, streamInfo)=>fileDescriptors.flatMap(({ stdioItems }, fdNumber)=>stdioItems.filter(({ value: value1, stream = value1 })=>isStream(stream, {
                        checkOpen: false
                    }) && !isStandardStream(stream)).map(({ type, value: value1, stream = value1 })=>waitForStream(stream, fdNumber, streamInfo, {
                        isSameDirection: TRANSFORM_TYPES.has(type),
                        stopOnExit: 'native' === type
                    })));
        const throwOnSubprocessError = async (subprocess, { signal })=>{
            const [error] = await (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.once)(subprocess, 'error', {
                signal
            });
            throw error;
        };
        const initializeConcurrentStreams = ()=>({
                readableDestroy: new WeakMap(),
                writableFinal: new WeakMap(),
                writableDestroy: new WeakMap()
            });
        const addConcurrentStream = (concurrentStreams, stream, waitName)=>{
            const weakMap = concurrentStreams[waitName];
            if (!weakMap.has(stream)) weakMap.set(stream, []);
            const promises = weakMap.get(stream);
            const promise = createDeferred();
            promises.push(promise);
            const resolve = promise.resolve.bind(promise);
            return {
                resolve,
                promises
            };
        };
        const waitForConcurrentStreams = async ({ resolve, promises }, subprocess)=>{
            resolve();
            const [isSubprocessExit] = await Promise.race([
                Promise.allSettled([
                    true,
                    subprocess
                ]),
                Promise.all([
                    false,
                    ...promises
                ])
            ]);
            return !isSubprocessExit;
        };
        const safeWaitForSubprocessStdin = async (subprocessStdin)=>{
            if (void 0 === subprocessStdin) return;
            try {
                await waitForSubprocessStdin(subprocessStdin);
            } catch  {}
        };
        const safeWaitForSubprocessStdout = async (subprocessStdout)=>{
            if (void 0 === subprocessStdout) return;
            try {
                await waitForSubprocessStdout(subprocessStdout);
            } catch  {}
        };
        const waitForSubprocessStdin = async (subprocessStdin)=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(subprocessStdin, {
                cleanup: true,
                readable: false,
                writable: true
            });
        };
        const waitForSubprocessStdout = async (subprocessStdout)=>{
            await (0, __WEBPACK_EXTERNAL_MODULE_node_stream_promises_5adae1f2__.finished)(subprocessStdout, {
                cleanup: true,
                readable: true,
                writable: false
            });
        };
        const waitForSubprocess = async (subprocess, error)=>{
            await subprocess;
            if (error) throw error;
        };
        const destroyOtherStream = (stream, isOpen, error)=>{
            if (error && !isStreamAbort(error)) stream.destroy(error);
            else if (isOpen) stream.destroy();
        };
        const createReadable = ({ subprocess, concurrentStreams, encoding }, { from, binary: binaryOption = true, preserveNewlines = true } = {})=>{
            const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
            const { subprocessStdout, waitReadableDestroy } = getSubprocessStdout(subprocess, from, concurrentStreams);
            const { readableEncoding, readableObjectMode, readableHighWaterMark } = getReadableOptions(subprocessStdout, binary);
            const { read, onStdoutDataDone } = getReadableMethods({
                subprocessStdout,
                subprocess,
                binary,
                encoding,
                preserveNewlines
            });
            const readable = new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Readable({
                read,
                destroy: (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.callbackify)(onReadableDestroy.bind(void 0, {
                    subprocessStdout,
                    subprocess,
                    waitReadableDestroy
                })),
                highWaterMark: readableHighWaterMark,
                objectMode: readableObjectMode,
                encoding: readableEncoding
            });
            onStdoutFinished({
                subprocessStdout,
                onStdoutDataDone,
                readable,
                subprocess
            });
            return readable;
        };
        const getSubprocessStdout = (subprocess, from, concurrentStreams)=>{
            const subprocessStdout = getFromStream(subprocess, from);
            const waitReadableDestroy = addConcurrentStream(concurrentStreams, subprocessStdout, 'readableDestroy');
            return {
                subprocessStdout,
                waitReadableDestroy
            };
        };
        const getReadableOptions = ({ readableEncoding, readableObjectMode, readableHighWaterMark }, binary)=>binary ? {
                readableEncoding,
                readableObjectMode,
                readableHighWaterMark
            } : {
                readableEncoding,
                readableObjectMode: true,
                readableHighWaterMark: DEFAULT_OBJECT_HIGH_WATER_MARK
            };
        const getReadableMethods = ({ subprocessStdout, subprocess, binary, encoding, preserveNewlines })=>{
            const onStdoutDataDone = createDeferred();
            const onStdoutData = iterateOnSubprocessStream({
                subprocessStdout,
                subprocess,
                binary,
                shouldEncode: !binary,
                encoding,
                preserveNewlines
            });
            return {
                read () {
                    onRead(this, onStdoutData, onStdoutDataDone);
                },
                onStdoutDataDone
            };
        };
        const onRead = async (readable, onStdoutData, onStdoutDataDone)=>{
            try {
                const { value: value1, done } = await onStdoutData.next();
                if (done) onStdoutDataDone.resolve();
                else readable.push(value1);
            } catch  {}
        };
        const onStdoutFinished = async ({ subprocessStdout, onStdoutDataDone, readable, subprocess, subprocessStdin })=>{
            try {
                await waitForSubprocessStdout(subprocessStdout);
                await subprocess;
                await safeWaitForSubprocessStdin(subprocessStdin);
                await onStdoutDataDone;
                if (readable.readable) readable.push(null);
            } catch (error) {
                await safeWaitForSubprocessStdin(subprocessStdin);
                destroyOtherReadable(readable, error);
            }
        };
        const onReadableDestroy = async ({ subprocessStdout, subprocess, waitReadableDestroy }, error)=>{
            if (await waitForConcurrentStreams(waitReadableDestroy, subprocess)) {
                destroyOtherReadable(subprocessStdout, error);
                await waitForSubprocess(subprocess, error);
            }
        };
        const destroyOtherReadable = (stream, error)=>{
            destroyOtherStream(stream, stream.readable, error);
        };
        const createWritable = ({ subprocess, concurrentStreams }, { to } = {})=>{
            const { subprocessStdin, waitWritableFinal, waitWritableDestroy } = getSubprocessStdin(subprocess, to, concurrentStreams);
            const writable = new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Writable({
                ...getWritableMethods(subprocessStdin, subprocess, waitWritableFinal),
                destroy: (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.callbackify)(onWritableDestroy.bind(void 0, {
                    subprocessStdin,
                    subprocess,
                    waitWritableFinal,
                    waitWritableDestroy
                })),
                highWaterMark: subprocessStdin.writableHighWaterMark,
                objectMode: subprocessStdin.writableObjectMode
            });
            onStdinFinished(subprocessStdin, writable);
            return writable;
        };
        const getSubprocessStdin = (subprocess, to, concurrentStreams)=>{
            const subprocessStdin = getToStream(subprocess, to);
            const waitWritableFinal = addConcurrentStream(concurrentStreams, subprocessStdin, 'writableFinal');
            const waitWritableDestroy = addConcurrentStream(concurrentStreams, subprocessStdin, 'writableDestroy');
            return {
                subprocessStdin,
                waitWritableFinal,
                waitWritableDestroy
            };
        };
        const getWritableMethods = (subprocessStdin, subprocess, waitWritableFinal)=>({
                write: onWrite.bind(void 0, subprocessStdin),
                final: (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.callbackify)(onWritableFinal.bind(void 0, subprocessStdin, subprocess, waitWritableFinal))
            });
        const onWrite = (subprocessStdin, chunk, encoding, done)=>{
            if (subprocessStdin.write(chunk, encoding)) done();
            else subprocessStdin.once('drain', done);
        };
        const onWritableFinal = async (subprocessStdin, subprocess, waitWritableFinal)=>{
            if (await waitForConcurrentStreams(waitWritableFinal, subprocess)) {
                if (subprocessStdin.writable) subprocessStdin.end();
                await subprocess;
            }
        };
        const onStdinFinished = async (subprocessStdin, writable, subprocessStdout)=>{
            try {
                await waitForSubprocessStdin(subprocessStdin);
                if (writable.writable) writable.end();
            } catch (error) {
                await safeWaitForSubprocessStdout(subprocessStdout);
                destroyOtherWritable(writable, error);
            }
        };
        const onWritableDestroy = async ({ subprocessStdin, subprocess, waitWritableFinal, waitWritableDestroy }, error)=>{
            await waitForConcurrentStreams(waitWritableFinal, subprocess);
            if (await waitForConcurrentStreams(waitWritableDestroy, subprocess)) {
                destroyOtherWritable(subprocessStdin, error);
                await waitForSubprocess(subprocess, error);
            }
        };
        const destroyOtherWritable = (stream, error)=>{
            destroyOtherStream(stream, stream.writable, error);
        };
        const createDuplex = ({ subprocess, concurrentStreams, encoding }, { from, to, binary: binaryOption = true, preserveNewlines = true } = {})=>{
            const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
            const { subprocessStdout, waitReadableDestroy } = getSubprocessStdout(subprocess, from, concurrentStreams);
            const { subprocessStdin, waitWritableFinal, waitWritableDestroy } = getSubprocessStdin(subprocess, to, concurrentStreams);
            const { readableEncoding, readableObjectMode, readableHighWaterMark } = getReadableOptions(subprocessStdout, binary);
            const { read, onStdoutDataDone } = getReadableMethods({
                subprocessStdout,
                subprocess,
                binary,
                encoding,
                preserveNewlines
            });
            const duplex = new __WEBPACK_EXTERNAL_MODULE_node_stream_444d1c2b__.Duplex({
                read,
                ...getWritableMethods(subprocessStdin, subprocess, waitWritableFinal),
                destroy: (0, __WEBPACK_EXTERNAL_MODULE_node_util_1b29d436__.callbackify)(onDuplexDestroy.bind(void 0, {
                    subprocessStdout,
                    subprocessStdin,
                    subprocess,
                    waitReadableDestroy,
                    waitWritableFinal,
                    waitWritableDestroy
                })),
                readableHighWaterMark,
                writableHighWaterMark: subprocessStdin.writableHighWaterMark,
                readableObjectMode,
                writableObjectMode: subprocessStdin.writableObjectMode,
                encoding: readableEncoding
            });
            onStdoutFinished({
                subprocessStdout,
                onStdoutDataDone,
                readable: duplex,
                subprocess,
                subprocessStdin
            });
            onStdinFinished(subprocessStdin, duplex, subprocessStdout);
            return duplex;
        };
        const onDuplexDestroy = async ({ subprocessStdout, subprocessStdin, subprocess, waitReadableDestroy, waitWritableFinal, waitWritableDestroy }, error)=>{
            await Promise.all([
                onReadableDestroy({
                    subprocessStdout,
                    subprocess,
                    waitReadableDestroy
                }, error),
                onWritableDestroy({
                    subprocessStdin,
                    subprocess,
                    waitWritableFinal,
                    waitWritableDestroy
                }, error)
            ]);
        };
        const createIterable = (subprocess, encoding, { from, binary: binaryOption = false, preserveNewlines = false } = {})=>{
            const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
            const subprocessStdout = getFromStream(subprocess, from);
            const onStdoutData = iterateOnSubprocessStream({
                subprocessStdout,
                subprocess,
                binary,
                shouldEncode: true,
                encoding,
                preserveNewlines
            });
            return iterateOnStdoutData(onStdoutData, subprocessStdout, subprocess);
        };
        const iterateOnStdoutData = async function*(onStdoutData, subprocessStdout, subprocess) {
            try {
                yield* onStdoutData;
            } finally{
                if (subprocessStdout.readable) subprocessStdout.destroy();
                await subprocess;
            }
        };
        const addConvertedStreams = (subprocess, { encoding })=>{
            const concurrentStreams = initializeConcurrentStreams();
            subprocess.readable = createReadable.bind(void 0, {
                subprocess,
                concurrentStreams,
                encoding
            });
            subprocess.writable = createWritable.bind(void 0, {
                subprocess,
                concurrentStreams
            });
            subprocess.duplex = createDuplex.bind(void 0, {
                subprocess,
                concurrentStreams,
                encoding
            });
            subprocess.iterable = createIterable.bind(void 0, subprocess, encoding);
            subprocess[Symbol.asyncIterator] = createIterable.bind(void 0, subprocess, encoding, {});
        };
        const mergePromise = (subprocess, promise)=>{
            for (const [property, descriptor] of descriptors){
                const value1 = descriptor.value.bind(promise);
                Reflect.defineProperty(subprocess, property, {
                    ...descriptor,
                    value: value1
                });
            }
        };
        const nativePromisePrototype = (async ()=>{})().constructor.prototype;
        const descriptors = [
            'then',
            'catch',
            'finally'
        ].map((property)=>[
                property,
                Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
            ]);
        const execaCoreAsync = (rawFile, rawArguments, rawOptions, createNested)=>{
            const { file, commandArguments, command, escapedCommand, startTime, verboseInfo, options, fileDescriptors } = handleAsyncArguments(rawFile, rawArguments, rawOptions);
            const { subprocess, promise } = spawnSubprocessAsync({
                file,
                commandArguments,
                options,
                startTime,
                verboseInfo,
                command,
                escapedCommand,
                fileDescriptors
            });
            subprocess.pipe = pipeToSubprocess.bind(void 0, {
                source: subprocess,
                sourcePromise: promise,
                boundOptions: {},
                createNested
            });
            mergePromise(subprocess, promise);
            SUBPROCESS_OPTIONS.set(subprocess, {
                options,
                fileDescriptors
            });
            return subprocess;
        };
        const handleAsyncArguments = (rawFile, rawArguments, rawOptions)=>{
            const { command, escapedCommand, startTime, verboseInfo } = handleCommand(rawFile, rawArguments, rawOptions);
            const { file, commandArguments, options: normalizedOptions } = normalizeOptions(rawFile, rawArguments, rawOptions);
            const options = handleAsyncOptions(normalizedOptions);
            const fileDescriptors = handleStdioAsync(options, verboseInfo);
            return {
                file,
                commandArguments,
                command,
                escapedCommand,
                startTime,
                verboseInfo,
                options,
                fileDescriptors
            };
        };
        const handleAsyncOptions = ({ timeout, signal, ...options })=>{
            if (void 0 !== signal) throw new TypeError('The "signal" option has been renamed to "cancelSignal" instead.');
            return {
                ...options,
                timeoutDuration: timeout
            };
        };
        const spawnSubprocessAsync = ({ file, commandArguments, options, startTime, verboseInfo, command, escapedCommand, fileDescriptors })=>{
            let subprocess;
            try {
                subprocess = (0, __WEBPACK_EXTERNAL_MODULE_node_child_process_27f17141__.spawn)(file, commandArguments, options);
            } catch (error) {
                return handleEarlyError({
                    error,
                    command,
                    escapedCommand,
                    fileDescriptors,
                    options,
                    startTime,
                    verboseInfo
                });
            }
            const controller = new AbortController();
            (0, __WEBPACK_EXTERNAL_MODULE_node_events_0a6aefe7__.setMaxListeners)(Number.POSITIVE_INFINITY, controller.signal);
            const originalStreams = [
                ...subprocess.stdio
            ];
            pipeOutputAsync(subprocess, fileDescriptors, controller);
            cleanupOnExit(subprocess, options, controller);
            const context = {};
            const onInternalError = createDeferred();
            subprocess.kill = subprocessKill.bind(void 0, {
                kill: subprocess.kill.bind(subprocess),
                options,
                onInternalError,
                context,
                controller
            });
            subprocess.all = makeAllStream(subprocess, options);
            addConvertedStreams(subprocess, options);
            addIpcMethods(subprocess, options);
            const promise = handlePromise({
                subprocess,
                options,
                startTime,
                verboseInfo,
                fileDescriptors,
                originalStreams,
                command,
                escapedCommand,
                context,
                onInternalError,
                controller
            });
            return {
                subprocess,
                promise
            };
        };
        const handlePromise = async ({ subprocess, options, startTime, verboseInfo, fileDescriptors, originalStreams, command, escapedCommand, context, onInternalError, controller })=>{
            const [errorInfo, [exitCode, signal], stdioResults, allResult, ipcOutput] = await waitForSubprocessResult({
                subprocess,
                options,
                context,
                verboseInfo,
                fileDescriptors,
                originalStreams,
                onInternalError,
                controller
            });
            controller.abort();
            onInternalError.resolve();
            const stdio = stdioResults.map((stdioResult, fdNumber)=>stripNewline(stdioResult, options, fdNumber));
            const all = stripNewline(allResult, options, 'all');
            const result = getAsyncResult({
                errorInfo,
                exitCode,
                signal,
                stdio,
                all,
                ipcOutput,
                context,
                options,
                command,
                escapedCommand,
                startTime
            });
            return handleResult(result, verboseInfo, options);
        };
        const getAsyncResult = ({ errorInfo, exitCode, signal, stdio, all, ipcOutput, context, options, command, escapedCommand, startTime })=>'error' in errorInfo ? makeError({
                error: errorInfo.error,
                command,
                escapedCommand,
                timedOut: 'timeout' === context.terminationReason,
                isCanceled: 'cancel' === context.terminationReason || 'gracefulCancel' === context.terminationReason,
                isGracefullyCanceled: 'gracefulCancel' === context.terminationReason,
                isMaxBuffer: errorInfo.error instanceof MaxBufferError,
                isForcefullyTerminated: context.isForcefullyTerminated,
                exitCode,
                signal,
                stdio,
                all,
                ipcOutput,
                options,
                startTime,
                isSync: false
            }) : makeSuccessResult({
                command,
                escapedCommand,
                stdio,
                all,
                ipcOutput,
                options,
                startTime
            });
        const mergeOptions = (boundOptions, options)=>{
            const newOptions = Object.fromEntries(Object.entries(options).map(([optionName, optionValue])=>[
                    optionName,
                    mergeOption(optionName, boundOptions[optionName], optionValue)
                ]));
            return {
                ...boundOptions,
                ...newOptions
            };
        };
        const mergeOption = (optionName, boundOptionValue, optionValue)=>{
            if (DEEP_OPTIONS.has(optionName) && isPlainObject(boundOptionValue) && isPlainObject(optionValue)) return {
                ...boundOptionValue,
                ...optionValue
            };
            return optionValue;
        };
        const DEEP_OPTIONS = new Set([
            'env',
            ...FD_SPECIFIC_OPTIONS
        ]);
        const createExeca = (mapArguments, boundOptions, deepOptions, setBoundExeca)=>{
            const createNested = (mapArguments, boundOptions, setBoundExeca)=>createExeca(mapArguments, boundOptions, deepOptions, setBoundExeca);
            const boundExeca = (...execaArguments)=>callBoundExeca({
                    mapArguments,
                    deepOptions,
                    boundOptions,
                    setBoundExeca,
                    createNested
                }, ...execaArguments);
            if (void 0 !== setBoundExeca) setBoundExeca(boundExeca, createNested, boundOptions);
            return boundExeca;
        };
        const callBoundExeca = ({ mapArguments, deepOptions = {}, boundOptions = {}, setBoundExeca, createNested }, firstArgument, ...nextArguments)=>{
            if (isPlainObject(firstArgument)) return createNested(mapArguments, mergeOptions(boundOptions, firstArgument), setBoundExeca);
            const { file, commandArguments, options, isSync } = parseArguments({
                mapArguments,
                firstArgument,
                nextArguments,
                deepOptions,
                boundOptions
            });
            return isSync ? execaCoreSync(file, commandArguments, options) : execaCoreAsync(file, commandArguments, options, createNested);
        };
        const parseArguments = ({ mapArguments, firstArgument, nextArguments, deepOptions, boundOptions })=>{
            const callArguments = isTemplateString(firstArgument) ? parseTemplates(firstArgument, nextArguments) : [
                firstArgument,
                ...nextArguments
            ];
            const [initialFile, initialArguments, initialOptions] = normalizeParameters(...callArguments);
            const mergedOptions = mergeOptions(mergeOptions(deepOptions, boundOptions), initialOptions);
            const { file = initialFile, commandArguments = initialArguments, options = mergedOptions, isSync = false } = mapArguments({
                file: initialFile,
                commandArguments: initialArguments,
                options: mergedOptions
            });
            return {
                file,
                commandArguments,
                options,
                isSync
            };
        };
        const mapCommandAsync = ({ file, commandArguments })=>parseCommand(file, commandArguments);
        const mapCommandSync = ({ file, commandArguments })=>({
                ...parseCommand(file, commandArguments),
                isSync: true
            });
        const parseCommand = (command, unusedArguments)=>{
            if (unusedArguments.length > 0) throw new TypeError(`The command and its arguments must be passed as a single string: ${command} ${unusedArguments}.`);
            const [file, ...commandArguments] = parseCommandString(command);
            return {
                file,
                commandArguments
            };
        };
        const parseCommandString = (command)=>{
            if ('string' != typeof command) throw new TypeError(`The command must be a string: ${String(command)}.`);
            const trimmedCommand = command.trim();
            if ('' === trimmedCommand) return [];
            const tokens = [];
            for (const token of trimmedCommand.split(SPACES_REGEXP)){
                const previousToken = tokens.at(-1);
                if (previousToken && previousToken.endsWith('\\')) tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
                else tokens.push(token);
            }
            return tokens;
        };
        const SPACES_REGEXP = / +/g;
        const setScriptSync = (boundExeca, createNested, boundOptions)=>{
            boundExeca.sync = createNested(mapScriptSync, boundOptions);
            boundExeca.s = boundExeca.sync;
        };
        const mapScriptAsync = ({ options })=>getScriptOptions(options);
        const mapScriptSync = ({ options })=>({
                ...getScriptOptions(options),
                isSync: true
            });
        const getScriptOptions = (options)=>({
                options: {
                    ...getScriptStdinOption(options),
                    ...options
                }
            });
        const getScriptStdinOption = ({ input, inputFile, stdio })=>void 0 === input && void 0 === inputFile && void 0 === stdio ? {
                stdin: 'inherit'
            } : {};
        const deepScriptOptions = {
            preferLocal: true
        };
        const execa = createExeca(()=>({}));
        createExeca(()=>({
                isSync: true
            }));
        createExeca(mapCommandAsync);
        createExeca(mapCommandSync);
        createExeca(mapNode);
        createExeca(mapScriptAsync, {}, deepScriptOptions, setScriptSync);
        const { sendMessage: execa_sendMessage, getOneMessage: execa_getOneMessage, getEachMessage: execa_getEachMessage, getCancelSignal: execa_getCancelSignal } = getIpcExport();
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    return module.exports;
}
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
var picocolors_picocolors = __webpack_require__("../../node_modules/.pnpm/picocolors@1.1.1/node_modules/picocolors/picocolors.js");
const banner = (0, __WEBPACK_EXTERNAL_MODULE_boxen__["default"])([
    `${picocolors_picocolors.bold("eas-update")}`
].join("\n"), {
    padding: 1,
    borderStyle: "round",
    borderColor: "green",
    textAlignment: "center"
});
const { packageJson } = (0, __WEBPACK_EXTERNAL_MODULE_read_package_up_b3f2e823__.readPackageUpSync)({
    cwd: process.cwd()
}) ?? {};
function checkPackageAvailable(packageName, satisfiesVersion) {
    const packageVersion = packageJson?.dependencies?.[packageName]?.replace(/[\^~]/g, "");
    const isPackageInstalled = !!packageVersion;
    if (!isPackageInstalled) throw new Error(`${packageName} is not installed`);
    const isSatisfiedVersion = void 0 !== packageVersion && __WEBPACK_EXTERNAL_MODULE_semver__.satisfies(packageVersion, satisfiesVersion);
    if (!isSatisfiedVersion) throw new Error(`This package requires version ${satisfiesVersion}`);
}
var execa = __webpack_require__("./node_modules/execa/index.js");
var lib = __webpack_require__("../../node_modules/.pnpm/workspace-tools@0.38.1/node_modules/workspace-tools/lib/index.js");
const getCwd = ()=>(0, lib.findPackageRoot)(process.cwd());
var external_path_ = __webpack_require__("path");
var promises_ = __webpack_require__("fs/promises");
var esm_require = (0, __WEBPACK_EXTERNAL_MODULE_module__.createRequire)('/');
var Worker;
try {
    Worker = esm_require('worker_threads').Worker;
} catch (e) {}
var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    0,
    0,
    0
]);
var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    0,
    0
]);
var clim = new u8([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
var freb = function(eb, start) {
    var b = new u16(31);
    for(var i = 0; i < 31; ++i)b[i] = start += 1 << eb[i - 1];
    var r = new i32(b[30]);
    for(var i = 1; i < 30; ++i)for(var j = b[i]; j < b[i + 1]; ++j)r[j] = j - b[i] << 5 | i;
    return {
        b: b,
        r: r
    };
};
var esm_a = freb(fleb, 2), esm_fl = esm_a.b, revfl = esm_a.r;
esm_fl[28] = 258, revfl[258] = 28;
var esm_b = freb(fdeb, 0), fd = esm_b.b, revfd = esm_b.r;
var rev = new u16(32768);
for(var esm_i = 0; esm_i < 32768; ++esm_i){
    var x = (0xAAAA & esm_i) >> 1 | (0x5555 & esm_i) << 1;
    x = (0xCCCC & x) >> 2 | (0x3333 & x) << 2;
    x = (0xF0F0 & x) >> 4 | (0x0F0F & x) << 4;
    rev[esm_i] = ((0xFF00 & x) >> 8 | (0x00FF & x) << 8) >> 1;
}
var hMap = function(cd, mb, r) {
    var s = cd.length;
    var i = 0;
    var l = new u16(mb);
    for(; i < s; ++i)if (cd[i]) ++l[cd[i] - 1];
    var le = new u16(mb);
    for(i = 1; i < mb; ++i)le[i] = le[i - 1] + l[i - 1] << 1;
    var co;
    if (r) {
        co = new u16(1 << mb);
        var rvb = 15 - mb;
        for(i = 0; i < s; ++i)if (cd[i]) {
            var sv = i << 4 | cd[i];
            var r_1 = mb - cd[i];
            var v = le[cd[i] - 1]++ << r_1;
            for(var m = v | (1 << r_1) - 1; v <= m; ++v)co[rev[v] >> rvb] = sv;
        }
    } else {
        co = new u16(s);
        for(i = 0; i < s; ++i)if (cd[i]) co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
    }
    return co;
};
var flt = new u8(288);
for(var esm_i = 0; esm_i < 144; ++esm_i)flt[esm_i] = 8;
for(var esm_i = 144; esm_i < 256; ++esm_i)flt[esm_i] = 9;
for(var esm_i = 256; esm_i < 280; ++esm_i)flt[esm_i] = 7;
for(var esm_i = 280; esm_i < 288; ++esm_i)flt[esm_i] = 8;
var fdt = new u8(32);
for(var esm_i = 0; esm_i < 32; ++esm_i)fdt[esm_i] = 5;
var flm = /*#__PURE__*/ hMap(flt, 9, 0);
var fdm = /*#__PURE__*/ hMap(fdt, 5, 0);
var shft = function(p) {
    return (p + 7) / 8 | 0;
};
var slc = function(v, s, e) {
    if (null == s || s < 0) s = 0;
    if (null == e || e > v.length) e = v.length;
    return new u8(v.subarray(s, e));
};
var ec = [
    'unexpected EOF',
    'invalid block type',
    'invalid length/literal',
    'invalid distance',
    'stream finished',
    'no stream handler',
    ,
    'no callback',
    'invalid UTF-8 data',
    'extra field too long',
    'date not in range 1980-2099',
    'filename too long',
    'stream finishing',
    'invalid zip data'
];
var esm_err = function(ind, msg, nt) {
    var e = new Error(msg || ec[ind]);
    e.code = ind;
    if (Error.captureStackTrace) Error.captureStackTrace(e, esm_err);
    if (!nt) throw e;
    return e;
};
var wbits = function(d, p, v) {
    v <<= 7 & p;
    var o = p / 8 | 0;
    d[o] |= v;
    d[o + 1] |= v >> 8;
};
var wbits16 = function(d, p, v) {
    v <<= 7 & p;
    var o = p / 8 | 0;
    d[o] |= v;
    d[o + 1] |= v >> 8;
    d[o + 2] |= v >> 16;
};
var hTree = function(d, mb) {
    var t = [];
    for(var i = 0; i < d.length; ++i)if (d[i]) t.push({
        s: i,
        f: d[i]
    });
    var s = t.length;
    var t2 = t.slice();
    if (!s) return {
        t: et,
        l: 0
    };
    if (1 == s) {
        var v = new u8(t[0].s + 1);
        v[t[0].s] = 1;
        return {
            t: v,
            l: 1
        };
    }
    t.sort(function(a, b) {
        return a.f - b.f;
    });
    t.push({
        s: -1,
        f: 25001
    });
    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
    t[0] = {
        s: -1,
        f: l.f + r.f,
        l: l,
        r: r
    };
    while(i1 != s - 1){
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = {
            s: -1,
            f: l.f + r.f,
            l: l,
            r: r
        };
    }
    var maxSym = t2[0].s;
    for(var i = 1; i < s; ++i)if (t2[i].s > maxSym) maxSym = t2[i].s;
    var tr = new u16(maxSym + 1);
    var mbt = ln(t[i1 - 1], tr, 0);
    if (mbt > mb) {
        var i = 0, dt = 0;
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function(a, b) {
            return tr[b.s] - tr[a.s] || a.f - b.f;
        });
        for(; i < s; ++i){
            var i2_1 = t2[i].s;
            if (tr[i2_1] > mb) {
                dt += cst - (1 << mbt - tr[i2_1]);
                tr[i2_1] = mb;
            } else break;
        }
        dt >>= lft;
        while(dt > 0){
            var i2_2 = t2[i].s;
            if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;
            else ++i;
        }
        for(; i >= 0 && dt; --i){
            var i2_3 = t2[i].s;
            if (tr[i2_3] == mb) {
                --tr[i2_3];
                ++dt;
            }
        }
        mbt = mb;
    }
    return {
        t: new u8(tr),
        l: mbt
    };
};
var ln = function(n, l, d) {
    return -1 == n.s ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
var lc = function(c) {
    var s = c.length;
    while(s && !c[--s]);
    var cl = new u16(++s);
    var cli = 0, cln = c[0], cls = 1;
    var w = function(v) {
        cl[cli++] = v;
    };
    for(var i = 1; i <= s; ++i)if (c[i] == cln && i != s) ++cls;
    else {
        if (!cln && cls > 2) {
            for(; cls > 138; cls -= 138)w(32754);
            if (cls > 2) {
                w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
                cls = 0;
            }
        } else if (cls > 3) {
            w(cln), --cls;
            for(; cls > 6; cls -= 6)w(8304);
            if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
        }
        while(cls--)w(cln);
        cls = 1;
        cln = c[i];
    }
    return {
        c: cl.subarray(0, cli),
        n: s
    };
};
var clen = function(cf, cl) {
    var l = 0;
    for(var i = 0; i < cl.length; ++i)l += cf[i] * cl[i];
    return l;
};
var wfblk = function(out, pos, dat) {
    var s = dat.length;
    var o = shft(pos + 2);
    out[o] = 255 & s;
    out[o + 1] = s >> 8;
    out[o + 2] = 255 ^ out[o];
    out[o + 3] = 255 ^ out[o + 1];
    for(var i = 0; i < s; ++i)out[o + i + 4] = dat[i];
    return (o + 4 + s) * 8;
};
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
    wbits(out, p++, final);
    ++lf[256];
    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;
    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;
    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;
    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;
    var lcfreq = new u16(19);
    for(var i = 0; i < lclt.length; ++i)++lcfreq[31 & lclt[i]];
    for(var i = 0; i < lcdt.length; ++i)++lcfreq[31 & lcdt[i]];
    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;
    var nlcc = 19;
    for(; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);
    var flen = bl + 5 << 3;
    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];
    if (bs >= 0 && flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
    var lm, ll, dm, dl;
    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
    if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p, nlc - 257);
        wbits(out, p + 5, ndc - 1);
        wbits(out, p + 10, nlcc - 4);
        p += 14;
        for(var i = 0; i < nlcc; ++i)wbits(out, p + 3 * i, lct[clim[i]]);
        p += 3 * nlcc;
        var lcts = [
            lclt,
            lcdt
        ];
        for(var it = 0; it < 2; ++it){
            var clct = lcts[it];
            for(var i = 0; i < clct.length; ++i){
                var len = 31 & clct[i];
                wbits(out, p, llm[len]), p += lct[len];
                if (len > 15) wbits(out, p, clct[i] >> 5 & 127), p += clct[i] >> 12;
            }
        }
    } else lm = flm, ll = flt, dm = fdm, dl = fdt;
    for(var i = 0; i < li; ++i){
        var sym = syms[i];
        if (sym > 255) {
            var len = sym >> 18 & 31;
            wbits16(out, p, lm[len + 257]), p += ll[len + 257];
            if (len > 7) wbits(out, p, sym >> 23 & 31), p += fleb[len];
            var dst = 31 & sym;
            wbits16(out, p, dm[dst]), p += dl[dst];
            if (dst > 3) wbits16(out, p, sym >> 5 & 8191), p += fdeb[dst];
        } else wbits16(out, p, lm[sym]), p += ll[sym];
    }
    wbits16(out, p, lm[256]);
    return p + ll[256];
};
var deo = /*#__PURE__*/ new i32([
    65540,
    131080,
    131088,
    131104,
    262176,
    1048704,
    1048832,
    2114560,
    2117632
]);
var et = /*#__PURE__*/ new u8(0);
var dflt = function(dat, lvl, plvl, pre, post, st) {
    var s = st.z || dat.length;
    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);
    var w = o.subarray(pre, o.length - post);
    var lst = st.l;
    var pos = 7 & (st.r || 0);
    if (lvl) {
        if (pos) w[0] = st.r >> 3;
        var opt = deo[lvl - 1];
        var n = opt >> 13, c = 8191 & opt;
        var msk_1 = (1 << plvl) - 1;
        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function(i) {
            return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;
        };
        var syms = new i32(25000);
        var lf = new u16(288), df = new u16(32);
        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;
        for(; i + 2 < s; ++i){
            var hv = hsh(i);
            var imod = 32767 & i, pimod = head[hv];
            prev[imod] = pimod;
            head[hv] = imod;
            if (wi <= i) {
                var rem = s - i;
                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {
                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
                    li = lc_1 = eb = 0, bs = i;
                    for(var j = 0; j < 286; ++j)lf[j] = 0;
                    for(var j = 0; j < 30; ++j)df[j] = 0;
                }
                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
                if (rem > 2 && hv == hsh(i - dif)) {
                    var maxn = Math.min(n, rem) - 1;
                    var maxd = Math.min(32767, i);
                    var ml = Math.min(258, rem);
                    while(dif <= maxd && --ch_1 && imod != pimod){
                        if (dat[i + l] == dat[i + l - dif]) {
                            var nl = 0;
                            for(; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);
                            if (nl > l) {
                                l = nl, d = dif;
                                if (nl > maxn) break;
                                var mmd = Math.min(dif, nl - 2);
                                var md = 0;
                                for(var j = 0; j < mmd; ++j){
                                    var ti = i - dif + j & 32767;
                                    var pti = prev[ti];
                                    var cd = ti - pti & 32767;
                                    if (cd > md) md = cd, pimod = ti;
                                }
                            }
                        }
                        imod = pimod, pimod = prev[imod];
                        dif += imod - pimod & 32767;
                    }
                }
                if (d) {
                    syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
                    var lin = 31 & revfl[l], din = 31 & revfd[d];
                    eb += fleb[lin] + fdeb[din];
                    ++lf[257 + lin];
                    ++df[din];
                    wi = i + l;
                    ++lc_1;
                } else {
                    syms[li++] = dat[i];
                    ++lf[dat[i]];
                }
            }
        }
        for(i = Math.max(i, wi); i < s; ++i){
            syms[li++] = dat[i];
            ++lf[dat[i]];
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
        if (!lst) {
            st.r = 7 & pos | w[pos / 8 | 0] << 3;
            pos -= 7;
            st.h = head, st.p = prev, st.i = i, st.w = wi;
        }
    } else {
        for(var i = st.w || 0; i < s + lst; i += 65535){
            var e = i + 65535;
            if (e >= s) {
                w[pos / 8 | 0] = lst;
                e = s;
            }
            pos = wfblk(w, pos + 1, dat.subarray(i, e));
        }
        st.i = s;
    }
    return slc(o, 0, pre + shft(pos) + post);
};
var crct = /*#__PURE__*/ function() {
    var t = new Int32Array(256);
    for(var i = 0; i < 256; ++i){
        var c = i, k = 9;
        while(--k)c = (1 & c && -306674912) ^ c >>> 1;
        t[i] = c;
    }
    return t;
}();
var crc = function() {
    var c = -1;
    return {
        p: function(d) {
            var cr = c;
            for(var i = 0; i < d.length; ++i)cr = crct[255 & cr ^ d[i]] ^ cr >>> 8;
            c = cr;
        },
        d: function() {
            return ~c;
        }
    };
};
var dopt = function(dat, opt, pre, post, st) {
    if (!st) {
        st = {
            l: 1
        };
        if (opt.dictionary) {
            var dict = opt.dictionary.subarray(-32768);
            var newDat = new u8(dict.length + dat.length);
            newDat.set(dict);
            newDat.set(dat, dict.length);
            dat = newDat;
            st.w = dict.length;
        }
    }
    return dflt(dat, null == opt.level ? 6 : opt.level, null == opt.mem ? st.l ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(dat.length)))) : 20 : 12 + opt.mem, pre, post, st);
};
var mrg = function(a, b) {
    var o = {};
    for(var k in a)o[k] = a[k];
    for(var k in b)o[k] = b[k];
    return o;
};
var wbytes = function(d, b, v) {
    for(; v; ++b)d[b] = v, v >>>= 8;
};
function deflateSync(data, opts) {
    return dopt(data, opts || {}, 0, 0);
}
var fltn = function(d, p, t, o) {
    for(var k in d){
        var val = d[k], n = p + k, op = o;
        if (Array.isArray(val)) op = mrg(o, val[1]), val = val[0];
        if (val instanceof u8) t[n] = [
            val,
            op
        ];
        else {
            t[n += '/'] = [
                new u8(0),
                op
            ];
            fltn(val, n, t, o);
        }
    }
};
var te = 'undefined' != typeof TextEncoder && /*#__PURE__*/ new TextEncoder();
var esm_td = 'undefined' != typeof TextDecoder && /*#__PURE__*/ new TextDecoder();
try {
    esm_td.decode(et, {
        stream: true
    });
} catch (e) {}
function strToU8(str, latin1) {
    if (latin1) {
        var ar_1 = new u8(str.length);
        for(var i = 0; i < str.length; ++i)ar_1[i] = str.charCodeAt(i);
        return ar_1;
    }
    if (te) return te.encode(str);
    var l = str.length;
    var ar = new u8(str.length + (str.length >> 1));
    var ai = 0;
    var w = function(v) {
        ar[ai++] = v;
    };
    for(var i = 0; i < l; ++i){
        if (ai + 5 > ar.length) {
            var n = new u8(ai + 8 + (l - i << 1));
            n.set(ar);
            ar = n;
        }
        var c = str.charCodeAt(i);
        if (c < 128 || latin1) w(c);
        else c < 2048 ? w(192 | c >> 6) : (c > 55295 && c < 57344 ? (c = 65536 + (1047552 & c) | 1023 & str.charCodeAt(++i), w(240 | c >> 18), w(128 | c >> 12 & 63)) : w(224 | c >> 12), w(128 | c >> 6 & 63)), w(128 | 63 & c);
    }
    return slc(ar, 0, ai);
}
var exfl = function(ex) {
    var le = 0;
    if (ex) for(var k in ex){
        var l = ex[k].length;
        if (l > 65535) esm_err(9);
        le += l + 4;
    }
    return le;
};
var wzh = function(d, b, f, fn, u, c, ce, co) {
    var fl = fn.length, ex = f.extra, col = co && co.length;
    var exl = exfl(ex);
    wbytes(d, b, null != ce ? 0x2014B50 : 0x4034B50), b += 4;
    if (null != ce) d[b++] = 20, d[b++] = f.os;
    d[b] = 20, b += 2;
    d[b++] = f.flag << 1 | (c < 0 && 8), d[b++] = u && 8;
    d[b++] = 255 & f.compression, d[b++] = f.compression >> 8;
    var dt = new Date(null == f.mtime ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;
    if (y < 0 || y > 119) esm_err(10);
    wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >> 1), b += 4;
    if (-1 != c) {
        wbytes(d, b, f.crc);
        wbytes(d, b + 4, c < 0 ? -c - 2 : c);
        wbytes(d, b + 8, f.size);
    }
    wbytes(d, b + 12, fl);
    wbytes(d, b + 14, exl), b += 16;
    if (null != ce) {
        wbytes(d, b, col);
        wbytes(d, b + 6, f.attrs);
        wbytes(d, b + 10, ce), b += 14;
    }
    d.set(fn, b);
    b += fl;
    if (exl) for(var k in ex){
        var exf = ex[k], l = exf.length;
        wbytes(d, b, +k);
        wbytes(d, b + 2, l);
        d.set(exf, b + 4), b += 4 + l;
    }
    if (col) d.set(co, b), b += col;
    return b;
};
var wzf = function(o, b, c, d, e) {
    wbytes(o, b, 0x6054B50);
    wbytes(o, b + 8, c);
    wbytes(o, b + 10, c);
    wbytes(o, b + 12, d);
    wbytes(o, b + 16, e);
};
function zipSync(data, opts) {
    if (!opts) opts = {};
    var r = {};
    var files = [];
    fltn(data, '', r, opts);
    var o = 0;
    var tot = 0;
    for(var fn in r){
        var _a = r[fn], file = _a[0], p = _a[1];
        var compression = 0 == p.level ? 0 : 8;
        var f = strToU8(fn), s = f.length;
        var com = p.comment, m = com && strToU8(com), ms = m && m.length;
        var exl = exfl(p.extra);
        if (s > 65535) esm_err(11);
        var d = compression ? deflateSync(file, p) : file, l = d.length;
        var c = crc();
        c.p(file);
        files.push(mrg(p, {
            size: file.length,
            crc: c.d(),
            c: d,
            f: f,
            m: m,
            u: s != fn.length || m && com.length != ms,
            o: o,
            compression: compression
        }));
        o += 30 + s + exl + l;
        tot += 76 + 2 * (s + exl) + (ms || 0) + l;
    }
    var out = new u8(tot + 22), oe = o, cdl = tot - o;
    for(var i = 0; i < files.length; ++i){
        var f = files[i];
        wzh(out, f.o, f, f.f, f.u, f.c.length);
        var badd = 30 + f.f.length + exfl(f.extra);
        out.set(f.c, f.o + badd);
        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);
    }
    wzf(out, o, files.length, cdl, oe);
    return out;
}
'function' == typeof queueMicrotask ? queueMicrotask : 'function' == typeof setTimeout && setTimeout;
var fast_glob_out = __webpack_require__("../../node_modules/.pnpm/fast-glob@3.3.3/node_modules/fast-glob/out/index.js");
var out_default = /*#__PURE__*/ __webpack_require__.n(fast_glob_out);
async function zipDistFolder(sourceDir, outputFile) {
    try {
        const outputDir = external_path_.dirname(outputFile);
        await promises_.mkdir(outputDir, {
            recursive: true
        });
        const files = await out_default()(sourceDir, {
            onlyFiles: true
        });
        const zipObj = {};
        for (const filePath of files){
            const relativePath = external_path_.relative(sourceDir, filePath);
            const content = await promises_.readFile(filePath);
            zipObj[relativePath] = new Uint8Array(content);
        }
        const zipData = zipSync(zipObj, {
            level: 9
        });
        await promises_.writeFile(outputFile, zipData);
    } catch (error) {
        throw error;
    }
}
var external_fs_ = __webpack_require__("fs");
async function uploadS3(filePath, fileName, params) {
    const { bucketName, accessKeyId, region, secretAccessKey } = params;
    try {
        const client = new __WEBPACK_EXTERNAL_MODULE__aws_sdk_client_s3_241e987a__.S3Client({
            region,
            credentials: {
                accessKeyId,
                secretAccessKey
            }
        });
        const fileStream = (0, external_fs_.createReadStream)(filePath);
        const upload = new __WEBPACK_EXTERNAL_MODULE__aws_sdk_lib_storage_3664e495__.Upload({
            client,
            params: {
                Bucket: bucketName,
                Key: fileName,
                Body: fileStream
            }
        });
        upload.on("httpUploadProgress", (progress)=>{
            const loaded = progress.loaded || 0;
            const total = progress.total || 0;
            if (total > 0) {
                const percentComplete = Math.round(loaded / total * 100);
                __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.message(`Uploading : ${percentComplete}%`);
            } else __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.message(`Uploaded: ${loaded}`);
        });
        const result = await upload.done();
        return result.Location;
    } catch (error) {
        throw error;
    }
}
const MODULE_NAME = "eas-update";
const loadConfig = async ()=>{
    const result = await (0, __WEBPACK_EXTERNAL_MODULE_cosmiconfig__.cosmiconfig)(MODULE_NAME, {
        stopDir: getCwd(),
        searchPlaces: [
            "package.json",
            `${MODULE_NAME}.config.js`,
            `${MODULE_NAME}.config.cjs`,
            `${MODULE_NAME}.config.mjs`,
            `${MODULE_NAME}.config.ts`
        ],
        ignoreEmptySearchPlaces: false,
        loaders: {
            ".ts": (0, __WEBPACK_EXTERNAL_MODULE_cosmiconfig_typescript_loader_05c5f2fe__.TypeScriptLoader)(),
            ".mts": (0, __WEBPACK_EXTERNAL_MODULE_cosmiconfig_typescript_loader_05c5f2fe__.TypeScriptLoader)(),
            ".cts": (0, __WEBPACK_EXTERNAL_MODULE_cosmiconfig_typescript_loader_05c5f2fe__.TypeScriptLoader)()
        }
    }).search();
    if (!result?.config) throw new Error("Failed to find config");
    if ("function" == typeof result.config) return await result.config();
    return result.config;
};
var loadEnv = __webpack_require__("./src/lib/loadEnv.ts");
const program = new __WEBPACK_EXTERNAL_MODULE_commander__.Command();
let isExiting = false;
process.on("SIGINT", async ()=>{
    if (isExiting) return;
    isExiting = true;
    __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.error("\n\n🛑 Process interrupted. Cleaning up...");
    process.exit(1);
});
program.name("eas-update").description(banner).version("1.0.0");
program.command("deploy").description("Upload bundle").action(async ()=>{
    const cwd = getCwd();
    const bundlePath = external_path_.resolve(cwd, "./dist");
    const zippedBundlePath = external_path_.resolve(cwd, "./dist.zip");
    try {
        const platforms = await __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.multiselect({
            message: "Select platforms",
            options: [
                {
                    label: "Android",
                    value: "ANDROID"
                },
                {
                    label: "Ios",
                    value: "IOS"
                }
            ],
            initialValues: [
                "ANDROID",
                "IOS"
            ],
            required: true
        });
        if (!platforms || 0 === platforms.length) throw new Error("No platforms selected. Exiting...");
        const environment = await __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.select({
            message: "Select environment",
            options: [
                {
                    value: "PRODUCTION",
                    label: "production"
                },
                {
                    value: "DEVELOPMENT",
                    label: "development"
                },
                {
                    value: "PREVIEW",
                    label: "preview"
                }
            ],
            initialValue: "PRODUCTION"
        });
        if (!environment) throw new Error("No environment selected. Exiting...");
        const config = await loadConfig();
        let runtimeVersion = config.runtimeVersion;
        if (runtimeVersion && __WEBPACK_EXTERNAL_MODULE_semver__["default"].valid(runtimeVersion)) __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.success(`runtimeVersion : ${runtimeVersion}`);
        else {
            runtimeVersion = await __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.text({
                message: "What runtimeVersion would you like to set?",
                placeholder: "1.0.0",
                validate: (value1)=>{
                    if (!__WEBPACK_EXTERNAL_MODULE_semver__["default"].valid(value1)) return new Error("Please enter a valid semantic version (e.g., 1.0.0)");
                }
            });
            if ("string" != typeof runtimeVersion) throw new Error("No runtimeVersion");
        }
        await __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.tasks([
            {
                title: `Exporting ${platforms.join(", ").toLocaleLowerCase()} bundles`,
                task: async ()=>{
                    await checkPackageAvailable("expo", "52.x.x");
                    await (0, execa.r)("expo", [
                        "export",
                        ...platforms.flatMap((platform)=>[
                                "--platform",
                                platform.toLocaleLowerCase()
                            ]),
                        "--output-dir",
                        bundlePath
                    ]);
                }
            },
            {
                title: "Zipping bundles",
                task: async ()=>{
                    await zipDistFolder(bundlePath, zippedBundlePath);
                }
            },
            {
                title: "Uploading bundles",
                task: async ()=>{
                    switch(config.storage){
                        case "AWS_S3":
                            const env = await (0, loadEnv.Z)([
                                "AWS_ACCESS_KEY_ID",
                                "AWS_SECRET_ACCESS_KEY",
                                "AWS_REGION",
                                "AWS_BUCKET_NAME"
                            ]);
                            await uploadS3(zippedBundlePath, `${runtimeVersion}/${environment}/${Date.now()}.zip`, {
                                accessKeyId: env.AWS_ACCESS_KEY_ID,
                                bucketName: env.AWS_BUCKET_NAME,
                                region: env.AWS_REGION,
                                secretAccessKey: env.AWS_SECRET_ACCESS_KEY
                            });
                            break;
                        default:
                            throw new Error("Please check the storage settings in the config");
                    }
                }
            }
        ]);
        __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.outro("🚀 Deployment Successful");
    } catch (e) {
        __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.error(e);
        __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.outro("Deployment failed");
    } finally{
        try {
            await (0, promises_.unlink)(zippedBundlePath);
            __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.error("Cleaned up temporary files.");
        } catch (err) {
            __WEBPACK_EXTERNAL_MODULE__clack_prompts_3cae1695__.log.error(err);
        }
    }
});
program.parse(process.argv);
if (!process.argv.slice(2).length) program.outputHelp();
