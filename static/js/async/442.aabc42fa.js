"use strict";(self.webpackChunk_cloud_push_docs=self.webpackChunk_cloud_push_docs||[]).push([["442"],{4349:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var i=s(651),a=s(6971);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"configs",children:["Configs",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configs",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"cloud-push uses two types of config."}),"\n",(0,i.jsxs)(n.h2,{id:"cloud-pushconfigts--cliconfig-",children:["cloud-push.config.ts ( CliConfig )",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cloud-pushconfigts--cliconfig-",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"This config is used when using the CLI. It runs in the node runtime.\nIf a value is set in cliConfig, you can omit it during deploy and the config value will be automatically applied."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type CliConfig = {\n  loadClients: () => { storage: StorageClient; db: DbClient };\n  runtimeVersion?: string;\n  channel?: string;\n  envSource?: ENV_SOURCE;\n  environment?: Environment;\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"example",children:["Example",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { defineConfig } from "@cloud-push/cli";\n\nexport default defineConfig(() => ({\n  loadClients: () => {\n    const storageClient = new SupabaseStorageClient({\n      bucketName: process.env.SUPABASE_BUCKET_NAME,\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_KEY,\n    });\n\n    const dbClient = new SupabaseDbClient({\n      tableName: process.env.SUPABASE_TABLE_NAME!,\n      supabaseUrl: process.env.SUPABASE_URL!,\n      supabaseKey: process.env.SUPABASE_KEY!,\n    });\n\n    return {\n      storage: storageClient,\n      db: dbClient,\n    };\n  },\n}));\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"appconfigts--appconfig-",children:["app.config.ts ( AppConfig )",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#appconfigts--appconfig-",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"These are static values used after build.\nIt uses the extra field of app.config.ts provided by expo."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface AppConfig {\n  checkUpdateStatusUrl?: string;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"example-1",children:["Example",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-1",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'{\n	extra: {\n		eas: {\n			projectId: "12345aaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n		},\n		cloudPush: {\n			checkUpdateStatusUrl: "https://yourdomain/api/udpates/status",\n		} as AppConfig,\n	},\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"best-practice",children:["Best Practice",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#best-practice",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"AppConfig and CliConfig have some values that need to be shared. Create a static json or js file to share values."}),"\n",(0,i.jsxs)(n.h3,{id:"sharedconfigjs",children:["sharedConfig.js",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sharedconfigjs",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'module.exports = {\n  runtimeVersion: "1.0.0",\n  channel: "development",\n  updateBundleUrl: "http://yourdomain/api/updates/manifest",\n  currentBundleUrl: "http://yourdomain/api/updates/status",\n};\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"cloud-pushconfigts",children:["cloud-push.config.ts",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cloud-pushconfigts",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { defineConfig } from "@cloud-push/expo";\nimport sharedConfig from "./sharedConfig";\n\nexport default defineConfig(() => ({\n  storage: storageClient,\n  db: dbClient,\n  envSource: "file",\n  runtimeVersion: sharedConfig.runtimeVersion,\n  channel: sharedConfig.channel,\n  environment: "development",\n}));\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"appconfigts",children:["app.config.ts",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#appconfigts",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import type { ExpoConfig, ConfigContext } from "expo/config";\nimport sharedConfig from "./sharedConfig";\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  version: version.runtimeVersion,\n  runtimeVersion: {\n    policy: "appVersion",\n  },\n  extra: {\n    eas: {\n      projectId: "12345aaa-bbbb-cccc-dddd-eeeeeeeeeeee",\n    },\n    cloudPush: {\n      checkUpdateStatusUrl: "https://yourdomain/api/udpates/status",\n    } as AppConfig,\n  },\n});\n'})})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}let o=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["guide%2F3.expo%2F3.configs%2Findex.mdx"]={toc:[{text:"cloud-push.config.ts ( CliConfig )",id:"cloud-pushconfigts--cliconfig-",depth:2},{text:"Example",id:"example",depth:3},{text:"app.config.ts ( AppConfig )",id:"appconfigts--appconfig-",depth:2},{text:"Example",id:"example-1",depth:3},{text:"Best Practice",id:"best-practice",depth:2},{text:"sharedConfig.js",id:"sharedconfigjs",depth:3},{text:"cloud-push.config.ts",id:"cloud-pushconfigts",depth:3},{text:"app.config.ts",id:"appconfigts",depth:3}],title:"Configs",headingTitle:"Configs",frontmatter:{}}}}]);